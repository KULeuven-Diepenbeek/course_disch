<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>3. ALU on Digitale Elektronische Schakelingen</title>
    <link>https://kuleuven-diepenbeek.github.io/course_disch/300_alu/</link>
    <description>Recent content in 3. ALU on Digitale Elektronische Schakelingen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <managingEditor>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Nele Mentens and Jo Vliegen)</managingEditor>
    <webMaster>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Nele Mentens and Jo Vliegen)</webMaster><atom:link href="https://kuleuven-diepenbeek.github.io/course_disch/300_alu/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Wat is een ALU?</title>
      <link>https://kuleuven-diepenbeek.github.io/course_disch/300_alu/310_intro_alu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Nele Mentens and Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/course_disch/300_alu/310_intro_alu/</guid>
      <description>Het doel van dit labo is om uiteindelijk een werkende microprocessor te maken, ook al is het in een simpele vorm. Het doel is om de hack processor te maken van de cursus nand2tetris. In dit OPO gaan we de beschrijving uiteraard wel maken in VHDL.
Eén van de componenten die in iedere processor zit is een Arithmetic Logic Unit (ALU). Een ALU neemt 2 (of 1) input(s) en voert hier een bepaalde instructie mee uit.</description>
    </item>
    
    <item>
      <title>2&#39;s Compliments</title>
      <link>https://kuleuven-diepenbeek.github.io/course_disch/300_alu/315_2scompliment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Nele Mentens and Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/course_disch/300_alu/315_2scompliment/</guid>
      <description>ℕ Gezien je voor een richting electronica gekozen hebt, gaan we er van uit dat je geen schrik hebt van binaire getallen. Hopelijk zie je dat 0b1010 hetzelfde is als 0xA, of tien zoals men in de volksmond zegt. Hieronder vind je nog een overzichtstabel voor de eerste 16 natuurlijke getallen.
DecBinHexDecBinHexDecBinHexDecBinHex 00b00x0 40b1000x4 80b10000x8 120b11000xC 10b10x1 50b1010x5 90b10010x9 130b11010xD 20b100x2 60b1100x6 100b10100xA 140b11100xE 30b110x3 70b1110x7 110b10110xB 150b11110xF Merk op dat alle 16 mogelijkheden binair te vervatten zijn in 4 tekens (=digits).</description>
    </item>
    
    <item>
      <title>Status codes ALU</title>
      <link>https://kuleuven-diepenbeek.github.io/course_disch/300_alu/320_status_codes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Nele Mentens and Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/course_disch/300_alu/320_status_codes/</guid>
      <description>De ALU gaat dus een arithmetische of logische instructie uitvoeren.
In werkelijkheid gaat men niet rechtstreeks instructies aan een ALU geven, maar meer de status wat de ALU moet hebben.
Onze ALU heeft 2 ingang van 16-bit registers. Onze ALU geeft ook status codes uit die we later in de processor nog gebruiken. </description>
    </item>
    
    <item>
      <title>Opdracht 4: ALU</title>
      <link>https://kuleuven-diepenbeek.github.io/course_disch/300_alu/330_opdracht_alu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Nele Mentens and Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/course_disch/300_alu/330_opdracht_alu/</guid>
      <description>De ALU die je moet maken voor deze opdracht ziet er zo uit. Ingangen x en y zijn 16 bits. De input status bits zijn zx (zero x) ,nx (negate x), zy (zero y), ny (negate y), f (function), no (negate output). De output status zijn zr (zero) en ng (negativee).
Later zetten we de input status code juist op basis van de binnenkomende instructie en optioneel doen we iets met de output status codes.</description>
    </item>
    
    <item>
      <title>Testbench ALU</title>
      <link>https://kuleuven-diepenbeek.github.io/course_disch/300_alu/340_testbench_alu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Nele Mentens and Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/course_disch/300_alu/340_testbench_alu/</guid>
      <description>De testbench om te testen of de ALU werkt is deze. Deze testbench wordt ook gebruikt om de opdracht te verbeteren!
library IEEE; use IEEE.STD_LOGIC_1164.ALL; -- Uncomment the following library declaration if using -- arithmetic functions with Signed or Unsigned values --use IEEE.NUMERIC_STD.ALL; -- Uncomment the following library declaration if instantiating -- any Xilinx leaf cells in this code. --library UNISIM; --use UNISIM.VComponents.all; entity tb_ALU is -- Port ( ); end tb_ALU; architecture Behavioral of tb_ALU is component ALU is Port (zx, nx, zy, ny, f, no: in std_logic ; x, y: in std_logic_vector(15 downto 0); z : out std_logic_vector(15 downto 0); zr, ng: out std_logic); end component; signal zx, nx, zy, ny, f, no: std_logic ; signal x, y: std_logic_vector(15 downto 0); signal z : std_logic_vector(15 downto 0); signal zr, ng: std_logic; begin DUT: ALU port map( zx =&amp;gt; zx, nx =&amp;gt; nx, zy =&amp;gt; zy, ny =&amp;gt; ny, f =&amp;gt; f, no =&amp;gt; no, x =&amp;gt; x, y =&amp;gt; y, z =&amp;gt; z, zr =&amp;gt; zr, ng =&amp;gt; ng ); PROC: process begin zx &amp;lt;= &amp;#39;0&amp;#39;; nx &amp;lt;= &amp;#39;0&amp;#39;; zy &amp;lt;= &amp;#39;0&amp;#39;; ny &amp;lt;= &amp;#39;0&amp;#39;; f &amp;lt;= &amp;#39;0&amp;#39;; no &amp;lt;= &amp;#39;0&amp;#39;; x &amp;lt;= &amp;#34;0000000000000000&amp;#34;; y &amp;lt;= &amp;#34;0000000000000000&amp;#34;; wait for 10ns; zx &amp;lt;= &amp;#39;1&amp;#39;; nx &amp;lt;= &amp;#39;0&amp;#39;; zy &amp;lt;= &amp;#39;1&amp;#39;; ny &amp;lt;= &amp;#39;0&amp;#39;; f &amp;lt;= &amp;#39;1&amp;#39;; no &amp;lt;= &amp;#39;0&amp;#39;; wait for 10ns; assert (z = &amp;#34;0000000000000000&amp;#34;) report &amp;#34;0 werkt niet&amp;#34; severity failure; assert (zr = &amp;#39;1&amp;#39;) report &amp;#34;zr werkt niet&amp;#34; severity failure; wait for 10ns; zx &amp;lt;= &amp;#39;1&amp;#39;; nx &amp;lt;= &amp;#39;1&amp;#39;; zy &amp;lt;= &amp;#39;1&amp;#39;; ny &amp;lt;= &amp;#39;1&amp;#39;; f &amp;lt;= &amp;#39;1&amp;#39;; no &amp;lt;= &amp;#39;1&amp;#39;; x &amp;lt;= &amp;#34;0000000011111111&amp;#34;; y &amp;lt;= &amp;#34;0011100111100110&amp;#34;; wait for 10ns; assert (z = &amp;#34;0000000000000001&amp;#34;) report &amp;#34;1 werkt niet&amp;#34; severity failure; wait for 10ns; zx &amp;lt;= &amp;#39;1&amp;#39;; nx &amp;lt;= &amp;#39;1&amp;#39;; zy &amp;lt;= &amp;#39;1&amp;#39;; ny &amp;lt;= &amp;#39;0&amp;#39;; f &amp;lt;= &amp;#39;1&amp;#39;; no &amp;lt;= &amp;#39;0&amp;#39;; x &amp;lt;= &amp;#34;0000000011111111&amp;#34;; y &amp;lt;= &amp;#34;0011100111100110&amp;#34;; wait for 10ns; assert (z = &amp;#34;1111111111111111&amp;#34;) report &amp;#34;-1 werkt niet&amp;#34; severity failure; wait for 10ns; zx &amp;lt;= &amp;#39;0&amp;#39;; nx &amp;lt;= &amp;#39;0&amp;#39;; zy &amp;lt;= &amp;#39;1&amp;#39;; ny &amp;lt;= &amp;#39;1&amp;#39;; f &amp;lt;= &amp;#39;0&amp;#39;; no &amp;lt;= &amp;#39;0&amp;#39;; x &amp;lt;= &amp;#34;0000110111111110&amp;#34;; y &amp;lt;= &amp;#34;0011100111100110&amp;#34;; wait for 10ns; assert (z = &amp;#34;0000110111111110&amp;#34;) report &amp;#34;x doorlaten werkt niet&amp;#34; severity failure; wait for 10ns; zx &amp;lt;= &amp;#39;1&amp;#39;; nx &amp;lt;= &amp;#39;1&amp;#39;; zy &amp;lt;= &amp;#39;0&amp;#39;; ny &amp;lt;= &amp;#39;0&amp;#39;; f &amp;lt;= &amp;#39;0&amp;#39;; no &amp;lt;= &amp;#39;0&amp;#39;; x &amp;lt;= &amp;#34;0000110111111110&amp;#34;; y &amp;lt;= &amp;#34;0011100101100110&amp;#34;; wait for 10ns; assert (z = &amp;#34;0011100101100110&amp;#34;) report &amp;#34;y doorlaten werkt niet&amp;#34; severity failure; wait for 10ns; zx &amp;lt;= &amp;#39;0&amp;#39;; nx &amp;lt;= &amp;#39;0&amp;#39;; zy &amp;lt;= &amp;#39;1&amp;#39;; ny &amp;lt;= &amp;#39;1&amp;#39;; f &amp;lt;= &amp;#39;0&amp;#39;; no &amp;lt;= &amp;#39;1&amp;#39;; x &amp;lt;= &amp;#34;0011111111111111&amp;#34;; y &amp;lt;= &amp;#34;0011100101100110&amp;#34;; wait for 10ns; assert (z = &amp;#34;1100000000000000&amp;#34;) report &amp;#34;niet x werkt niet&amp;#34; severity failure; wait for 10ns; zx &amp;lt;= &amp;#39;1&amp;#39;; nx &amp;lt;= &amp;#39;1&amp;#39;; zy &amp;lt;= &amp;#39;0&amp;#39;; ny &amp;lt;= &amp;#39;0&amp;#39;; f &amp;lt;= &amp;#39;0&amp;#39;; no &amp;lt;= &amp;#39;1&amp;#39;; x &amp;lt;= &amp;#34;0011111000001111&amp;#34;; y &amp;lt;= &amp;#34;0011011111111110&amp;#34;; wait for 10ns; assert (z = &amp;#34;1100100000000001&amp;#34;) report &amp;#34;niet y werkt niet&amp;#34; severity failure; wait for 10ns; zx &amp;lt;= &amp;#39;0&amp;#39;; nx &amp;lt;= &amp;#39;0&amp;#39;; zy &amp;lt;= &amp;#39;1&amp;#39;; ny &amp;lt;= &amp;#39;1&amp;#39;; f &amp;lt;= &amp;#39;1&amp;#39;; no &amp;lt;= &amp;#39;1&amp;#39;; x &amp;lt;= &amp;#34;0000000000000111&amp;#34;; y &amp;lt;= &amp;#34;0011011111111110&amp;#34;; wait for 10ns; assert (z = &amp;#34;1111111111111001&amp;#34;) report &amp;#34;min x werkt niet&amp;#34; severity failure; wait for 10ns; zx &amp;lt;= &amp;#39;1&amp;#39;; nx &amp;lt;= &amp;#39;1&amp;#39;; zy &amp;lt;= &amp;#39;0&amp;#39;; ny &amp;lt;= &amp;#39;0&amp;#39;; f &amp;lt;= &amp;#39;1&amp;#39;; no &amp;lt;= &amp;#39;1&amp;#39;; x &amp;lt;= &amp;#34;0000000000000111&amp;#34;; y &amp;lt;= &amp;#34;0111111111111110&amp;#34;; wait for 10ns; assert (z = &amp;#34;1000000000000010&amp;#34;) report &amp;#34;min y werkt niet&amp;#34; severity failure; wait for 10ns; zx &amp;lt;= &amp;#39;0&amp;#39;; nx &amp;lt;= &amp;#39;1&amp;#39;; zy &amp;lt;= &amp;#39;1&amp;#39;; ny &amp;lt;= &amp;#39;1&amp;#39;; f &amp;lt;= &amp;#39;1&amp;#39;; no &amp;lt;= &amp;#39;1&amp;#39;; x &amp;lt;= &amp;#34;0000000000000111&amp;#34;; y &amp;lt;= &amp;#34;0111111111110110&amp;#34;; wait for 10ns; assert (z = &amp;#34;0000000000001000&amp;#34;) report &amp;#34;x+1 werkt niet&amp;#34; severity failure; wait for 10ns; zx &amp;lt;= &amp;#39;1&amp;#39;; nx &amp;lt;= &amp;#39;1&amp;#39;; zy &amp;lt;= &amp;#39;0&amp;#39;; ny &amp;lt;= &amp;#39;1&amp;#39;; f &amp;lt;= &amp;#39;1&amp;#39;; no &amp;lt;= &amp;#39;1&amp;#39;; x &amp;lt;= &amp;#34;0000000000000111&amp;#34;; y &amp;lt;= &amp;#34;0111111111111110&amp;#34;; wait for 10ns; assert (z = &amp;#34;0111111111111111&amp;#34;) report &amp;#34;y+1 werkt niet&amp;#34; severity failure; wait for 10ns; zx &amp;lt;= &amp;#39;0&amp;#39;; nx &amp;lt;= &amp;#39;0&amp;#39;; zy &amp;lt;= &amp;#39;0&amp;#39;; ny &amp;lt;= &amp;#39;0&amp;#39;; f &amp;lt;= &amp;#39;1&amp;#39;; no &amp;lt;= &amp;#39;0&amp;#39;; x &amp;lt;= &amp;#34;0000000000000111&amp;#34;; y &amp;lt;= &amp;#34;0111111111100000&amp;#34;; wait for 10ns; assert (z = &amp;#34;0111111111100111&amp;#34;) report &amp;#34;x+y werkt niet&amp;#34; severity failure; wait for 10ns; zx &amp;lt;= &amp;#39;0&amp;#39;; nx &amp;lt;= &amp;#39;0&amp;#39;; zy &amp;lt;= &amp;#39;0&amp;#39;; ny &amp;lt;= &amp;#39;0&amp;#39;; f &amp;lt;= &amp;#39;0&amp;#39;; no &amp;lt;= &amp;#39;0&amp;#39;; x &amp;lt;= &amp;#34;0000111000000111&amp;#34;; y &amp;lt;= &amp;#34;0111111111100000&amp;#34;; wait for 10ns; assert (z = &amp;#34;0000111000000000&amp;#34;) report &amp;#34;x&amp;amp;y werkt niet&amp;#34; severity failure; wait for 10ns; zx &amp;lt;= &amp;#39;0&amp;#39;; nx &amp;lt;= &amp;#39;1&amp;#39;; zy &amp;lt;= &amp;#39;0&amp;#39;; ny &amp;lt;= &amp;#39;1&amp;#39;; f &amp;lt;= &amp;#39;0&amp;#39;; no &amp;lt;= &amp;#39;1&amp;#39;; x &amp;lt;= &amp;#34;0000111000000111&amp;#34;; y &amp;lt;= &amp;#34;0111111111100000&amp;#34;; wait for 10ns; assert (z = &amp;#34;0111111111100111&amp;#34;) report &amp;#34;x|y werkt niet&amp;#34; severity failure; wait for 10ns; zx &amp;lt;= &amp;#39;0&amp;#39;; nx &amp;lt;= &amp;#39;1&amp;#39;; zy &amp;lt;= &amp;#39;0&amp;#39;; ny &amp;lt;= &amp;#39;0&amp;#39;; f &amp;lt;= &amp;#39;1&amp;#39;; no &amp;lt;= &amp;#39;1&amp;#39;; x &amp;lt;= &amp;#34;0000000000000010&amp;#34;; y &amp;lt;= &amp;#34;0000000000000100&amp;#34;; wait for 10ns; assert (z = &amp;#34;1111111111111110&amp;#34;) report &amp;#34;x-y werkt niet&amp;#34; severity failure; assert (ng = &amp;#39;1&amp;#39;) report &amp;#34;ng werkt niet&amp;#34; severity failure; wait for 10ns; wait; end process; end Behavioral; </description>
    </item>
    
  </channel>
</rss>
