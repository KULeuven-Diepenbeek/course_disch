<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zelfstudie VHDL on Digitale Elektronische Schakelingen</title>
    <link>https://kuleuven-diepenbeek.github.io/disch/900_zelfstudie_vhdl/</link>
    <description>Recent content in Zelfstudie VHDL on Digitale Elektronische Schakelingen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <managingEditor>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Nele Mentens and Jo Vliegen)</managingEditor>
    <webMaster>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Nele Mentens and Jo Vliegen)</webMaster><atom:link href="https://kuleuven-diepenbeek.github.io/disch/900_zelfstudie_vhdl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hardware vs software</title>
      <link>https://kuleuven-diepenbeek.github.io/disch/900_zelfstudie_vhdl/010_hw_vs_sw/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Nele Mentens and Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/disch/900_zelfstudie_vhdl/010_hw_vs_sw/</guid>
      <description>Hardware vs software   beschrijvingstaal voor hardware &amp;ne; programmeertaal   programmeertaal (bv. C):    hardware = processor   hardware is reeds ontworpen   code: beschrijft hoe hardware gebruikt moet worden   code wordt gecompileerd voor een specifieke processor    hardware beschrijvingstaal (bv. VHDL)    hardware = ontwerp op FPGA of ASIC   hardware moet ontworpen worden   code: beschrijft welke hardware ontworpen moet worden   code wordt gesynthetiseerd voor een specifieke FPGA of ASIC technologie    voorbeeld hardware c &amp;lt;= a and b; e &amp;lt;= c or d; betekent hetzelfde als</description>
    </item>
    
    <item>
      <title>Entiteiten en architecturen</title>
      <link>https://kuleuven-diepenbeek.github.io/disch/900_zelfstudie_vhdl/020_ent_arch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Nele Mentens and Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/disch/900_zelfstudie_vhdl/020_ent_arch/</guid>
      <description>De VHDL code van elk bouwblok bevat een   interface beschrijving: entity,  functie beschrijving: architecture. 
Voorbeeld entity and_or_poort is port( a, b, d: in bit; e: out bit); end and_or_poort; architecture arch of and_or_poort is signal c: bit; begin c &amp;lt;= a and b; e &amp;lt;= c or d; end arch; entity entity = beschrijving van de interface
entity and_or_poort is port( a, b, d: in bit; e: out bit); end and_or_poort;  entity   entity ports Elke poort heeft:   een naam in dit voorbeeld: a,b,d,e  een mode in dit voorbeeld: in, out  een type in dit voorbeeld: bit</description>
    </item>
    
    <item>
      <title>hiërarchie</title>
      <link>https://kuleuven-diepenbeek.github.io/disch/900_zelfstudie_vhdl/030_hierachie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Nele Mentens and Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/disch/900_zelfstudie_vhdl/030_hierachie/</guid>
      <description>het is mogelijk om een hiërarchie in te bouwen. Een bouwblok kan een instantie van een andere bouwblok bevatten.
entity and_or_xor_poort is port( a, b, c, d: in bit; e: out bit); end and_or_xor_poort; architecture arch of and_or_xor_poort is component and_or_poort is --declaratie van and_or poort port( a, b, d: in bit; e: out bit); end component; signal f: bit; begin inst_and_or_poort: and_or_poort --instantie van and_or poort port map( a =&amp;gt; b, b =&amp;gt; a, d =&amp;gt; c, e =&amp;gt; f); e &amp;lt;= d xor f; end arch;     Een component moet eerst gedeclareerd zijn alvorens hem te instantiëren.</description>
    </item>
    
    <item>
      <title>Libraries</title>
      <link>https://kuleuven-diepenbeek.github.io/disch/900_zelfstudie_vhdl/040_libraries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Nele Mentens and Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/disch/900_zelfstudie_vhdl/040_libraries/</guid>
      <description>Een library kan meerdere packages bevatten. Een package bevat 1 of meer van onderstaande middelen.   types   constanten   functies   procedures   Een VHDL module kan gebruik maken van 1 of meerdere packages  Voorbeeld: library library1; use library1.pack2.all; library library2; use library2.pack4.all; entity ... architecture...    
&amp;ldquo;std&amp;rdquo; library Een verwijzing naar de package &amp;ldquo;standard&amp;rdquo; in de library &amp;ldquo;std&amp;rdquo; is steeds impliciet aanwezig.</description>
    </item>
    
    <item>
      <title>Arrays</title>
      <link>https://kuleuven-diepenbeek.github.io/disch/900_zelfstudie_vhdl/050_arrays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Nele Mentens and Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/disch/900_zelfstudie_vhdl/050_arrays/</guid>
      <description>Een range kan stijgend of dalend gekozen worden:
 x(2 to 6) y(7 downto 0)  We kunnen verwijzen naar individuele elementen door een index te gebruiken:
 x(4) y(7)  Voorbeeld: entity and_or_poort is port( a_vec: in bit_vector(2 downto 0); c_vec: out bit_vector(0 to 1)); end and_or_poort; architecture arch of and_or_poort is signal c_intern: bit; begin c_intern &amp;lt;= a_vec(2) and a_vec(1); c_vec(1) &amp;lt;= c_intern or a_vec(0); c_vec(0) &amp;lt;= c_intern: end arch;</description>
    </item>
    
    <item>
      <title>Packages</title>
      <link>https://kuleuven-diepenbeek.github.io/disch/900_zelfstudie_vhdl/060_packages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Nele Mentens and Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/disch/900_zelfstudie_vhdl/060_packages/</guid>
      <description>Zelf-gedefinieerde packages Per default worden zelfgemaakte bouwblokken opgeslagen in de library work. In deze library kunnen we zelf packages definiëren.
Voorbeeld van een zelf-gedefinieerde package: package and_or_xor_pack is component and_or_poort is port( a, b, d: in bit; e: out bit); end component; end package; Als we deze package toevoegen, hoeven we de component declaratie niet meer te doen.
library work; use work.and_or_xor_pack.all; entity and_or_xor_poort ... architecture ... -- zonder component declaratie &amp;ldquo;std_logic_1164&amp;rdquo; package De package &amp;ldquo; std_logic_1164&amp;rdquo; in library &amp;ldquo; ieee&amp;rdquo; bevat o.</description>
    </item>
    
    <item>
      <title>Processen</title>
      <link>https://kuleuven-diepenbeek.github.io/disch/900_zelfstudie_vhdl/070_processen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Nele Mentens and Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/disch/900_zelfstudie_vhdl/070_processen/</guid>
      <description>Structuur van een proces Een proces wordt uitgevoerd wanneer een signaal in de sensitivity lijst van waarde verandert.  Signalen worden geupdated aan het einde van het proces.  Voorbeeld van een proces met een if-then-else statement: multiplexer.
library ieee; use ieee.std_logic_1164.all; entity mux is port( a, b, s: in std_logic; z: out std_logic); end mux; architecture arch of mux is begin p1: process(a, b, s) -- a, b, s is de sensitiviy lijst begin if s = &amp;#39;1&amp;#39; then z &amp;lt;= a; else z &amp;lt;= b; end if; end process; end arch;</description>
    </item>
    
    <item>
      <title>Signalen vs. variabelen</title>
      <link>https://kuleuven-diepenbeek.github.io/disch/900_zelfstudie_vhdl/080_signalen_variablen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Nele Mentens and Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/disch/900_zelfstudie_vhdl/080_signalen_variablen/</guid>
      <description>Signalen:
 nemen de nieuwe waarde aan na een vertraging, hebben een hardware equivalent, worden toegekend met &amp;ldquo; &amp;lt;=&amp;rdquo; .   Variabelen:
 nemen de nieuwe waarde onmiddellijk aan, hebben geen hardware equivalent, worden toegekend met &amp;ldquo; :=&amp;rdquo; , komen enkel voor in een proces.   
signalen Volgende beschrijvingen leiden tot dezelfde implementatie:
architecture arch of vb1 is signal o1, o2, o3: std_logic; begin p: process(a, b, c, d, o1, o2, o3) begin q &amp;lt;= not o3; o1 &amp;lt;= a and b; o2 &amp;lt;= c and d; o3 &amp;lt;= o1 or o2; end process; end arch;</description>
    </item>
    
    <item>
      <title>Flipflop en latches</title>
      <link>https://kuleuven-diepenbeek.github.io/disch/900_zelfstudie_vhdl/090_flipflop_latch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Nele Mentens and Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/disch/900_zelfstudie_vhdl/090_flipflop_latch/</guid>
      <description>D-flipflop De D-flip-flop is het basiselement van synchrone logica. De data bit wordt opgenomen in het geheugenelement op de stijgende of dalende flank van de klok. De data bit blijft in het geheugenelement aanwezig tot de volgende stijgende of dalende flank van de klok.
Engelse benamingen:
 positive/negative edge triggered D-type flip-flop rising/falling edge triggered D-type flip-flop  Positieve flank getriggerde D-FF in VHDL Proces met enkel de klok in de sensitivity list.</description>
    </item>
    
    <item>
      <title>Voorbeelden</title>
      <link>https://kuleuven-diepenbeek.github.io/disch/900_zelfstudie_vhdl/100_voorbeelden/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Nele Mentens and Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/disch/900_zelfstudie_vhdl/100_voorbeelden/</guid>
      <description>Binair-naar-decimaal decoder entity bin_to_dec is port( binair: in std_logic_vector(2 downto 0); decimaal: out std_logic_vector(0 to 7)); end bin_to_dec; architecture arch of bin_to_dec is begin p: process(binair) begin case binair is when &amp;#34;000&amp;#34; =&amp;gt; decimaal &amp;lt;= &amp;#34;10000000&amp;#34; ; when &amp;#34;001&amp;#34; =&amp;gt; decimaal &amp;lt;= &amp;#34;01000000&amp;#34; ; when &amp;#34;010&amp;#34; =&amp;gt; decimaal &amp;lt;= &amp;#34;00100000&amp;#34; ; when &amp;#34;011&amp;#34; =&amp;gt; decimaal &amp;lt;= &amp;#34;00010000&amp;#34; ; when &amp;#34;100&amp;#34; =&amp;gt; decimaal &amp;lt;= &amp;#34;00001000&amp;#34; ; when &amp;#34;101&amp;#34; =&amp;gt; decimaal &amp;lt;= &amp;#34;00000100&amp;#34; ; when &amp;#34;110&amp;#34; =&amp;gt; decimaal &amp;lt;= &amp;#34;00000010&amp;#34; ; when others =&amp;gt; decimaal &amp;lt;= &amp;#34;00000001&amp;#34; ; end case; end process; end arch; BCD-naar-7-segment decoder entity bcd_to_7seg is port( bcd: in std_logic_vector(3 downto 0); seg7: out std_logic_vector(1 to 7)); end bcd_to_7seg; architecture arch of bin_to_7seg is begin p: process(bcd) begin case bcd is when &amp;#34;0000&amp;#34; =&amp;gt; seg7 &amp;lt;= &amp;#34;1111110&amp;#34; ; when &amp;#34;0001&amp;#34; =&amp;gt; seg7 &amp;lt;= &amp;#34;0110000&amp;#34; ; when &amp;#34;0010&amp;#34; =&amp;gt; seg7 &amp;lt;= &amp;#34;1101101&amp;#34; ; when &amp;#34;0011&amp;#34; =&amp;gt; seg7 &amp;lt;= &amp;#34;1111001&amp;#34; ; when &amp;#34;0100&amp;#34; =&amp;gt; seg7 &amp;lt;= &amp;#34;0110011&amp;#34; ; when &amp;#34;0101&amp;#34; =&amp;gt; seg7 &amp;lt;= &amp;#34;1011011&amp;#34; ; when &amp;#34;0110&amp;#34; =&amp;gt; seg7 &amp;lt;= &amp;#34;1011111&amp;#34; ; when &amp;#34;0111&amp;#34; =&amp;gt; seg7 &amp;lt;= &amp;#34;1110000&amp;#34; ; when &amp;#34;1000&amp;#34; =&amp;gt; seg7 &amp;lt;= &amp;#34;1111111&amp;#34; ; when &amp;#34;1001&amp;#34; =&amp;gt; seg7 &amp;lt;= &amp;#34;1111011&amp;#34; ; when others =&amp;gt; seg7 &amp;lt;= &amp;#34;-------&amp;#34; ; end case; end process; end arch; Conditionele toekenning m.</description>
    </item>
    
    <item>
      <title>Linear feedback shift register</title>
      <link>https://kuleuven-diepenbeek.github.io/disch/900_zelfstudie_vhdl/110_lfsr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Nele Mentens and Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/disch/900_zelfstudie_vhdl/110_lfsr/</guid>
      <description>Als we een sequentie van getallen willen genereren, kunnen we een LFSR (linear feedback shift register) gebruiken. Een LFSR is een shift register, waarbij de inschuivende bit elke klokcyclus gelijk is aan de XOR van een aantal bits in de interne toestand. Op wikipedia  staat uitgelegd welke bits er genomen moeten worden bij iedere grootte van LFSR.
 Voorbeeld 16 bit LFSR. Bron: Wikipedia   library ieee; use ieee.</description>
    </item>
    
  </channel>
</rss>
