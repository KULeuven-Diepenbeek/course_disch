[
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/000_intro/",
	"title": "Introductie",
	"tags": [],
	"description": "",
	"content": "Introductie Welkom bij het labo van Digitale Elektronische Schakelingen. Het uiteindelijke doel van het labo is om een (versimpelde) RISC-V processor te maken. Dit is een open-source Instruction Set Architecture (ISA). De beschrijving van de processor gebeurt in de taal VHDL. VHDL (Very High Speed Integrated Circuit Hardware Description Language) is een hardware-beschrijvings-taal. Dat wil zeggen dat alle code die in deze cursus geschrijven wordt, een beschrijving geeft van een schakeling die opgebouwd kan worden met digitale componenten.\nDe beschrijvingen die gemaakt wordt in een HDL kan gebruikt worden om FPGA\u0026rsquo;s mee te configureren of om ASIC\u0026rsquo;s (Application-Specific Integrated Circuits) mee te maken.\nBeoordeling 40% van de punten van dit opleidingsonderdeel staan op dit labo. 60% staat op de theorie.\nEr zijn 7 opdrachten die moeten ingediend worden via Toledo. Deze opdrachten worden evenredig gequoteerd en vormen de 40% van het labo-punt.\nVoor het labo is er een verplichte aanwezigheid!! Op het theorie examen zullen er ook twee vragen komen in verband met VHDL. Voor de ene vraag dien je VHDL code te geven voor een beschrijving (eventueel met ondersteunende tekening). Voor de andere vraag krijg je VHDL code en moet je zelf een tekening maken.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/001_software/010_alternatief/",
	"title": "Alternatieve omgeving",
	"tags": [],
	"description": "",
	"content": "Alternatief voor thuis Als het niet mogellijk is om Vivado te installaren op je eigen laptop, dan kan je de site EDA playground om toch thuis verder te kunnen werken. Je kan hierop inloggen met je Google account (van UHasselt). Zorg dat je bij testbench + design VHDL hebt geselecteerd. Nu kan je de code in de testbench (links) en het design (rechts) zetten. Als de code er in zit moet je ook de top entity van het design aangeven, deze naam moet je bij Top entity invulllen. Bij tools \u0026amp; simulators selecteren we GHDL. GHDL is een gratis simulator die niet zelf detecteert wanneer de code stopt dus bij de simulator options moet je nog zetten \u0026ndash;stop-time=50ns om aan te geven hoe lang er gesimuleerd moet worden. Als laatste moeten we nog aanvinken dat we de EPWave willen openen na de run. De eind tijd van stop-time moet je natuurlijk aanpassen als je langer wil simuleren.\nOm de simulatie te starten druk je vanboven op de run knop.\nLet er op dat dit alternatief zeker bruikbaar eerst voor de eerste twee opdrachten. Daarna wordt dit omslachtig, maar is nog steeds bruikbaar.\nScreenshot hoe een nand gate simuleren met EDA playground "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/001_software/",
	"title": "Ontwikkel omgeving",
	"tags": [],
	"description": "",
	"content": "Ontwikkel omgeving Naast de \u0026ldquo;integrated circuits\u0026rdquo; (in de volksmond ook wel \u0026ldquo;chips\u0026rdquo; genoemd \u0026#x1f603;) die een vaste functionaliteit hebben, bestaan er ook speciale IC\u0026rsquo;s waarvan je de functionaliteit kan aanpassen. De logische poorten (Gates, in het Engels) in die IC\u0026rsquo;s zijn configureerbaar of programmeerbaar (Programmable, in het Engels). Als er zo een groot aantal gates gebundeld worden (in een Array, in het Engels) en deze kunnen ter plaatste (in the Field, in het Engels) geherprogrammeerd worden, noemen we deze IC\u0026rsquo;s Field Programmable Gate Arrays, oftewel FPGAs.\nDe FPGA-markt wordt gedomineerd door 2 grote fabrikanten van FPGA\u0026rsquo;s: AMD en Intel. Beide spelers samen leveren meer dan 85% van alle FPGAs wereldwijd. Het simuleren en configureren van FPGAs gebeurt in een speciale ontwikkelomgeving: Quartus voor Intel FPGA\u0026rsquo;s en Vivado (vroeger ISE) voor AMD FPGA\u0026rsquo;s.\nTer info \u0026hellip; de originele FPGA producenten waren Xilinx en Altera. AMD nam Xilinx over (2022) en Intel nam Altera over (2015).\nVivado De HDL-code voor dit opleidingsonderdeel wordt geschreven in Vivado. Vivado is de omgeving van AMD en wordt gebruik voor de huidige families van FPGAs. Je kan de software downloaden van de site van AMD. Je moet wel een (gratis) account aanmaken om de software te kunnen downloaden. Deze software is enkel beschikbaar voor Windows en Linux.\nVivado vereist veel opslagruimte om te installeren \u0026gt;100 GB. Door minder types van FPGA\u0026rsquo;s te ondersteunen kan hier wel wat bij bespaard worden!\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/100_intro_vhdl/",
	"title": "1. Eerste project",
	"tags": [],
	"description": "",
	"content": "Eerste project Image courtesy: pexels - Pixabay "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/100_intro_vhdl/010_eerste_project/",
	"title": "Eerste project",
	"tags": [],
	"description": "",
	"content": "Maak een project Allereerst moet een Vivado project aangemaakt worden. Uiteraard begin je met Vivado op te starten en te klikken op create project. Je geeft het project een naam en zorgt dat je het op een plaats zet waar je het nog kan terugvinden. Bij project type zeggen we RTL project en vinken we \u0026ldquo;Do not specify sources at this time\u0026rdquo; aan.\nDe volgende keuze die gemaakt moet worden is het type van FPGA. Als part maakt het niet veel uit wat we kiezen. Het beste is om een FPGA te kiezen die gratis is te gebruiken met Vivado zoals de xc7z020.\nLet er op dat je in het pad naar je Vivado project geen spaties hebt!! Dus, geen paden zoals \u0026ldquo;C:\\school\\2e jaar\\disch\u0026rdquo; of \u0026ldquo;C:\\mijn documenten\\demo\u0026rdquo;\nNu krijg je een omgeving die er (ongeveer) zo uit ziet.\nAMD\u0026#39;s Vivado ontwikkelomgeving Voeg HDL code toe Na het maken van een project, kan HDL code toevoegen. Dit kan via de link Add sources. Vervolgens komt er een keuze om een nieuw bestand te maken of om een reeds bestaande file toe te voegen. Kies voor een nieuwe file en voeg een vhdl design source toe. De tool vraagt vervolgens voor I/O port definitions, die kan je al instellen bij het maken van de vhdl file, maar kunnen later ook nog aangepast worden in de code zelf.\nMerk op dat Vivado je al een kleine aanzet geeft om van te beginnen. Onderstaande VHDL-code geeft een beschrijving zorgt voor een invertor die, zoals verwacht, de ingang geïnverteerd doorgeeft aan de uitgang.\nlibrary IEEE; use IEEE.STD_LOGIC_1164.ALL; entity invertor is Port ( A: in std_logic; Z: out std_logic ); end invertor; architecture Behavioral of invertor is begin Z \u0026lt;= NOT A; end Behavioral; Dit is een eenvoudige VHDL beschrijving en we nemen deze in detail onder de loep.\nentity invertor is Port ( A: in std_logic; Z: out std_logic ); end invertor; De entity definieert de input en de outputs van het (sub-)design dat we beschrijven. Het design heeft als naam gekregen: invertor. Vervolgens zien in de lijst van poorten dat deze component 2 poorten heeft: een ingang A en een uitgang Z.\nDeze component is dus een IC met twee pinnen en de entity blok omschrijft als het ware enkel de behuizing.\nDe tweede blok architecture beschrijft wat er IN de behuizing zit. Ook deze beschrijving kunnen we een naam geven: Behavioural. Alles wat er vervolgens beschreven wordt tussen de begin en end definieert het gedrag van de component.\narchitecture Behavioral of invertor is begin Z \u0026lt;= NOT A; end Behavioral; library IEEE; use IEEE.STD_LOGIC_1164.ALL; Tenslotte zijn er nog de eerste twee regels van de beschrijving. De eerste regel zegt dat er een library genaamd IEEE gebruikt wordt in deze beschrijving. De tweede regel zegt dat er uit deze library de package STD_LOGIC_1164 volledig (.ALL) gebruikt wordt. Wat dit precies wilt zeggen, daar wordt later op teruggekomen.\nHet is uitermate belangrijk dat het besef blijft dat VHDL (of iedere andere HDL) louter een beschrijving geeft van een hardware design. Dit wilt zeggen dat het mogelijk moet zijn een schema te tekenen !!!\nDe beschrijving van de de component hierboven is in een schema te tekenen als een invertor of NIET-poort.\nDe entity en architecture van de invertor std_logic Omdat de package IEEE.STD_LOGIC_1164 gebruikt wordt, kan het type std_logic gebruiken. Dit is het type dat we quasi altijd gebruiken wanneer er met poorten en/of signalen gewerkt wordt in een hardware beschrijving. Het type std_logic kan 9 verschillende waardes aannemen. Meestal gebruiken we \u0026lsquo;0\u0026rsquo; en \u0026lsquo;1\u0026rsquo;. Hieronder zijn echter alle mogellijke waardes opgelijst met uitleg.\n\u0026#39;U\u0026#39;, -- Uninitialized : flipflop waar nog nooit in is geschreven \u0026#39;X\u0026#39;, -- Forcing Unknown \u0026#39;0\u0026#39;, -- Forcing 0 : rechtstreeks aan grond \u0026#39;1\u0026#39;, -- Forcing 1 : rechtstreeks aan voeding \u0026#39;Z\u0026#39;, -- High Impedance \u0026#39;W\u0026#39;, -- Weak Unknown \u0026#39;L\u0026#39;, -- Weak 0 : via weerstand aan grond \u0026#39;H\u0026#39;, -- Weak 1 : via weerstand aan voeding \u0026#39;-\u0026#39;, -- Don\u0026#39;t Care"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/700_fsm/710_fsm/",
	"title": "Finite State Machine (FSM)",
	"tags": [],
	"description": "",
	"content": "Een FSM is een controle structuur die zich in een eindig aantal toestanden kan bevinden. Onder invloed van ingangssignalen kan een FSM overgaan naar één bepaalde toestand één andere toestand. In elke toestand wordt er een waarde toegekend aan de uitgangssignalen. De toestand wordt opgeslagen in een toestandsregister.\nVoorbeeld FSM De meest eenvoudige FSM is een teller. Er is geen enkel ingangssignaal en de uitgang is de waarde van de toestand.\nEen eerste ingangssignaal dat de telcyclus kan beïnvloeden, is een enable signaal.\nEen ander ingangssignaal zou een up/down (UD) signaal kunnen zijn.\nWerkelijke toestandsdiagrammen kunnen heel wat complexer zijn.\nAanpak van een digitaal ontwerp Opdelen in functionele bouwblokken.\nOnderscheid maken tussen datapad en controle. Steeds dieper verfijnen tot basisblokken. Duidelijk beschrijven wat elk bouwblok moet doen. Duidelijk beschrijven welke signalen toekomen en vertrekken. Na deze stap kan de entity van de verschillende bouwblokken geschreven worden. Wanneer het ontwerp met meerdere personen zal gemaakt worden, is dit het moment om de taken te verdelen.\nDatapad opsplitsen in registers en combinatorische blokken. Controle implementeren als FSM. Het datapad Entity van het datapad Ingangssignalen zijn:\ndata ingangen (te verwerken) controle signalen (bepalen wat er moet gebeuren met de ingangsdata) Uitgangssignalen zijn:\ndata uitgangen status signalen (zijn nodig voor het controleblok om beslissingen te nemen) Uitwerken van het datapad De bouwblokken van het datapad zijn vaak goed gekende blokken:\ncombinatorische blokken (optellers, decoders, multiplexers, comparators, \u0026hellip;) registers Combinatorische blokken kunnen snel ontworpen worden op basis van Booleaanse vergelijkingen.\nHet Controlepad Entity van de controle Ingangssignalen zijn:\nstatus signalen (zijn nodig voor het controleblok om beslissingen te nemen) controle ingangen (controle van een ander controleblok) Het kloksignaal hoort hier ook bij. Uitgangssignalen zijn:\ncontrole signalen (bepalen wat er moet gebeuren met de ingangsdata) controle uitgangen (controle voor een ander controleblok) Controle a.d.h.v. een FSM Teken het bouwblok met alle signalen.\nTeken het toestandsdiagramma.\nElk van de verschillende stappen die ondernomen worden, vormen een verschillende toestand. Indien de uitgang verschillend is, moet de toestand zeker verschillen. Minimaliseer het aantal toestanden.\nTwee toestanden kunnen samengenomen worden als hun uitgangssignalen gelijk zijn en als de volgende toestand gelijk is. Controleer de volledigheid van het toestandsdiagramma.\nAlle mogelijke combinaties van ingangssignalen zijn in principe mogelijk in elke toestand. Voorzie wat er vanuit elke toestand moet gebeuren onder alle mogelijke combinaties. Voorkom dubbele toewijzingen. Bepaal de next state functie in functie van de huidige toestand en alle ingangssignalen (behalve de klok).\nHet resultaat van de next state functie wordt in de volgende klokpuls opgeslagen in het state register. De next state functie is een combinatorisch bouwblok. Bepaal de output functie in functie van de huidige toestand (en eventueel de ingangssignalen).\nDe output functie is al dan niet afhankelijk van de ingangssignalen. De output functie is een combinatorisch bouwblok. Moore en Mealy FSM Het is belangrijk een onderscheid te maken tussen een Moore en een Mealy FSM.\nEen Moore FSM heeft een output functie die enkel afhangt van de toestand. Een Mealy FSM heeft een output functie die afhangt van de toestand en de ingangen. Mealy FSMs mogen niet rondgekoppeld worden. Moore FSM Mealy FSM Toestandsencodering Encoderen van de toestanden in een FSM:\nwillekeurig bv. 000, 111, 011, 110, 101 minimale bitverandering (= Gray encodering) bv. 00, 01, 11, 10 one-hot bv. 0001, 0010, 0100, 1000 FSM in VHDL Definieer de toestand als een opsommingstype en maak twee signalen aan van dit type. Deze signalen vormen de ingang en de uitgang van het state register.\ntype my_state is (rst_state, green_state, yellow_state, red_state); signal next_state, state: my_state; Ontwerp de next state functie, het state register en de output functie in drie verschillende processen. Voorzie alle mogelijkheden in de next state functie en de output functie, anders ontstaan er latches in deze bouwblokken.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/100_intro_vhdl/020_nand/",
	"title": "NAND poort",
	"tags": [],
	"description": "",
	"content": "De volgende stap is de beschrijving van een logisch NAND poort. Hiervoor maak je een nieuwe component aan in het Vivado project. Het grootste deel van de code van de invertor kunnen we overnemen als startpunt voor deze beschrijving.\nWe passen de entity aan zodat we 2 inputs hebben in plaats van 1. De behuizing van de nieuwe component zegt nu dat er 3 pinnen zijn: 2 input pinnen en 1 output pin.\nUiteraard moet het gedrag van deze component ook aangepast worden. In de architecture schrijven we dat we een NAND operatie willen doen. De basis poort NAND is ook beschikbaar als keyword in VHDL.\n-------------------------------- -- Revision Date Author Comments -- v0.2 20240118 VlJo Initial version -------------------------------- library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity nand_gate is Port ( A : in std_logic; B : in std_logic; Z : out std_logic ); end nand_gate; architecture Behavioral of nand_gate is -- (DE-)LOCALISING IN/OUTPUTS signal A_i : STD_LOGIC; signal B_i : STD_LOGIC; signal Z_o : STD_LOGIC; begin -------------------------------- -- (DE-)LOCALISING IN/OUTPUTS -------------------------------- A_i \u0026lt;= A; B_i \u0026lt;= B; Z \u0026lt;= Z_o; -------------------------------- -- COMBINATORIAL -------------------------------- Z_o \u0026lt;= A_i nand B_i; end Behavioral; NAND gate VHDL beschikt ook over het keyword \u0026ldquo;nand\u0026rdquo;. Een extra component maken is dus niet verplicht.\nNog enkele bijkomende opmerkingen: VHDL is case-insensitive. Je mag dus hoofdletters en kleine letters verwisselen. commentaar wordt vooraf gegaan van 2 min-tekens -- Het is good-practice om niet meteen te werken met de in- en uitgangen, maar met lokale signalen. Daarom wordt in dit voorbeeld deze \u0026ldquo;vertaalslag\u0026rdquo; gemaakt. input signalen hebben het suffix _i output signalen hebben het suffix _o. Deze signalen kunnen ook binnenin de entity gebruikt worden, terwijl de poorten (met OUT direction) dit niet toelaten. commentaar kan NOOIT kwaad Voor deze simpele voorbeelden lijkt het banaal om de link met de discrete component (en de bijhorende schematic) te leggen. Een goede designer verliest echter het volledige schema NOOIT uit het oog.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/700_fsm/720_voorbeeld_verkeerslicht/",
	"title": "Voorbeeld verkeerslicht",
	"tags": [],
	"description": "",
	"content": "Voorbeeld Moore FSM: verkeerslichten In rst_state zijn alle uitgangen laag (geen enkel licht brandt). In green_state is de green uitgang hoog en de rest laag (het groen licht brandt). In yellow_state is de yellow uitgang hoog en de rest laag (het oranje licht brandt). In red_state is de red uitgang hoog en de rest laag (het rood licht brandt). We kiezen ervoor om enkel vanuit red_state de mogelijkheid te voorzien om naar rst_state te gaan. FSM schematisch: States type my_state is (rst_state, green_state, yellow_state, red_state); signal next_state, state: my_state; Next state functie p_next: process(state, rst) begin case state is when rst_state =\u0026gt; if rst = \u0026#39;1\u0026#39; then next_state \u0026lt;= rst_state; else next_state \u0026lt;= green_state; end if; when green_state =\u0026gt; next_state \u0026lt;= yellow_state; when yellow_state =\u0026gt;next_state \u0026lt;= red_state; when red_state =\u0026gt; if rst = \u0026#39;1\u0026#39; then next_state \u0026lt;= rst_state; else next_state \u0026lt;= green_state; end if; when others =\u0026gt; next_state \u0026lt;= rst_state; end case; end process; State register p_reg: process(clk) begin if clk\u0026#39;event and clk = \u0026#39;1\u0026#39; then state \u0026lt;= next_state; end if; end process; Output functie p_out: process(state) begin case state is when rst_state =\u0026gt; red \u0026lt;= \u0026#39;0\u0026#39;; yellow \u0026lt;= \u0026#39;0\u0026#39;; green \u0026lt;= \u0026#39;0\u0026#39;; when green_state =\u0026gt; red \u0026lt;= \u0026#39;0\u0026#39;; yellow \u0026lt;= \u0026#39;0\u0026#39;; green \u0026lt;= \u0026#39;1\u0026#39;; when yellow_state =\u0026gt; red \u0026lt;= \u0026#39;0\u0026#39;; yellow \u0026lt;= \u0026#39;1\u0026#39;; green \u0026lt;= \u0026#39;0\u0026#39;; when red_state =\u0026gt; red \u0026lt;= \u0026#39;1\u0026#39;; yellow \u0026lt;= \u0026#39;0\u0026#39;; green \u0026lt;= \u0026#39;0\u0026#39;; when others =\u0026gt; red \u0026lt;= \u0026#39;0\u0026#39;; yellow \u0026lt;= \u0026#39;0\u0026#39;; green \u0026lt;= \u0026#39;0\u0026#39;; end case; end process; Opdracht: Pas de FSM voor de aansturing van verkeerslichten aan zodat er vanuit elke toestand naar rst_state kan worden gesprongen. Teken het nieuwe toestandsdiagramma. Schrijf de nieuwe next state functie (de output functie verandert niet)\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/100_intro_vhdl/025_and/",
	"title": "AND poort",
	"tags": [],
	"description": "",
	"content": "Heb géén schrik van deze titel. We gaan zeker niet alle componenten 1-voor-1 afgaan \u0026#x1f603;.\nUiteraard gaan complexere designs moeilijk te beschrijven zijn in één enkel bestand. Componenten kunnen bovendien hergebruikt worden in andere componenten. Laat ons als voorbeeld een AND poort bouwen met behulp van de eerder geziene NAND poort en de invertor. Het schema van ons design ziet er dus als volgt uit.\nDe AND gate, gebouwd met behulp van een NAND en een invertor -------------------------------- -- KU Leuven - ESAT/COSIC - ES\u0026amp;S -------------------------------- -- Module Name: and_gate - Behavioural -- Project Name: Digitale elektronische schakelingen -- Description: Een voorbeeld van een and-gate, gebouwd -- met een nand en een invertor. -- -- Revision Date Author Comments -- v0.1 20240118 VlJo Initial version -- -------------------------------- library IEEE; -- gebruik de package STD_LOGIC_1164 uit de library use IEEE.STD_LOGIC_1164.ALL; entity and_gate is port( A: IN STD_LOGIC; B: IN STD_LOGIC; Z: OUT STD_LOGIC ); end entity and_gate; architecture Behavioural of and_gate is -- COMPONENT DECLARATIONS component inverter is port( A: IN STD_LOGIC; Z: OUT STD_LOGIC ); end component inverter; component nand_gate is port( A: IN STD_LOGIC; B: IN STD_LOGIC; Z: OUT STD_LOGIC ); end component nand_gate; -- (DE-)LOCALISING IN/OUTPUTS signal A_i : STD_LOGIC; signal B_i : STD_LOGIC; signal Z_o : STD_LOGIC; -- INTERNAL SIGNALS signal x : STD_LOGIC; begin -------------------------------- -- (DE-)LOCALISING IN/OUTPUTS -------------------------------- A_i \u0026lt;= A; B_i \u0026lt;= B; Z \u0026lt;= Z_o; -------------------------------- -- COMBINATORIAL -------------------------------- nand_gate_inst00: component nand_gate port map( A =\u0026gt; A_i, B =\u0026gt; B_i, Z =\u0026gt; X ); inverter_inst00: component inverter port map( A =\u0026gt; X, Z =\u0026gt; Z_o ); end Behavioural; De beschrijving van deze AND poort begint met het gebruiken van een package (STD_LOGIC_1164) uit een library (IEEE).\nVervolgens is er opnieuw de entity block die aangeeft dat dit design 2 ingangspinnen heeft en 1 uitgangspin.\nIn de architecture verschijnt er iets nieuws. Tussen architecture en begin kunnen er declaraties gebeuren. Dit kunnen zowel declaraties zijn van signalen als van compontenten.\nAls er andere entities gebruikt gaan worden, dan moeten er aangegeven worden hoe deze er uit zien. Volgens ons schema gaan we gebruik maken van een NAND poort van en van een invertor. Deze twee component dienen dus gedeclareerd te worden. Voor de C-programmeurs kan je dit beschouwen als \u0026ldquo;forward declaration\u0026rdquo;.\nMerk op dat een component-declaratie exact hetzelfde beschreven wordt als de entity van de component zelf. Indien je een declaratie moet doen van een compent, kan je eenvoudig weg de \u0026ldquo;entity\u0026rdquo; kopiëren en vervang je het woordje entity door component (tweemaal).\nDe declaratie van een signaal is simpelweg duidelijk maken dat er een draadje gebruikt gaat worden, van een bepaald type en met een bepaalde naam.\nEen component instantiëren Volgens het design dienen we 2 componenten te gebruiken. Beide zijn hierboven reeds gedeclareerd. Deze declaratie is enkel om de tools duidelijk te maken hoe deze component er uit ziet.\nTussen de begin en end van de architecture kan er een instantiatie gemaakt worden van reeds gedeclareerde componenten.\nBij het instantieren kan er een naam gegeven worden aan de instantiatie. In het voorbeeld zijn de namen nand_gate_inst00 en inverter_inst00. Na de naamgeving wordt duidelijk gemaakt over welke component het gaat (component nand_gate). Uiteindelijk moet er port map gebeuren. Iedere in- en uitgang moet ergens aan gehangen worden. Dit kan soms een beetje verwarrend lijken, maar het idee is dat er voor iedere in- en uitgang het volgende staat:\nLINKS =\u003e RECHTS (komma) LINKS staat de naam van de poort van de component, RECHTS staat de naam van het signaal dat hierop aangesloten wordt.\nVerschillende poorten worden gescheiden door een komma (,). Dit wilt dus zeggen dat er na de laatste mapping geen komma meer mag volgen.\nIn de bovenstaande beschrijving van de AND poort gebruiken we een NAND en een INV. Voor de volledigheid geven we nog even mee dat er ook een keyword AND bestaat: Z_o \u0026lt;= A_i AND B_i; was dus een perfect alternatief geweest \u0026#x1f609;.\nAlle lijnen \u0026hellip; tegelijk In tegenstelling tot alle software die jullie tot hier toe geprogrameerd hebben, is er één heel belangrijk, conceptueel verschil met deze hardware beschrijving. Iedere lijn tussen de begin en end van de architecture wordt TEGELIJKERTIJD uitgevoerd. Het kan uiteraard (zoals in dit voorbeeld) dat het resultaat van één blok afhangt van het resultaat van een ander blok, maar zowel de NAND-gate als de invertor zijn gelijktijdig aan het werken.\nDenk nog eens terug aan de beschrijving op de MUDEC. Het IC met de NAND poort werkt ook simultaan met het IC met de invertor.\nDe AND gate, gebouwd met behulp van een NAND en een invertor, op een bread board "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/100_intro_vhdl/030_simulatie/",
	"title": "Simulatie",
	"tags": [],
	"description": "",
	"content": "Hoe kan er nu getest worden of onze nand poort correct werkt? We zouden een ASIC kunnen maken, maar dat zou een veel te dure en tijdrovende manier zijn.\nEen realistischere manier is om het design te implementeren op een FPGA, maar er is nog een gemakkelijkere en nuttigere manier: testbenches.\nHet idee achter een testbench is dat er \u0026ldquo;toestellen\u0026rdquo; zijn die inputs (ook stimuli genoemd) kunnen genereren. Vervolgens kunnen de waveforms van het hele design visueel geanalyseerd worden én kan de output van een component geverifieerd worden.\nIn dit opleidingsonderdeel krijgen jullie vaak de testbenches, maar het is goed om deze zelf aan te passen of uit te breiden.\nVoorbeeld: testbench voor een NAND poort Maken van een testbench Met onderstaande testbench kunnen we testen of onze nand poort werkt. Er moet een nieuwe simulation source aangemaakt worden en onderstaande testbench dient hierin geplakt te worden. Merk op dat ook de testbench geschreven is in (V)HDL.\nCommentaar Alhoewel dit geen verplicht stuk is, is het altijd nuttig om commentaar te voorzien.\nGebruik packages Deze testbench begint, net zoals de componenten, met het gebruiken van een package (STD_LOGIC_1164) uit een library (IEEE). Dit is uiteraard nodig omdat we anders geen definitie hebben van wat een STD_LOGIC type is.\nEen lege entitity Vervolgens is er ook een entity block. Merk hier zeker bij op dat een testbench typisch GEEN input en/of output poorten heeft.\nDeclaraties In de architecture gebeuren opnieuw eerst enkele declaraties. Zowel de component als de gebruikte signalen dienen gedeclareerd te worden.\nDUT Er wordt een component instantiatie gemaakt van de nand_gate in deze testbench. De naam van deze instantie is DUT, wat een acronym is van Device Under Test. UUT (Unit Under Test) wordt ook soms gebruikt\nStimuli Tenslotte is er nog één blok dat de stimuli beschrijft. Dit is een speciaal soort blok (een process) waar we later nog op terug komen. Wat er tussen de begin en end van een process beschreven staat, wordt sequentieel overlopen (hiermee wordt bedoeld: zoals bij een C-programma). Wees er echter van bewust dat de hele process-block TEGELIJKERTIJD loopt met de DUT.\nDe correcte werking van de NAND poort wordt in deze testbench nagegaan door alle mogelijke logische combinaties aan te leggen aan de ingangen van nullen en enen.\n-------------------------------- -- KU Leuven - ESAT/COSIC - ES\u0026amp;S -------------------------------- -- Module Name: nand_tb - Behavioural -- Project Name: Digitale eletronische schakelingen -- Description: Testbench for nand -- -- Revision Date Author Comments -- v1.0 20240118 VlJo Initial version -- -------------------------------- library IEEE; use IEEE.STD_LOGIC_1164.ALL; -- use IEEE.NUMERIC_STD.ALL; entity nand_tb is end entity nand_tb; architecture Behavioural of nand_tb is component nand_gate is port( A: IN STD_LOGIC; B: IN STD_LOGIC; Z: OUT STD_LOGIC ); end component nand_gate; signal input_a, input_b : STD_LOGIC; signal output_z : STD_LOGIC; begin -------------------------------- -- STIMULI -------------------------------- PSTIM: process begin input_a \u0026lt;= \u0026#39;0\u0026#39;; input_b \u0026lt;= \u0026#39;0\u0026#39;; wait for 10 ns; input_a \u0026lt;= \u0026#39;1\u0026#39;; input_b \u0026lt;= \u0026#39;0\u0026#39;; wait for 10 ns; input_a \u0026lt;= \u0026#39;0\u0026#39;; input_b \u0026lt;= \u0026#39;1\u0026#39;; wait for 10 ns; input_a \u0026lt;= \u0026#39;1\u0026#39;; input_b \u0026lt;= \u0026#39;1\u0026#39;; wait for 10 ns; wait; end process; -------------------------------- -- DUT -------------------------------- DUT: component nand_gate port map( A =\u0026gt; input_a, B =\u0026gt; input_b, Z =\u0026gt; output_z ); end Behavioural; Om een testbench toe te voegen aan het Vivado project is het belangrijk erop te letten dat je een Simulation source toevoegd. In deze testbench kan je vervolgens bovenstaande code plakken.\nRunnen van een testbench Als alle code beschreven is, kan de bovenstaante simulatie uitgevoerd worden. Er zijn meerdere manieren om een simulatie te starten en deze zul je ontdekken doorheen de labs.\nDe gemakkelijkste manier is om in de Flow Navigator (de verticale balk aan de linkerkant van het scherm) te klikken op: Run simulation. Als alles goed loop zou je (ongeveer) onderstaand scherm moeten krijgen.\nSimulatie van de nand gate met Vivado Je ziet hierin de inputs en de output van de DUT. De tijd verstrijkt over de X-as. Als beide inputs of één van beide inputs \u0026rsquo;laag\u0026rsquo; is, is de uitgang \u0026lsquo;hoog\u0026rsquo;. Indien beide ingangen \u0026lsquo;hoog\u0026rsquo; zijn, is de uitgang \u0026rsquo;laag\u0026rsquo;.\nDat is exact wat een NAND poort moet doen !! (gelukkig)\nAls het design gesimuleerd wordt met een open-source simulator krijgen we een identiek resultaat.\nSimulatie van de nand gate met GHDL en GTKWave "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/700_fsm/730_voorbeeld_timer/",
	"title": "Voorbeeld verkeerslicht timer",
	"tags": [],
	"description": "",
	"content": "Voorbeeld Mealy FSM: verkeerslichten met timer We voegen twee tellers toe om ervoor te zorgen dat de verkeerslichten langer rood en groen blijven dan oranje.\nWe veronderstellen dat de tellers op nul blijven staan zolang het start signaal hoog is. Als het start signaal laag wordt, telt de overeenkomstige teller op totdat een maximum is bereikt. Bij de korte teller is dit maximum (\u0026ldquo;0111\u0026rdquo;) kleiner dan bij de lange teller (\u0026ldquo;1111\u0026rdquo;). Bij het bereiken van het maximum wordt het ready signaal hoog. FSM schematisch: Teller met maximum waarde als parameter library ieee; use ieee.std_logic_1164.all; use ieee.std_logic_unsigned.all; entity teller is generic( max_waarde: std_logic_vector(3 downto 0)); port( clk, start: in std_logic; ready: out std_logic); end teller; architecture arch of teller is signal tel_waarde: std_logic_vector(3 downto 0); begin p_teller: process(clk) begin if clk\u0026#39;event and clk = \u0026#39;1\u0026#39; then if start = \u0026#39;1\u0026#39; then tel_waarde \u0026lt;= \u0026#34;0000\u0026#34;; ready \u0026lt;= \u0026#39;0\u0026#39;; elsif tel_waarde = max_waarde then tel_waarde \u0026lt;= \u0026#34;0000\u0026#34;; ready \u0026lt;= \u0026#39;1\u0026#39;; else tel_waarde \u0026lt;= tel_waarde + 1; ready \u0026lt;= \u0026#39;0\u0026#39;; end if; end if; end process; end arch; Datapad library ieee; use ieee.std_logic_1164.all; entity datapad is port( clk, start_kort, start_lang: in std_logic; ready_kort, ready_lang: out std_logic); end datapad; architecture arch of datapad is component teller is generic(max_waarde: std_logic_vector(3 downto 0)); port( clk, start: in std_logic; ready: out std_logic); end component; begin teller_lang: teller generic map(max_waarde =\u0026gt; \u0026#34;1111\u0026#34;) port map( clk =\u0026gt; clk, start =\u0026gt; start_lang, ready =\u0026gt; ready_lang); teller_kort: teller generic map(max_waarde =\u0026gt; \u0026#34;0111\u0026#34;) port map( clk =\u0026gt; clk, start =\u0026gt; start_kort, ready =\u0026gt; ready_kort); end arch; In het datapad wordt de parameteriseerbare teller twee maal geïnstantieerd. In de eerste instantiatie wordt de maximale waarde ingesteld op \u0026ldquo;1111\u0026rdquo;. In de tweede instantiatie wordt de maximale waarde ingesteld op \u0026ldquo;0111\u0026rdquo;. Next state functie p_next: process(state, rst, ready_lang, ready_kort) begin if rst = \u0026#39;1\u0026#39; then next_state \u0026lt;= rst_state; else case state is when rst_state =\u0026gt; next_state \u0026lt;= green_state; when green_state =\u0026gt; if ready_lang = \u0026#39;1\u0026#39; then next_state \u0026lt;= yellow_state; else next_state \u0026lt;= green_state; end if; when yellow_state =\u0026gt; if ready_kort = \u0026#39;1\u0026#39; then next_state \u0026lt;= red_state; else next_state \u0026lt;= yellow_state; end if; when red_state =\u0026gt; if ready_lang = \u0026#39;1\u0026#39; then next_state \u0026lt;= geen_state; else next_state \u0026lt;= red_state; end if; when others =\u0026gt; next_state \u0026lt;= rst_state; end case; end if; end process; State register p_reg: process(clk) begin if clk\u0026#39;event and clk = \u0026#39;1\u0026#39; then state \u0026lt;= next_state; end if; end process; Output functie p_out: process(state, ready_lang, ready_kort) begin case state is when rst_state =\u0026gt; red \u0026lt;= \u0026#39;0\u0026#39;; yellow \u0026lt;= \u0026#39;0\u0026#39;; green \u0026lt;= \u0026#39;0\u0026#39;; start_lang \u0026lt;= \u0026#39;1\u0026#39;; start_kort \u0026lt;= \u0026#39;0\u0026#39;; when green_state =\u0026gt; red \u0026lt;= \u0026#39;0\u0026#39;; yellow \u0026lt;= \u0026#39;0\u0026#39;; green \u0026lt;= \u0026#39;1\u0026#39;; start_lang \u0026lt;= \u0026#39;0\u0026#39;; if ready_lang = \u0026#39;1\u0026#39; then start_kort \u0026lt;= \u0026#39;1\u0026#39;; else start_kort \u0026lt;= \u0026#39;0\u0026#39;; end if; when yellow_state =\u0026gt; red \u0026lt;= \u0026#39;0\u0026#39;; yellow \u0026lt;= \u0026#39;1\u0026#39;; green \u0026lt;= \u0026#39;0\u0026#39;; start_kort \u0026lt;= \u0026#39;0\u0026#39;; if ready_kort = \u0026#39;1\u0026#39; then start_lang \u0026lt;= \u0026#39;1\u0026#39;; else start_lang \u0026lt;= \u0026#39;0\u0026#39;; end if; when red_state =\u0026gt; red \u0026lt;= \u0026#39;1\u0026#39;; yellow \u0026lt;= \u0026#39;0\u0026#39;; green \u0026lt;= \u0026#39;0\u0026#39;; start_kort \u0026lt;= \u0026#39;0\u0026#39;; if ready_lang = \u0026#39;1\u0026#39; then start_lang \u0026lt;= \u0026#39;1\u0026#39;; else start_lang \u0026lt;= \u0026#39;0\u0026#39;; end if; when others =\u0026gt; red \u0026lt;= \u0026#39;0\u0026#39;; yellow \u0026lt;= \u0026#39;0\u0026#39;; green \u0026lt;= \u0026#39;0\u0026#39;; start_lang \u0026lt;= \u0026#39;0\u0026#39;; start_kort \u0026lt;= \u0026#39;0\u0026#39;; end case; end process; "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/100_intro_vhdl/031_synthesisable/",
	"title": "Synthetiseerbaar",
	"tags": [],
	"description": "",
	"content": "Synthesisable subset Tot hier hebben we gekeken naar de beschrijving van enkele discrete componenten. Deze componenten hebben beschreven in VHDL. Daarnaast hebben we een eerste testbench gemaakt ter verificatie van het ontwerp. Ook deze testbench is beschreven in VHDL. Dit is wellicht een goed moment om even aan te halen dat er ook andere HDL (hardware description languages) bestaan. Wellicht is de meest bekende (en meest gebruikte) taal verilog. De meest recente, wijd-verspreide taal is SystemVerilog, welke (zoals de naam doet vermoeden) gebaseeerd is op verilog. Dan zijn er ook nog HDLs die naar software talen leunen zoals: SystemC (C-like), MyHDL (Python-like) of Lava (Haskell-like).\nHet is belangrijk om te weten dat niet alle (V)HDL code synthesisable is. Wat wordt daarmee bedoeld?\nOf er nu voor FPGA of ASIC ontwikkeld wordt, de eerste stap van de toolchain is Synthesis. Tijdens de synthese wordt de HDL omgezet in een netlist. Dit is feitelijk niets anders dan een lijst van electronische componenten samen met een set van hoe deze verbonden zijn. Dit wilt dus zeggen: er moet een werkelijke component zijn voor (een deel van) de beschrijving.\nAlle keywords en constructies van een HDL waarvoor een fysieke implementatie bestaat wordt synthetiseerbare code genoemd:\nkeyword AND: is een beschrijving voor een logische poort poort richting IN: is een beschrijving voor een richting van een poort Z_i \u0026lt;= x: is het leggen een draadje tussen de draadjes Z_i en x In de testbench hebben we constructie gebruikt zoals wait for 10 ns;. Voor deregelijke instructies bestaat er geen fysieke implementatie. Deze code noemen we (surprise, surprise): niet-synthetiseerbare code.\nQuasi alle hardware beschrijvingstalen hebben zowel de mogelijkheid tot het schrijven van synthetiseerbare en niet-synthetiseerbare code. Dit eerste is voor designs te beschrijven, terwijl het tweede is om designs te testen.\nEnkele voorbeelden van niet-synthetiseerbare code: wait for 10ns; wait until ready = \u0026#39;1\u0026#39;; for i in 1 to 10 loop test_signaal \u0026lt;= NOT test_signaal; wait for 10ns; end loop; ..."
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/100_intro_vhdl/040_opdracht/",
	"title": "Opdracht 1: OR gate",
	"tags": [],
	"description": "",
	"content": "Als eerste opdracht in deze labo\u0026rsquo;s gaan jullie zelf een OR gate maken. In plaats van gebruik te maken van het OR keyword, moét deze gate gemaakt worden met uitsluitend NAND poorten. Maak hiervoor een nieuw bestand aan waarin je de beschrijving kwijt kan. Om te weten of de implementatie werkt, moet er ook een testbench geschreven worden. Deze kan dan gebruiken om het design te simuleren.\nDe schematic voor de OR poort (voor zij die het vergeten zouden zijn) is:\nOR gate De entity voor de OR poort moét als volgt zijn:\nentity or_gate is port( A : IN STD_LOGIC; B : IN STD_LOGIC; Z : OUT STD_LOGIC ); end entity or_gate; Inleveren Om deze opdracht in te leveren moeten jullie volgende bestanden indienen via Toledo:\néén (of meerdere) bestanden met het design één bestand met de testbench [OPTIONEEL] een markdown file met nodige uitleg Deze laatste is misschien nog niet nuttig voor deze opdracht, maar mogelijks wel voor latere opdrachten. Deze file geeft je de mogelijkheid om extra info mee te sturen.\nLaad enkel de bovenvernomende bestanden op in Toledo. Het is NIET de bedoeling om een volledig Vivado project te zippen en in te dienen !!\nDe VHDL broncode van de voorbeelden uit dit hoofdstuk kun je vinden op GitHub.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/200_next_step/",
	"title": "2. Volgende stap",
	"tags": [],
	"description": "",
	"content": "Volgende stap Image courtesy: pexels - Porapak Apichodilok "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/200_next_step/240_vectors/",
	"title": "Vectors",
	"tags": [],
	"description": "",
	"content": "Soms moet of wil je met arrays of groepen van bits werken. Natuurlijk gaat dit ook in VHDL en in VHDL worden dit vectors genoemd. Als we een array van 8 bits willen dan beschrijven we dat in één van de twee onderstaande opties.\nsignal result: std_logic_vector(7 downto 0); signal outcome: std_logic_vector(0 to 7); Een vector van 8 bits, Little Endian, met LSB en MSB aanduiding Stel dat we het getal 213 willen voorstellen. Hexadecimaal wordt dit 0xD5 en in binaire notatie is dit 0b11010101. Zoals in de meeste moderne Europese talen, lezen we van links naar rechts. Het cijfer 3 in 213 geeft het aantal eenheden mee. Dit cijfer heeft het minste gewicht en wordt het minst beduidend genoemd. De meest rechtse bit noemen we deze bit de minst-beduidende bit, of least significant bit (LSB), en deze staat rechts. Deze afspraak wordt Little endian genoemd. Indien we de LSB links zetten, spreken we van Big endiann.\nIs het sop de kool waard? Waarom zouden we daar nu moeilijk over doen? Denk eens na over de volgende twee regels C-code.\nunsigned char value_x[3] = {2, 1, 3}; unsigned char value_y = 213; Hieronder is een mooie illustratie van het verschil. Laat u niet ver(r)assen door het Endian-monster! Image courtesy: LinkedIn - ByteByteGo Wat is nu het verschil tussen result en outcome van de hierboven gedeclareerde signalen? De binaire vector 11010101 blijft altijd hetzelfde, bv de voorlaatste bit is een \u0026lsquo;0\u0026rsquo;. Het verschil zit hem in het indexeren. Deze bit is result(1) ofwel outcome(6). De waarde in de vector verandert niet!!\nVoorbeeld Als voorbeeld van het gebruik van vectoren wordt hieronder de code gegeven voor een 4-bit AND poort\n-------------------------------- -- KU Leuven - ESAT/COSIC - ES\u0026amp;S -------------------------------- -- Module Name: 4-bit and_gate - Behavioural -- Project Name: Digitale elektronische schakelingen -- Description: Een voorbeeld van een 4-bit and-gate. -- X geeft een bits-gewijze AND van A en B -- Z geeft een 4-bit and van A -- Revision Date Author Comments -- v0.1 20240118 VlJo Initial version -- -------------------------------- library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity fourbit_and_gate is port( A: IN STD_LOGIC_VECTOR(3 downto 0); B: IN STD_LOGIC_VECTOR(3 downto 0); X: OUT STD_LOGIC_VECTOR(3 downto 0); Z: OUT STD_LOGIC ); end entity fourbit_and_gate; architecture Behavioural of fourbit_and_gate is -- (DE-)LOCALISING IN/OUTPUTS signal A_i : STD_LOGIC_VECTOR(3 downto 0); signal B_i : STD_LOGIC_VECTOR(3 downto 0); signal X_o : STD_LOGIC_VECTOR(3 downto 0); signal Z_o : STD_LOGIC; begin -------------------------------- -- (DE-)LOCALISING IN/OUTPUTS -------------------------------- A_i \u0026lt;= A; B_i \u0026lt;= B; X \u0026lt;= X_o; Z \u0026lt;= Z_o; -------------------------------- -- COMBINATORIAL -------------------------------- Z_o \u0026lt;= A_i(0) AND A_i(1) AND A_i(2) AND A_i(3); X_o(0) \u0026lt;= A_i(0) AND B_i(0); X_o(1) \u0026lt;= A_i(1) AND B_i(1); X_o(2) \u0026lt;= A_i(2) AND B_i(2); X_o(3) \u0026lt;= A_i(3) AND B_i(3); -- wat ook mag is: --X_i \u0026lt;= A_i AND B_i; end Behavioural; Nog enkele bijkomende opmerkingen: een 4-bit vector moét niet altijd index 0 bevatten: signal voorbeeld : STD_LOGIC_VECTOR(4 downto 1) is ook geldig indexen worden geselecteerd met gewone haakjes \u0026lsquo;(\u0026rsquo; en \u0026lsquo;)\u0026rsquo; namen (van poorten, signalen, variabelen, entities, \u0026hellip;) moeten aan bepaalde voorwaarden voldoen: beginnen met een letter mogen voor de rest letters of cijfers bevatten mogen géén spaties of \u0026lsquo;-\u0026rsquo;-tekens bevatten een underscore (\u0026rsquo;_\u0026rsquo;) is toegestaan, maar niet als laatste karakter twee opeenvolgende underscores is niet toegestaan zijn hoofdletter-ongevoelig mogen geen keyword (signal, begin, procedure, \u0026hellip;) zijn er bestaan verschillende manieren om toekenningen te doen: bv \u0026ldquo;0001\u0026rdquo; aan Q_i Q_i \u0026lt;= \u0026quot;0001\u0026quot;; \u0026ndash; handig voor hardcoding Q_i \u0026lt;= (0 =\u0026gt; '1', others =\u0026gt; '0'); \u0026ndash; handig voor langere vectoren of onbekende groottes Q_i(0) \u0026lt;= '1'; Q_i(1) \u0026lt;= '0'; Q_i(2) \u0026lt;= '0'; Q_i(3) \u0026lt;= '0'; \u0026ndash; handig bij ingewikkeldere designs "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/200_next_step/250_signals/",
	"title": "Signals",
	"tags": [],
	"description": "",
	"content": "Natuurlijk hebben we soms ook tussensignalen nodig in ons project/code. Hiervoor gebruiken we signals. Signals declareer je na de architecture maar voor het begin keyword, zoals in het voorbeeld hieronder.\nlibrary IEEE; use IEEE.STD_LOGIC_1164.ALL; entity signal_example is Port (A_vector: in std_logic_vector(7 downto 0); Y_vector: out std_logic_vector(7 downto 0)); end signal_example; architecture Behavioral of signal_example is signal tussenresultaat: std_logic; begin tussenresultaat \u0026lt;= A_vector(0) AND A_vector(1); Y_vector(7) \u0026lt;= tussenresultaat; Y_vector(6 downto 0) \u0026lt;= A_vector(7 downto 1); end Behavioral; "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/200_next_step/260_processen/",
	"title": "Processen",
	"tags": [],
	"description": "",
	"content": "Een basis component die vaak voorkomt is een multiplexer.\n2-naar-1 multiplexer ... architecture Behavioral of ... ... signal rotate_left : STD_LOGIC_VECTOR(7 downto 0); signal rotate_right : STD_LOGIC_VECTOR(7 downto 0); signal MUX_select : STD_LOGIC; signal transformed : STD_LOGIC_VECTOR(7 downto 0); ... begin ... -- optie 1 transformed \u0026lt;= rotate_left when MUX_select = \u0026#39;0\u0026#39; else rotate_right; -- optie 2 with MUX_select select transformed \u0026lt;= rotate_left when \u0026#39;0\u0026#39;, rotate_right when others; -- optie 3 PMUX: process(rotate_left, rotate_right, MUX_select) begin if MUX_select = \u0026#39;0\u0026#39; then transformed \u0026lt;= rotate_left; else transformed \u0026lt;= rotate_right; end if; end process; ... end Behavioral; In het voorbeeld hierboven zijn er twee signalen rotate_left en rotate_right. Eén van beide wordt doorverbonden met het signaal transformed. Welke van beide mogelijkheden doorgegeven wordt, wordt bepaald door de waarde van het signaal MUX_select (\u0026lsquo;0\u0026rsquo;: rotate_left en \u0026lsquo;1\u0026rsquo;: rotate_right). Note that select is a keyword.\nAlle drie de opties zijn geldige VHDL constructies. Met de netlist (die gegenereerd wordt door de synthese-tool) in achterhoofd, is er geen verschil tussen de drie opties.\nOptie 1 geeft een handige manier handige manier indien er maar 2 opties zijn. Optie 2 geeft een handige manier handige manier indien er meer dan 2 opties zijn. Optie 3 geeft een handige manier handige manier indien er meer complexiteit nodig is. De derde optie vergt nog een extra woordje uitleg. Een process is een set van instructies, tussen begin en end die sequentieel uitgevoerd wordt. De vraag die zich dan stelt is: \u0026ldquo;Wanneer wordt deze lijst van instructies uitgevoerd ?\u0026rdquo;. Om dit te definiëren is er de sensitiviy list. Dit is een oplijsting van signalen die, wanneer ze veranderen van waarde, het proces triggeren.\nTenslotte dient er nog vermeld te worden dat een process een naam kan hebben. In het voorbeeld is dit: PMUX.\nMerk op dat de regels tussen begin en end van het process eigenlijk niet-synthetiseerbaar zijn. In het geheel van het process, wordt het wel synthetiseerbaar.\nEen tweede opmerking is er (bewust) een mismatch is tussen de schematic en de code, met name: de breedte van de signalen. Als er twee draden zijn die naar 1 draad moeten gaan, volstaat een 2-naar-1 multiplexer. Indien er echter 2 bussen zijn die naar 1 bus moeten gaan, zijn er meerdere multiplexers nodig. In het geval van een 8-bit bus, worden het acht 2-naar-1 multiplexers.\nEen subtiliteitje Q: Wat zijn de mogelijke waardes die MUX_select kan hebben ?\nWelke manier van beschrijven is het beste? Dat is een simpele vraag en het eenvoudige antwoord hierop is: het maakt niet uit. \u0026ldquo;Waarom ?\u0026rdquo;, hoor ik je zeggen?\nLaat ons even teruggaan naar het begin:\nwe willen hardware ontwerpen die een bepaalde functionaliteit bekomt wij, als hardware designers, denken hard na (LOL, sorry) en komen op de proppen met een ontwerp op een of andere manier moeten we dit ontwerp duidelijk maken aan de computer, meer bepaald de design tools om dit te behalen gebruiken we een HDL Zolang de tools weten, in dit geval, dat we een multiplexer bedoelen, maakt de hoeveelheid schrijfwerk NIETS uit "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/200_next_step/280_generate/",
	"title": "Generate",
	"tags": [],
	"description": "",
	"content": "De meeste designs hebben ergens wel een bus, of een signaal dat een vector is. Daarom kan het ook vaak voorkomen dat VHDL-code nogal veel herhalingen heeft. Neem bijvoorbeeld het design hier onder, waarbij er een and gedaan wordt voor elke input-paar. Rechts zie je een beschrijving hiervan in VHDL.\nDesign voor for-generate ... y(0) \u0026lt;= x(0) and x(1); y(1) \u0026lt;= x(2) and x(3); y(2) \u0026lt;= x(4) and x(5); y(3) \u0026lt;= x(6) and x(7); ... Zolang dat het aantal bits in deze X-vector behapbaar blijft, kan je dat volledig uitschrijven. Als deze vector te breed wordt, dan begint het pijnlijk te worden. In VHDL wordt hieraan tegemoet gekomen mbv een for-generate. Deze constructie bespaart aanzienlijk veel \u0026ldquo;beschrijf werkt\u0026rdquo; zonder aan de functionaliteit te komen. Het uiteindelijke design verandert niet omdat een for-generate gebruikt wordt.\n... GENERATE_LABEL_DAT_JE_ZELF_MAG_KIEZEN: for i in 0 to 3 generate y(i) \u0026lt;= x(i*2) and x(i*2+1) end generate GENERATE_LABEL_DAT_JE_ZELF_MAG_KIEZEN; ... Het kan, voor beginnende VHDL-gebruikers soms verwarrend zijn hoe deze indices gebruikt moeten worden. Een goede tip is om de eerste 2-3 instanties volledig uit te schrijven. Hiermee kan het patroon van de indices gemakkelijker herkend worden.\nComponenten instantiëren mbv een for-generate Ook het instantiëren van een component kan gebeuren met een for-generate. Indien men het bovenstaande voorbeeld willen beschrijven met de AND-poort uit het vorige hoofdstuk, kan dit als volgt:\n... GEN_AND: for i in 0 to 3 generate and_gate_inst: component and_gate port map( A =\u0026gt; x(i*2), B =\u0026gt; x(i*2+1), Z =\u0026gt; y(i) ); end generate GEN_AND; ... Vivado kan een schematische voorstelling maken van de hardware beschrijving met RTL analysis elaborate design.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/200_next_step/285_generic/",
	"title": "Generic",
	"tags": [],
	"description": "",
	"content": "Sommige studenten hebben misschien al door dat de componenten tot hiertoe niet goed schaalbaar zijn. Wat als er nu nood is aan een 6-bit XOR poort? Moeten we dan voor iedere mogelijke breedte een nieuwe component maken? Nee! Dit kunnen we oplossen door generics te gebruiken. Als voorbeeld hebben we een 8-bit AND poort die generic is en kan schalen.\nGeneric AND voorstelling Je kan deze AND poort beschrijven met onderstaand code. De variable N wordt gebruikt als het aantal inputs.\n-------------------------------------------------------------------------------- -- KU Leuven - ESAT/COSIC - Emerging technologies, Systems \u0026amp; Security -------------------------------------------------------------------------------- -- Module Name: nbit_and - Behavioural -- Project Name: Digitale eletronische schakelingen -- Description: n-bit AND poort ter illustratie van het gebruik van generics -- -- Revision Date Author Comments -- v0.1 20240119 VlJo Initial version -- -------------------------------------------------------------------------------- library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity nbit_and is Generic( G_WIDTH : integer := 8 ); Port ( A_vector: in std_logic_vector(G_WIDTH-1 downto 0); B_vector: in std_logic_vector(G_WIDTH-1 downto 0); Z_vector: out std_logic_vector(G_WIDTH-1 downto 0) ); end nbit_and; architecture Behavioral of nbit_and is -- (DE-)LOCALISING IN/OUTPUTS signal A_vector_i : std_logic_vector(G_WIDTH-1 downto 0); signal B_vector_i : std_logic_vector(G_WIDTH-1 downto 0); signal Z_vector_o : std_logic_vector(G_WIDTH-1 downto 0); begin -------------------------------- -- (DE-)LOCALISING IN/OUTPUTS -------------------------------- A_vector_i \u0026lt;= A_vector; B_vector_i \u0026lt;= B_vector; Z_vector \u0026lt;= Z_vector_o; -------------------------------- -- COMBINATORIAL -------------------------------- Z_vector_o \u0026lt;= A_vector_i AND B_vector_i; end Behavioral; Voor integers wordt er := gebruikt in VHDL.\nAls we dergelijk beschreven AND poort willen gebruiken, kunnen we de G_WIDTH waarde aanpassen. In dit voorbeeld wordt de nbit_and component twee maal geïnstantieerd: een keer op 4 en een keer op 91.\n... architecture Behavioral of demo is component nbit_and is Generic( G_WIDTH : integer := 8 ); Port ( A_vector: in std_logic_vector(G_WIDTH-1 downto 0); B_vector: in std_logic_vector(G_WIDTH-1 downto 0); Z_vector: out std_logic_vector(G_WIDTH-1 downto 0) ); end component nbit_and; ... begin mijn_4_bit_and_poort: component nbit_and generic map( G_WIDTH =\u0026gt; 4) port map ( A_vector =\u0026gt; een_vier_bit_a, B_vector =\u0026gt; een_vier_bit_b, Z_vector =\u0026gt; een_vier_bit_z); ... mijn_91_bit_and_poort: component nbit_and generic map( G_WIDTH =\u0026gt; 91) port map ( A_vector =\u0026gt; een_eenennegentig_bit_a, B_vector =\u0026gt; een_eenennegentig_bit_b, Z_vector =\u0026gt; een_eenennegentig_bit_z); ... end Behavioral; "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/200_next_step/290_opdracht/",
	"title": "Opdracht 2: Ripple carry adder",
	"tags": [],
	"description": "",
	"content": "In deze opdracht moet je een 16 bit ripple-carry adder maken. Indien je vergeten bent hoe een full adder en een half adder eruit zien, kan je kijken naar onderstaande schema\u0026rsquo;s. Bij een ripple-carry adder wordt de C-out van de eerste adder doorgegeven aan de C-in van de tweede adder. We werken in little endian.\nHet is niet de bedoeling dat je de + operator gebruikt van \u0026ldquo;std_logic_unsigned\u0026rdquo; of \u0026ldquo;std_logic_signed\u0026rdquo;!\nHalf adder, met S = A \u0026amp;oplus; B Full adder Het is altijd een goed idee om eerst een tekening te maken voordat je begint met typen.\nOpleveren Om deze opdracht op te leveren moeten jullie volgende bestanden indienen via Toledo:\néén of meerdere bestanden met het design [OPTIONEEL] een markdown file met nodige uitleg Merk op dat er GEEN testbench mee opgeladen dient te worden.\nTestbench Om een component declaratie te doen, kan je eenvoudig de entity kopiëren en de keywoorden entity vervangen door component. Het omgekeerde kan uiteraard ook \u0026#x1f603;\nMerk op hoe de generic van de testbench gebruikt wordt om de generic van DUT op te mappen.\n-------------------------------------------------------------------------------- -- KU Leuven - ESAT/COSIC - Emerging technologies, Systems \u0026amp; Security -------------------------------------------------------------------------------- -- Module Name: rca_tb - Behavioural -- Project Name: Digitale eletronische schakelingen -- Description: Testbench for rca -- -- Revision Date Author Comments -- v0.1 20140119 VlJo Initial version -- -------------------------------------------------------------------------------- library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity rca_tb is generic( WIDTH_as_set_by_the_testbench : natural := 16 ); end entity rca_tb; architecture Behavioural of rca_tb is component rca is generic( WIDTH : natural := 8 ); port( A : IN STD_LOGIC_VECTOR(WIDTH-1 downto 0); B : IN STD_LOGIC_VECTOR(WIDTH-1 downto 0); S : OUT STD_LOGIC_VECTOR(WIDTH-1 downto 0); C : OUT STD_LOGIC ); end component rca; signal A : STD_LOGIC_VECTOR(WIDTH_as_set_by_the_testbench-1 downto 0); signal B : STD_LOGIC_VECTOR(WIDTH_as_set_by_the_testbench-1 downto 0); signal S : STD_LOGIC_VECTOR(WIDTH_as_set_by_the_testbench-1 downto 0); signal C : STD_LOGIC; begin ------------------------------------------------------------------------------- -- STIMULI ------------------------------------------------------------------------------- PSTIM: process begin A \u0026lt;= x\u0026#34;0000\u0026#34;; B \u0026lt;= x\u0026#34;0000\u0026#34;; wait for 3 ns; assert (S = x\u0026#34;0000\u0026#34;) report \u0026#34;Error in sum\u0026#34; severity note; assert (C = \u0026#39;0\u0026#39;) report \u0026#34;Error in carry\u0026#34; severity note; wait for 2 ns; A \u0026lt;= x\u0026#34;0003\u0026#34;; B \u0026lt;= x\u0026#34;0027\u0026#34;; wait for 3 ns; assert (S = x\u0026#34;002A\u0026#34;) report \u0026#34;Error in sum\u0026#34; severity note; assert (C = \u0026#39;0\u0026#39;) report \u0026#34;Error in carry\u0026#34; severity note; wait for 2 ns; A \u0026lt;= x\u0026#34;FFFF\u0026#34;; B \u0026lt;= x\u0026#34;FFFF\u0026#34;; wait for 3 ns; assert (S = x\u0026#34;FFFE\u0026#34;) report \u0026#34;Error in sum\u0026#34; severity note; assert (C = \u0026#39;1\u0026#39;) report \u0026#34;Error in carry\u0026#34; severity note; wait for 2 ns; wait; end process; ------------------------------------------------------------------------------- -- DUT ------------------------------------------------------------------------------- DUT: component rca generic map (WIDTH =\u0026gt; WIDTH_as_set_by_the_testbench) port map( A =\u0026gt; A, B =\u0026gt; B, S =\u0026gt; S, C =\u0026gt; C ); end Behavioural; "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/300_alu/",
	"title": "3. ALU",
	"tags": [],
	"description": "",
	"content": "ALU Image courtesy: pexels - Kindel Media "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/300_alu/310_intro_alu/",
	"title": "Wat is een ALU?",
	"tags": [],
	"description": "",
	"content": "Het doel van dit labo is om uiteindelijk een werkende RISC-V processor te maken, ook al is het in een simpele vorm. In dit OPO gaan we de beschrijving uiteraard wel maken in VHDL.\nEén van de componenten die in iedere processor zit is een Arithmetic Logic Unit (ALU). Een ALU neemt 2 (of 1) input(s) en voert hier een bepaalde instructie mee uit. Deze instructie kan een logische operatie zijn zoals AND, OR, XOR,.. of een wiskundige operatie zoals een optelling of een verschil.\nPrincipe schema van een ALU De ALU die gebruikt wordt in de RISC-V processor, biedt de mogelijkheid om 10 verschillende instructies uit te voeren. De operatie die uitgevoerd wordt, wordt omgeschreven als f(x,y).\nAritmetische operaties f(x,y) = Omschrijving \u0026nbsp; \u0026nbsp; x+y\u0026nbsp; \u0026nbsp; Het resultaat is de som van x en y \u0026nbsp; \u0026nbsp; x-y\u0026nbsp; \u0026nbsp; Het resultaat is het verschil van x en y Logische operaties f(x,y) = Omschrijving \u0026nbsp; \u0026nbsp; x\u0026y\u0026nbsp; \u0026nbsp; Het resultaat is x AND y \u0026nbsp; \u0026nbsp; x|y\u0026nbsp; \u0026nbsp; Het resultaat is x OR y \u0026nbsp; \u0026nbsp; x^y\u0026nbsp; \u0026nbsp; Het resultaat is x XOR y \u0026nbsp; \u0026nbsp; x\u0026lt;\u0026lt;y\u0026nbsp; \u0026nbsp; Het resultaat is x, y posities naar links geschoven en aangevuld met 0-en \u0026nbsp; \u0026nbsp; x\u0026gt;\u0026gt;y\u0026nbsp; \u0026nbsp; Het resultaat is x, y posities naar rechts geschoven en aangevuld met 0-en \u0026nbsp; \u0026nbsp; x\u0026gt;\u0026gt;y\u0026nbsp; \u0026nbsp; Het resultaat is x, y posities naar rechts geschoven (mét tekenbehoud) \u0026nbsp; \u0026nbsp; (x\u0026lt;y)\u0026nbsp; \u0026nbsp; Het resultaat is 1 als x\u0026lt;y, anders 0 \u0026nbsp; \u0026nbsp; (x\u0026lt;y)U\u0026nbsp; \u0026nbsp; Het resultaat is 1 als x\u0026lt;y, anders 0. X en y worden gezien als unsigned "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/300_alu/315_2scompliment/",
	"title": "2&#39;s Compliment",
	"tags": [],
	"description": "",
	"content": "ℕ Gezien je voor een ingenieurs-richting gekozen hebt, gaan we er van uit dat je geen schrik hebt van binaire getallen. Hopelijk zie je dat 0b1010 hetzelfde is als 0xA, of tien zoals men in de volksmond zegt. Hieronder vind je nog een overzichtstabel voor de eerste 16 natuurlijke getallen.\nDecBinHexDecBinHexDecBinHexDecBinHex 00b00x0 40b1000x4 80b10000x8 120b11000xC 10b10x1 50b1010x5 90b10010x9 130b11010xD 20b100x2 60b1100x6 100b10100xA 140b11100xE 30b110x3 70b1110x7 110b10110xB 150b11110xF Merk op dat alle 16 mogelijkheden binair te vervatten zijn in 4 tekens (=digits). In het geval dat de voorstelling korter is dan 4 digits, kunnen we altijd 0-en toevegen aan de linkerkant.\nℤ Stel dat we de verzameling van natuurlijke getallen willen uitbreiden naar de gehele getallen, hebben we ook negatieve getallen nodig. De meest gebruikte manier om negatieve getallen weer te geven is met behulp van 2\u0026rsquo;s compliment. De conversie naar 2\u0026rsquo;s complement kan bekomen worden door de binaire voorstelling te inverteren en dan 1 bit op te tellen. Merk op dat de terugomzetting van 2\u0026rsquo;s complement bekomen kan worden met dezelfde conversietechiek.\nDecimaalBinair\u0026nbsp;DecimaalBinair 10b0001\u0026nbsp;-10b1111 20b0010\u0026nbsp;-20b1110 30b0011\u0026nbsp;-30b1101 40b0100\u0026nbsp;-40b1100 50b0101\u0026nbsp;-50b1011 60b0110\u0026nbsp;-60b1010 70b0111\u0026nbsp;-70b1001 In tegenstelling tot bij de natuurlijke getallen, kunnen we hier niet de breedte verlengen door links nullen toe voegen. In het kort kan gezegd worden dat je MSB kunt herhalen aan de linkerkant.\nWat is het effect van 2\u0026rsquo;s complement op 0? Juist, ja: 0.\nTenslotte dient er nog even gemeld te worden dat de conversie ook op een andere manier kan gebeuren: verminder het getal met 1 en voer dan een bits-gewijze inversie uit.\nSigned vs Unsigned Een basis concept van programmeren is het idee van een type. Als een variable gedeclareerd wordt, dient hierbij een type meegegeven te worden. Een voorbeeld hiervan in C is: char mychar; Een char is een variabele van 8 bits. Indien we enkel de natuurlijke getallen in acht nemen, kunnen er 256 (=28) verschillende positieve getallen (én 0) weergegeven worden: 0 ≤ mychar \u0026lt; 256. Omdat er hier geen rekening gehouden wordt met het teken van het getal, noemen we dit een unsigned type.\nIndien we echter de gehele getallen in acht nemen, kunnen er 256 (=28) verschillende positieve en negatieve getallen (én 0) weergegeven worden. Doordat de 2\u0026rsquo;s complement methode gebruikt wordt, wordt het bereik: -128 ≤ mychar \u0026lt; 128. Omdat er hier wél rekening gehouden wordt met het teken van het getal, noemen we dit een signed type.\nOok in VHDL bestaan de types signed en unsigned. Deze kunnen gebruikt worden nadat de package NUMERIC_STD uit de IEEE library toegevoegd wordt. Zowel de types signed als unsigned worden gemaakt door een array te maken van STD_LOGIC waardes. Het voordeel hiervan is dat vergelijkingen (\u0026lt;, ≥, \u0026hellip;) correct uitgevoerd worden.\nlibrary IEEE; use IEEE.STD_LOGIC_1164.ALL; use IEEE.NUMERIC_STD.ALL; entity test ... end entity test; architecture Behavioural of is signal data : STD_LOGIC(7 downto 0); signal data_u : unsigned(7 downto 0); signal data_s : signed(7 downto 0); signal data_new_u: STD_LOGIC(7 downto 0); signal data_new_s: STD_LOGIC(7 downto 0); begin data_u \u0026lt;= unsigned(data); data_s \u0026lt;= signed(data); data_new_u \u0026lt;= std_logic_vector(data_u); data_new_s \u0026lt;= std_logic_vector(data_s); end Behavioural; Een computer (of een hardware dezign) ziet enkel een reeks van 1-en en 0-en. De interpretatie die eraan gegeven wordt, ligt bij de gebruiker. Het is dus van belang dat men dit wéét bij het ontwerp van hardware, of bij het schrijven van (low-end) software.\nAdd/sub Eén van de mogelijke ALU instructies is f(x,y) = x-y. Wiskundig gezien weten we echter dat: x - y = x + (-y). Dus, je kan stellen dat een aftrekking hetzelfde is als een optelling met de negatieve waarde.\nHadden jullie nu net geen Ripple Carry Adder gemaakt? #Chance-ke.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/300_alu/320_status_codes/",
	"title": "Status codes ALU",
	"tags": [],
	"description": "",
	"content": "De ALU gaat dus een arithmetische of logische instructie uitvoeren. Ongeacht de operatie die de ALU moet uitvoeren, zijn er altijd twee ingangen. De operatie die uitgevoerd moet worden, wordt aangeduid aan de hand van 3 bits: ALUop. De ALU heeft dus, naast twee 32-bit ingangen voor de operanden, ook één 3-bit ingang. Tenslotte zijn er nog 2 ingangen die aanduiden of de ALU logisch of arithmetisch moet werken; en of de ALU signed of unsigned moet werken.\nDe ALU zal de bewerking uitvoeren die er gevraagd wordt. Naast het resultaat, geeft de ALU ook nog extra informatie. De extraatjes zijn:\nzijn de twee operanden gelijk aan elkaar is x kleiner dan y, als we uitgaan van unsigned getallen is x kleiner dan y, als we uitgaan van signed getallen Deze extra informatie worden vlaggen (flags) genoemd. Een andere vaak gebruikte naam hiervoor zijn status codes.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/300_alu/325_design/",
	"title": "ALU Design",
	"tags": [],
	"description": "",
	"content": "Voordat er begonnen kan worden aan de beschrijving van de ALU, moet eerst het hardware ontwerp gemaakt worden.\nIn wezen gebeurt hier niets spectaculairs. Alle mogelijks gevraagde bewerkingen worden allemaal berekend. Met behulp van een multiplexer wordt het gewenste resultaat uitgefilterd aan de uitgang aangelegd.\nDe basis-logische poorten, gearceerd in groen, zijn reeds besproken in het eerste hoofdstuk.\nDe ripple-carry adders voor het berekenen van de som en het verschil, gearceerd in geel, zijn het resultaat van de opdracht van hoofdstuk 2.\nDe vergelijkers (of comparatoren), gearceerd in rood, kunnen beschreven worden aan de hand van een demultiplexer zoals die gezien is in hoofdstuk 2.\nShifting Voor het shiften kan een extra woordje uitleg misschien wel helpen. Vaak kan het een hulp zijn om \u0026ldquo;er een tekeningetje bij te maken\u0026rdquo;. Neem, bijvoorbeeld, een shift-left-3 operatie.\nHet gewenste resultaat is dat my_vector verschoven wordt met 3 plaatsen. De waarde die ingeschoven moet worden is \u0026lsquo;0\u0026rsquo;. Er zijn verschillende manieren om dit te beschrijven.\nExpliciet\nmy_shifted_vector(0) \u0026lt;= \u0026#39;0\u0026#39;; my_shifted_vector(1) \u0026lt;= \u0026#39;0\u0026#39;; my_shifted_vector(2) \u0026lt;= \u0026#39;0\u0026#39;; my_shifted_vector(3) \u0026lt;= my_vector(0); my_shifted_vector(4) \u0026lt;= my_vector(1); my_shifted_vector(5) \u0026lt;= my_vector(2); my_shifted_vector(6) \u0026lt;= my_vector(3); my_shifted_vector(7) \u0026lt;= my_vector(4); One-liner\nmy_shifted_vector \u0026lt;= my_vector(4 downto 0) \u0026amp; \u0026#34;000\u0026#34;; Generisch\nzeroes \u0026lt;= (others =\u0026gt; \u0026#39;0\u0026#39;); my_shifted_vector \u0026lt;= my_vector(7-3 downto 0) \u0026amp; zeroes(3-1 downto 0); Indien het gewenste resultaat is dat my_vector verschoven wordt met 3 plaatsen naar rechts, met behoud van het teken; dan dient de sign-bit gekopieerd en ingeschoven te worden. Hiervoor kan een nieuwe vector gemaakt worden die volledige bestaat uit kopies van de tekenbit.\npadding \u0026lt;= (others =\u0026gt; my_vector(7)); my_shifted_vector \u0026lt;= padding(3-1 downto 0) \u0026amp; my_vector(7 downto 3); Merk op dat bovenstaande beschrijving uitgaat van een declaratie (x downto y). Indien je liever werkt met (x to y), moet je de indices aanpassen.\nDe beschrijvingen hierboven leiden tot het correct berekenen van het gewenste resultaat. Dit wordt het datapad genoemd. Het deel van het ontwerp dat ervoor zorgt dat de juiste uitkomsten verschijnen en alle controle signalen juist staan, heet het controlepad.\nControle pad ALUop Resultaat 000 x \u0026amp; y 001 x | y 010 x ^ y 011 x \u0026lt; y ? 1 : 0 (signed) 011 x \u0026lt; y ? 1 : 0 (unsigned) 100 x + y 101 x - y 110 x \u0026lt;\u0026lt; y 111 x \u0026gt;\u0026gt; y (met tekenbehoud) 111 x \u0026gt;\u0026gt; y (zonder tekenbehoud) "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/300_alu/330_opdracht_alu/",
	"title": "Opdracht 3: ALU",
	"tags": [],
	"description": "",
	"content": "De ALU die je moet maken voor deze opdracht, ziet er uit zoals afgebeeld en de entity wordt ook gegeven.\nDe ALU met alle in- en uitgangen entity alu is port( operand1 : in std_logic_vector(31 downto 0); operand2 : in std_logic_vector(31 downto 0); ALUOp : in std_logic_vector(2 downto 0); arith_logic_b : in STD_LOGIC; signed_unsigned_b : in STD_LOGIC; result : out std_logic_vector(31 downto 0); equal : out std_logic; x_lt_y_u : out std_logic; x_lt_y_s : out std_logic ); end entity alu; Een ALU is volledig combinatorisch.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/300_alu/340_testbench_alu/",
	"title": "Opdracht - testbench ALU",
	"tags": [],
	"description": "",
	"content": "Om de juiste werking van de ALU te verifiëren, wordt er opnieuw gebruikt gemaakt van een testbench. Het is een goed idee om tijdens het ontwikkelen van de ALU meteen de functionaliteit te testen. Hiervoor kunnen er heel gericht bepaalde instructies ingesteld worden. Bijvoorbeeld:\nOm 12 + 3 te doen weet je dat inputs de volgende moeten zijn:\noperand1 wordt 12 operand2 wordt 3 de instructie voor de optelling is ALUOp is \u0026ldquo;100\u0026rdquo; signed_unsigned_b is \u0026lsquo;0\u0026rsquo; arith_logic_b is \u0026lsquo;0\u0026rsquo; De uitgangen van de ALU moeten de volgende zijn:\nresult moet 15 zijn ( x\u0026quot;0000000F\u0026quot;) de equal-vlag moet \u0026lsquo;0\u0026rsquo; zijn de x_lt_y_u-vlag moet \u0026lsquo;0\u0026rsquo; zijn de x_lt_y_s-vlag moet \u0026lsquo;0\u0026rsquo; zijn Op deze manier kan je stapsgewijs de testbench opbouwen. Geef hierbij extra aandacht aan de randgevallen. Als jouw implementatie 12 + 3 correct kan berekenen, is de kans groot dat 13 + 3 ook wel zal lukken. De randgevallen zijn het echter wel waard om expliciet te testen. Kan jouw ALU 0xFFFFFFFF + 0xFFFFFFFF correct berekenen? Of -1 - (-1)?\nPSTIM: process begin operand1 \u0026lt;= x\u0026#34;0000000C\u0026#34;; operand2 \u0026lt;= x\u0026#34;00000003\u0026#34;; ALUOp \u0026lt;= \u0026#34;100\u0026#34;; arith_logic_b \u0026lt;= \u0026#39;0\u0026#39;; signed_unsigned_b \u0026lt;= \u0026#39;0\u0026#39;; wait for 2 ns; -- check outputs if result /= x\u0026#34;0000000F\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; if equal /= \u0026#39;0\u0026#39; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; if x_lt_y_u /= \u0026#39;0\u0026#39; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; if x_lt_y_s /= \u0026#39;0\u0026#39; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; wait for 2 ns; wait; end process; Wanneer je denkt alle implementaties gedaan te hebben, kan je een grotere testbench los laten op jouw design. Een voorbeeld hiervan kan je hier downloaden. Deze testbench is, zoals je misschien al vermoedde, gegenereerd. Voor de verbetering van de opdracht wordt een soortgelijke testbench gebruikt.\n... operand1 \u0026lt;= x\u0026#34;8ffb9e07\u0026#34;; -- 2415631879 operand2 \u0026lt;= x\u0026#34;fdcea5ee\u0026#34;; -- 4258178542 ALUOp \u0026lt;= \u0026#34;000\u0026#34;; arith_logic_b \u0026lt;= \u0026#39;0\u0026#39;; signed_unsigned_b \u0026lt;= \u0026#39;0\u0026#39;; wait for 2 ns; -- check outputs if result /= x\u0026#34;8dca8406\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; if equal /= \u0026#39;0\u0026#39; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; if x_lt_y_u /= \u0026#39;1\u0026#39; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; if x_lt_y_s /= \u0026#39;1\u0026#39; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; wait for 2 ns; ... report \u0026#34;DISCH_GRADING (good, bad, total): \u0026#34; \u0026amp; integer\u0026#39;image(good_checks) \u0026amp; \u0026#34; \u0026#34; \u0026amp; integer\u0026#39;image(bad_checks) \u0026amp; \u0026#34; \u0026#34; \u0026amp; integer\u0026#39;image(good_checks + bad_checks) \u0026amp; \u0026#34;\u0026#34; severity note; ... Deze aangeleverde testbench controleert ook of de uitgang gelijk is aan de \u0026ldquo;juiste\u0026rdquo; uitgang. Hiervoor moet het resultaat kloppen, maar ook de relevante flags.\nNa 2 ns wordt elke uitgange vergeleken en wordt ofwel de good_checks teller ofwel de bad_checks teller verhoogd. Op het einde van de testbench worden deze tellers en hun som in de console geprint om een overzicht te krijgen.\nVoorbeeld van de rapportering Voor de verbetering van deze taak wordt een soortgelijke testbench gebruikt. Er wordt enkel gekeken naar de rapportering.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/400_sequentiele_logica/",
	"title": "4. Sequentiële logica",
	"tags": [],
	"description": "",
	"content": "Sequentiële logica Image courtesy: pexels - Oană Andrei "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/400_sequentiele_logica/410_intro_sequentieel/",
	"title": "Intro Sequentiële logica",
	"tags": [],
	"description": "",
	"content": "Zoals er eerder al aangehaald worden alle componenten tegelijkertijd uitgevoerd. Net zoals op een breadboard, zijn alle componenten en poorten gelijktijdig actief. Wanneer het ontwerp complexer wordt, is het bijna onmogelijk om iets realiseren als er geen orde of volgorde is. Hiervoor is het klok-signaal ontstaan. Dit signaal speelt een soortgelijke rol zoals die van een dirigent bij een concert.\nAls we bij combinatorische logica de ingang veranderen, duurt het een zekere tijd voordat dat de uitgang (mogelijks) verandert. Bij sequentiële logica gaan we wachten met de ingang in te lezen tot de stijgende flank van de clock. Als de timings van het design goed zijn dan is de ingang van een systeem altijd stabiel op het moment dat er een stijgende flank van een clock is.\nWe gaan beginnen met een simpele D flip-flop te maken. Het enige dat deze flip-flop doet is de ingang onthouden op de uitgang tot de volgende stijgende flank van de clock.\nSymbool van een D-flipflop Timing van een D-flipflop Onderstaande vhdl code is een voorbeeld van een flip-flop. Het is hier belangrijk om te zien dat bij het process alleen de clock in de sensitivity list zit. Ook al zou jouw buikgevoel zeggen \u0026ldquo;Jamaar, als de input wijzigt moet ook de inhoud van de flipflop wijzigen!!\u0026rdquo; \u0026hellip; toch is dit géén reden om die input in de sensitivity list te zetten. Het enige moment dat er gesampled mag worden, is als de dirigent het zegt. In dit geval is dat op de rising edge van de het kloksignaal.\n-------------------------------- -- Revision Date Author Comments -- v0.1 20240122 VlJo Initial version -------------------------------- library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity D_flipflop is Port ( clock: in std_logic; D: in std_logic; Q: out std_logic); end D_flipflop; architecture Behavioral of D_flipflop is signal clock_i : std_logic; signal D_i : std_logic; signal Q_o : std_logic; begin -------------------------------- -- (DE-)LOCALISING IN/OUTPUTS -------------------------------- clock_i \u0026lt;= clock; D_i \u0026lt;= D; Q \u0026lt;= Q_o; -------------------------------- -- SEQUENTIAL -------------------------------- SEQ: process(clock_i) begin if rising_edge(clock_i) then Q_o \u0026lt;= D_i; end if; end process; end Behavioral; Een alternatief voor if rising_edge(clock_i) then is if clock_i'event and clock_i = '1' then.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/400_sequentiele_logica/420_registers/",
	"title": "Registers",
	"tags": [],
	"description": "",
	"content": "Een register wordt typisch gebruikt om data op te slaan. Een simpel register is een groep van D flipflops waar je data in kan laden en vervolgens data uit kan lezen. Op een stijgende flank van de clock zal, indien het load signaal hoog is, de data van de D ingang op de uitgang Q gezet.\nRegister Parallel in, parallel out "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/400_sequentiele_logica/430_shift_registers/",
	"title": "Shift registers",
	"tags": [],
	"description": "",
	"content": "Shift registers Er zijn verschillende types aan shift registers. Er is de keuze om serieel of parallel in te laden en de keuze om serieel of parallel uit te lezen.\nSoorten shift registers Bron: electronics-club "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/400_sequentiele_logica/430_shift_registers/431_siso/",
	"title": "SISO",
	"tags": [],
	"description": "",
	"content": "SISO Bij een serial in, serial out shift register komt de data erin en iedere clock cyclus wordt het 1 plaats verder geshift. Dus in onderstaand voorbeeld komt de data er na 4 clock cycli terug uit.\nSISO shift register Er zijn verschillende manieren op dit te beschrijven in VHDL. Onderstaande beschrijvingen zijn 2 voorbeelden. Merk hierbij op dat de volgorde dat de buffer beschreven wordt en de toekenning aan de output irrelevant zijn. Alles wordt immers tegelijk uitgevoerd in hardware.\nlibrary IEEE; use IEEE.STD_LOGIC_1164.ALL; entity SISO_shift_register is Port (clock: in std_logic; D: in std_logic; Y: out std_logic); end SISO_shift_register; architecture Behavioral of SISO_shift_register is signal clock_i : STD_LOGIC; signal D_i : STD_LOGIC; signal buf: std_logic_vector(3 downto 0); begin clock_i \u0026lt;= clock; D_i \u0026lt;= D; Y \u0026lt;= buf(3); SEQ: process(clock_i) begin if rising_edge(clock_i) then buf(0) \u0026lt;= D; buf(3 downto 1) \u0026lt;= buf(2 downto 0); end if; end process; end Behavioral; library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity SISO_shift_register is Port (clock: in std_logic; D: in std_logic; Y: out std_logic); end SISO_shift_register; architecture Behavioral of SISO_shift_register is signal clock_i : STD_LOGIC; signal D_i : STD_LOGIC; signal buffer_input, buffer_output: std_logic_vector(0 to 3); begin clock_i \u0026lt;= clock; D_i \u0026lt;= D; Y \u0026lt;= buffer_output(3); buffer_input \u0026lt;= D_i \u0026amp; buf(0 to 2); SEQ: process(clock_i) begin if rising_edge(clock_i) then buffer_output \u0026lt;= buffer_input; end if; end process; end Behavioral; In deze voorbeelden is er geen Y_i signaal. De uitgang Y wordt aangedreven door een signal buf of buffer_output. Het is niet nodig om hier nog een signal aan toe te voegen, maar dat mág altijd.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/400_sequentiele_logica/430_shift_registers/433_piso/",
	"title": "PISO",
	"tags": [],
	"description": "",
	"content": "Een parallel in, serial out shift register wordt gebruikt als er parallelle data is en dit serieel gebruikt moet worden. Hier hebben we wel een load signal nodig om de data in te laden en multiplexer om te zorgen dat de data ook in de flip-flops kan geraken.\nPISO shift register library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity PISO_shift_register is Port (clock: in std_logic; load: in std_logic; data_in: in std_logic_vector(3 downto 0); Y: out std_logic); end PISO_shift_register; architecture Behavioral of PISO_shift_register is signal clock_i : STD_LOGIC; signal load_i : STD_LOGIC; signal data_in_i : std_logic_vector(3 downto 0); signal buf: std_logic_vector(3 downto 0); signal buf_shifted: std_logic_vector(3 downto 0); begin clock_i \u0026lt;= clock; load_i \u0026lt;= load; data_in_i \u0026lt;= data_in; Y \u0026lt;= buf(3); buf_shifted \u0026lt;= buf(2 downto 0) \u0026amp; \u0026#39;-\u0026#39;; -- of -- buf_shifted(3) \u0026lt;= buf(2); -- buf_shifted(2) \u0026lt;= buf(1); -- buf_shifted(1) \u0026lt;= buf(0); -- buf_shifted(0) \u0026lt;= \u0026#39;-\u0026#39;; SEQ: process(clock_i) begin if rising_edge(clock_i) then if load_i = \u0026#39;1\u0026#39; then buf \u0026lt;= data_in_i; else buf \u0026lt;= buf_shifted; end if; end if; end process; end Behavioral; Ter herinnering: \u0026lsquo;U\u0026rsquo; Uninitialized \u0026lsquo;X\u0026rsquo; Forcing Unknown \u0026lsquo;0\u0026rsquo; Forcing 0 \u0026lsquo;1\u0026rsquo; Forcing 1 \u0026lsquo;Z\u0026rsquo; High Impedance \u0026lsquo;W\u0026rsquo; Weak Unknown \u0026lsquo;L\u0026rsquo; Weak 0 \u0026lsquo;H\u0026rsquo; Weak 1 \u0026lsquo;-\u0026rsquo; Don\u0026rsquo;t Care\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/400_sequentiele_logica/430_shift_registers/434_pipo/",
	"title": "PIPO",
	"tags": [],
	"description": "",
	"content": "Bij parallel in, parallel out register (PIPO) komt op de ingang op de uitgang met 1 clock cyclus vertraging.\nPIPO shift register Bron: electronics-club Je kan zelf proberen de beschrijving te maken in VHDL\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/400_sequentiele_logica/430_shift_registers/435_sipo/",
	"title": "SIPO",
	"tags": [],
	"description": "",
	"content": "Serial in, parallel out is een shift register dat gebruikt wordt voor data ontvangst. Meestal komt de data serieel binnen en vaak heeft de volgende stap de data parallel nodig.\nSIPO shift register Je kan zelf proberen de beschrijving te maken in VHDL\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/400_sequentiele_logica/440_reset/",
	"title": "Reset",
	"tags": [],
	"description": "",
	"content": "Bij het maken van een hardware ontwerp dat registers bevat, is het noodzakelijk om de begintoestand te kennen: wat is de initiele waarde? De tekstboek manier om dit te bekomen is door gebruik te maken van een reset signaal. Het actief worden van dit signaal zorgt ervoor dat de hele schakeling in een gekende begintoestand komt. Er zijn typisch 2 manieren om dit te doen: met een synchrone reset of met een asynchrone reset.\nAsynchrone reset Onderstaand voorbeeld is van een D flip-flop met asynchrone reset. Je ziet hier dat de reset onderdeel is van de sensitivity list. De reset staat hier als eerste in het process, maar die volgorde is echter niet van belang. Synchrone reset Onderstaand voorbeeld is van een D flip-flop met synchrone reset. Je ziet hier dat de reset geen onderdeel is van de sensitivity list. De reset staat hier na de if van de stijgende flank van de clock.\nlibrary IEEE; use IEEE.STD_LOGIC_1164.ALL; entity asynchronous_reset is Port ( clock: in std_logic; reset: in std_logic; data_in: in std_logic; data_out: out std_logic ); end asynchronous_reset; architecture Behavioral of asynchronous_reset is signal clock_i: std_logic; signal reset_i: std_logic; signal data_in_i: std_logic; signal data_out_o: std_logic; begin clock_i \u0026lt;= clock; reset_i \u0026lt;= reset; data_in_i \u0026lt;= data_in; data_out \u0026lt;= data_out_o; PREG: process(reset_i, clock_i) begin if reset_i = \u0026#39;1\u0026#39; then data_out_o \u0026lt;= \u0026#39;0\u0026#39;; else if clock_i\u0026#39;event and clock_i = \u0026#39;1\u0026#39; then data_out_o \u0026lt;= data_in_i; end if; end if; end process; end Behavioral; library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity synchronous_reset is Port ( clock: in std_logic; reset: in std_logic; data_in: in std_logic; data_out: out std_logic ); end synchronous_reset; architecture Behavioral of synchronous_reset is signal clock_i: std_logic; signal reset_i: std_logic; signal data_in_i: std_logic; signal data_out_o: std_logic; begin clock_i \u0026lt;= clock; reset_i \u0026lt;= reset; data_in_i \u0026lt;= data_in; data_out \u0026lt;= data_out_o; PREG: process(clock_i) begin if clock_i\u0026#39;event and clock_i = \u0026#39;1\u0026#39; then if reset_i = \u0026#39;1\u0026#39; then data_out_o \u0026lt;= \u0026#39;0\u0026#39;; else data_out_o \u0026lt;= data_in_i; end if; end if; end process; end Behavioral; Welke reset gebruik je nu best? Dat hangt af van de toepassing. De tabel hieronder vergelijkt enkele belangrijkte criteria.\nAsynchrone reset Synchrone reset Voorspelbaarheid Kan op ieder moment komen, dus ook dicht bij klokflanken. Voorspelbaar (bv. bij een stijgende klokflank) Glitches \u0026hellip; kunnen een catastrofaal effect hebben omdat ze vals-positief kunnen geven. worden (tot op zeker hoogte) opgevangen Timing \u0026hellip; is gemakklijker om te halen aangezien de reset niet meegenomen wordt in de timing-analyse. is moeilijker om te behalen want de reset signalen kunnen een hoge fan-out hebben. De afwezigheid van de klok \u0026hellip; heeft géén impact. zorgt dat een reset niet gezien wordt. De vuistregel voor (beginnende) hardware designers is om een asynchrone reset ENKEL te gebruiken waar het niet anders kan (bv. bij IP blokken van third-parties), maar waar mogelijk (en zeker voor FPGA ontwerp) wordt aangeraden om een synchrone reset te gebruiken.\nVoor sequentiële processen zijn er maximaal 2 signalen (clock en eventueel reset) die in de sensitivity list staan. Bij combinatorische processen zijn het alle ingangs-signalen.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/400_sequentiele_logica/450_morereg/",
	"title": "Meerdere registers",
	"tags": [],
	"description": "",
	"content": "Het aantal ontwerpen dat je ooit zal maken dat minder dan 2 registers heeft, zal eerder beperkt zijn. Het beschrijven van registers neemt nogal wat regels HDL code in beslag. Stel dat er 2 registers in een design zijn: regA en regB. Een VHDL beschrijving van dit design zal ergens onderstaande twee stukken code bevatten.\nPREGA: process(clock_i) begin if rising_edge(clock_i) then if reset_i = \u0026#39;1\u0026#39; then regA \u0026lt;= (others =\u0026gt; \u0026#39;0\u0026#39;); else if load_A = \u0026#39;1\u0026#39; then regA \u0026lt;= regA_in; end if; end if; end if; end process; PREGB: process(clock_i) begin if rising_edge(clock_i) then if reset_i = \u0026#39;1\u0026#39; then regB \u0026lt;= (others =\u0026gt; \u0026#39;0\u0026#39;); else if load_B = \u0026#39;1\u0026#39; then regB \u0026lt;= regB_in; end if; end if; end if; end process; Beide registers hebben een synchrone, actief hoge reset. Als, op een rising edge, de respectievelijke load signalen hoog zijn, zullen de register de inkomende data samplen..\nMerk op dat labels niet dubbel gebruikt mogen worden. De 2 labels in bovenstaand voorbeeld zijn PREGA en PREGB.\nEen compactere manier om deze twee registers te beschrijven is hier weergegeven. Aangezien de 2 beschrijvingen van register A en register B veel op elkaar lijken, kunnen deze beschrijvingen gemakkelijk samengenomen worden.\nExtra aandacht moet besteed worden aan de if-then(-else) structuur. Wees jezelf er bewust van dat (in dit voorbeeld) het load_A signaal totaal geen effect heeft op register B. Er mag dus géén else gebruikt worden.\nDit zou echter geen syntax-fouten geven.\nMet een else-beschrijving zou er immers beschreven worden dat register B enkel mag laden als load_A laag is EN load_B hoog is. Dit is een perfect plausible gedrag, maar niet het gedrag dat in dit voorbeeld beoogd is.\nPREGAB: process(clock_i) begin if rising_edge(clock_i) then if reset_i = \u0026#39;1\u0026#39; then regA \u0026lt;= (others =\u0026gt; \u0026#39;0\u0026#39;); regB \u0026lt;= (others =\u0026gt; \u0026#39;0\u0026#39;); else if load_A = \u0026#39;1\u0026#39; then regA \u0026lt;= regA_in; end if; if load_B = \u0026#39;1\u0026#39; then regB \u0026lt;= regB_in; end if; end if; end if; end process; "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/400_sequentiele_logica/461_opdracht/",
	"title": "Opdracht 4: Register file",
	"tags": [],
	"description": "",
	"content": " Na het maken van de ALU in de vorige opdracht, moet er voor opdracht 4 een Register file gemaakt worden.\nEen register file is een onderdeel van een processor dat eigenlijk niet veel meer bevat dan een set registers. De specificaties van de register file voor deze opdracht zijn als volgt:\nde data-breedte is 32 bits er zijn 8 registers in de register file de reg file beschikt over 2 lees-poorten src1 \u0026amp; data1 src2 \u0026amp; data2 de reg file beschikt over 1 schrijf-poort dest, data \u0026amp; we Blokschema van de register file Waveform van de register file Voor de lees-poorten wordt de src_x input gebruikt om de inhoud van het overeenkomende registeraan de data_x uitgang te zetten. Beide leespoorten werken onafhankelijk van elkaar. Voor de schrijf-poort wordt de inhoud op de data input gekopieerd naar het register dat aangeduid wordt met ingang dest op voorwaarde dat de write enable hoog is. Entity van de register file entity regfile is generic ( G_WIDTH : natural := 32; -- Breedte van de registers G_REGCOUNT_LOG2 : natural := 3 -- log2(# registers) ); port( clock : in STD_LOGIC; reset : in STD_LOGIC; we : in std_logic; src1 : in std_logic_vector(G_REGCOUNT_LOG2-1 downto 0); src2 : in std_logic_vector(G_REGCOUNT_LOG2-1 downto 0); dest : in std_logic_vector(G_REGCOUNT_LOG2-1 downto 0); data : in std_logic_vector(G_WIDTH-1 downto 0); data1 : out std_logic_vector(G_WIDTH-1 downto 0); data2 : out std_logic_vector(G_WIDTH-1 downto 0) ); end entity regfile; Don\u0026rsquo;t Panic! Het zou kunnen dat het bovenstaande schema er nogal \u0026ldquo;druk en overweldigend\u0026rdquo; uitziet \u0026hellip; en dat is perfect ok. Dit is ook nog maar de 4 opdracht die er gemaakt moet worden. Als een probleem te groot lijkt, helpt het vaak om het op te delen in kleindere problemen die gemakkelijker te overwinnen zijn.\nBlokschema van de register file De tweede leespoort, is gewoon een kopie van de eerste leespoort.\nDe tweede leespoort weglaten is een gemakkelijke tussenstap.\nDe n-1 registers zijn allemaal gelijkaardig aan het ne register.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/400_sequentiele_logica/470_tb_opdracht/",
	"title": "Opdracht - testbench",
	"tags": [],
	"description": "",
	"content": "Een variant van deze testbench wordt gebruikt voor de evaluatie.\n-------------------------------------------------------------------------------- -- KU Leuven - ESAT/COSIC - Emerging technologies, Systems \u0026amp; Security -------------------------------------------------------------------------------- -- Module Name: regfile_tb - Behavioural -- Project Name: Testbench for regfile -- Description: Testbench for the register file -- -- Revision Date Author Comments -- v0.1 20250731 VlJo Initial version -- -------------------------------------------------------------------------------- library IEEE; use IEEE.STD_LOGIC_1164.ALL; -- use IEEE.NUMERIC_STD.ALL; entity regfile_tb is generic ( G_WIDTH : natural := 32; -- Width of the registers G_REGCOUNT_LOG2 : natural := 3 -- log2(C_REGCOUNT) ); end entity regfile_tb; architecture Behavioural of regfile_tb is component regfile is generic ( G_WIDTH : natural := 32; -- Width of the registers G_REGCOUNT_LOG2 : natural := 3 -- log2(C_REGCOUNT) ); port( clock : in STD_LOGIC; reset : in STD_LOGIC; we : in std_logic; src1 : in std_logic_vector(G_REGCOUNT_LOG2-1 downto 0); src2 : in std_logic_vector(G_REGCOUNT_LOG2-1 downto 0); dest : in std_logic_vector(G_REGCOUNT_LOG2-1 downto 0); data : in std_logic_vector(G_WIDTH-1 downto 0); data1 : out std_logic_vector(G_WIDTH-1 downto 0); data2 : out std_logic_vector(G_WIDTH-1 downto 0) ); end component regfile; signal clock_i : STD_LOGIC; signal reset_i : STD_LOGIC; signal we : STD_LOGIC; signal src1 : STD_LOGIC_VECTOR(G_REGCOUNT_LOG2-1 downto 0); signal src2 : STD_LOGIC_VECTOR(G_REGCOUNT_LOG2-1 downto 0); signal dest : STD_LOGIC_VECTOR(G_REGCOUNT_LOG2-1 downto 0); signal data : STD_LOGIC_VECTOR(G_WIDTH-1 downto 0); signal data1 : STD_LOGIC_VECTOR(G_WIDTH-1 downto 0); signal data2 : STD_LOGIC_VECTOR(G_WIDTH-1 downto 0); constant clock_period : time := 10 ns; begin ------------------------------------------------------------------------------- -- STIMULI ------------------------------------------------------------------------------- PSTIM: process variable good_checks : natural; variable bad_checks : natural; begin we \u0026lt;= \u0026#39;0\u0026#39;; src1 \u0026lt;= \u0026#34;000\u0026#34;; src2 \u0026lt;= \u0026#34;000\u0026#34;; dest \u0026lt;= \u0026#34;000\u0026#34;; data \u0026lt;= (others =\u0026gt; \u0026#39;0\u0026#39;); good_checks := 0; bad_checks := 0; wait until clock_i = \u0026#39;1\u0026#39;; wait until clock_i = \u0026#39;0\u0026#39;; wait for clock_period * 10; -- do readback ----------------------------------------------------------------------------- src1 \u0026lt;= \u0026#34;000\u0026#34;; wait for clock_period; if data1 /= x\u0026#34;00000000\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; src1 \u0026lt;= \u0026#34;001\u0026#34;; wait for clock_period; if data1 /= x\u0026#34;00000000\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; src1 \u0026lt;= \u0026#34;010\u0026#34;; wait for clock_period; if data1 /= x\u0026#34;00000000\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; src1 \u0026lt;= \u0026#34;011\u0026#34;; wait for clock_period; if data1 /= x\u0026#34;00000000\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; src1 \u0026lt;= \u0026#34;100\u0026#34;; wait for clock_period; if data1 /= x\u0026#34;00000000\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; src1 \u0026lt;= \u0026#34;101\u0026#34;; wait for clock_period; if data1 /= x\u0026#34;00000000\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; src1 \u0026lt;= \u0026#34;110\u0026#34;; wait for clock_period; if data1 /= x\u0026#34;00000000\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; src1 \u0026lt;= \u0026#34;111\u0026#34;; wait for clock_period; if data1 /= x\u0026#34;00000000\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; -- do write sweep ----------------------------------------------------------------------------- data \u0026lt;= x\u0026#34;00000001\u0026#34;; dest \u0026lt;= \u0026#34;001\u0026#34;; we \u0026lt;= \u0026#39;1\u0026#39;; wait for clock_period; data \u0026lt;= x\u0026#34;00000002\u0026#34;; dest \u0026lt;= \u0026#34;010\u0026#34;; we \u0026lt;= \u0026#39;1\u0026#39;; wait for clock_period; data \u0026lt;= x\u0026#34;00000003\u0026#34;; dest \u0026lt;= \u0026#34;011\u0026#34;; we \u0026lt;= \u0026#39;1\u0026#39;; wait for clock_period; data \u0026lt;= x\u0026#34;00000004\u0026#34;; dest \u0026lt;= \u0026#34;100\u0026#34;; we \u0026lt;= \u0026#39;1\u0026#39;; wait for clock_period; data \u0026lt;= x\u0026#34;00000005\u0026#34;; dest \u0026lt;= \u0026#34;101\u0026#34;; we \u0026lt;= \u0026#39;1\u0026#39;; wait for clock_period; data \u0026lt;= x\u0026#34;00000006\u0026#34;; dest \u0026lt;= \u0026#34;110\u0026#34;; we \u0026lt;= \u0026#39;1\u0026#39;; wait for clock_period; data \u0026lt;= x\u0026#34;00000007\u0026#34;; dest \u0026lt;= \u0026#34;111\u0026#34;; we \u0026lt;= \u0026#39;1\u0026#39;; wait for clock_period; -- do readback ----------------------------------------------------------------------------- src1 \u0026lt;= \u0026#34;000\u0026#34;; wait for clock_period; if data1 /= x\u0026#34;00000000\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; src1 \u0026lt;= \u0026#34;001\u0026#34;; wait for clock_period; if data1 /= x\u0026#34;00000001\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; src1 \u0026lt;= \u0026#34;010\u0026#34;; wait for clock_period; if data1 /= x\u0026#34;00000002\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; src1 \u0026lt;= \u0026#34;011\u0026#34;; wait for clock_period; if data1 /= x\u0026#34;00000003\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; src1 \u0026lt;= \u0026#34;100\u0026#34;; wait for clock_period; if data1 /= x\u0026#34;00000004\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; src1 \u0026lt;= \u0026#34;101\u0026#34;; wait for clock_period; if data1 /= x\u0026#34;00000005\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; src1 \u0026lt;= \u0026#34;110\u0026#34;; wait for clock_period; if data1 /= x\u0026#34;00000006\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; src1 \u0026lt;= \u0026#34;111\u0026#34;; wait for clock_period; if data1 /= x\u0026#34;00000007\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; -- do write sweep ----------------------------------------------------------------------------- data \u0026lt;= x\u0026#34;FFFFFFFF\u0026#34;; dest \u0026lt;= \u0026#34;001\u0026#34;; we \u0026lt;= \u0026#39;0\u0026#39;; wait for clock_period; data \u0026lt;= x\u0026#34;FFFFFFFF\u0026#34;; dest \u0026lt;= \u0026#34;010\u0026#34;; we \u0026lt;= \u0026#39;0\u0026#39;; wait for clock_period; data \u0026lt;= x\u0026#34;FFFFFFFF\u0026#34;; dest \u0026lt;= \u0026#34;011\u0026#34;; we \u0026lt;= \u0026#39;0\u0026#39;; wait for clock_period; data \u0026lt;= x\u0026#34;FFFFFFFF\u0026#34;; dest \u0026lt;= \u0026#34;100\u0026#34;; we \u0026lt;= \u0026#39;0\u0026#39;; wait for clock_period; data \u0026lt;= x\u0026#34;FFFFFFFF\u0026#34;; dest \u0026lt;= \u0026#34;101\u0026#34;; we \u0026lt;= \u0026#39;0\u0026#39;; wait for clock_period; data \u0026lt;= x\u0026#34;FFFFFFFF\u0026#34;; dest \u0026lt;= \u0026#34;110\u0026#34;; we \u0026lt;= \u0026#39;0\u0026#39;; wait for clock_period; data \u0026lt;= x\u0026#34;FFFFFFFF\u0026#34;; dest \u0026lt;= \u0026#34;111\u0026#34;; we \u0026lt;= \u0026#39;0\u0026#39;; wait for clock_period; -- do readback ----------------------------------------------------------------------------- src1 \u0026lt;= \u0026#34;000\u0026#34;; wait for clock_period; if data1 /= x\u0026#34;00000000\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; src1 \u0026lt;= \u0026#34;001\u0026#34;; wait for clock_period; if data1 /= x\u0026#34;00000001\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; src1 \u0026lt;= \u0026#34;010\u0026#34;; wait for clock_period; if data1 /= x\u0026#34;00000002\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; src1 \u0026lt;= \u0026#34;011\u0026#34;; wait for clock_period; if data1 /= x\u0026#34;00000003\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; src1 \u0026lt;= \u0026#34;100\u0026#34;; wait for clock_period; if data1 /= x\u0026#34;00000004\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; src1 \u0026lt;= \u0026#34;101\u0026#34;; wait for clock_period; if data1 /= x\u0026#34;00000005\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; src1 \u0026lt;= \u0026#34;110\u0026#34;; wait for clock_period; if data1 /= x\u0026#34;00000006\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; src1 \u0026lt;= \u0026#34;111\u0026#34;; wait for clock_period; if data1 /= x\u0026#34;00000007\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; -- do write sweep ----------------------------------------------------------------------------- data \u0026lt;= x\u0026#34;FFFFFFFF\u0026#34;; dest \u0026lt;= \u0026#34;001\u0026#34;; we \u0026lt;= \u0026#39;1\u0026#39;; wait for clock_period; data \u0026lt;= x\u0026#34;FFFFFFFF\u0026#34;; dest \u0026lt;= \u0026#34;010\u0026#34;; we \u0026lt;= \u0026#39;1\u0026#39;; wait for clock_period; data \u0026lt;= x\u0026#34;FFFFFFFF\u0026#34;; dest \u0026lt;= \u0026#34;011\u0026#34;; we \u0026lt;= \u0026#39;1\u0026#39;; wait for clock_period; data \u0026lt;= x\u0026#34;FFFFFFFF\u0026#34;; dest \u0026lt;= \u0026#34;100\u0026#34;; we \u0026lt;= \u0026#39;1\u0026#39;; wait for clock_period; data \u0026lt;= x\u0026#34;FFFFFFFF\u0026#34;; dest \u0026lt;= \u0026#34;101\u0026#34;; we \u0026lt;= \u0026#39;1\u0026#39;; wait for clock_period; data \u0026lt;= x\u0026#34;FFFFFFFF\u0026#34;; dest \u0026lt;= \u0026#34;110\u0026#34;; we \u0026lt;= \u0026#39;1\u0026#39;; wait for clock_period; data \u0026lt;= x\u0026#34;FFFFFFFF\u0026#34;; dest \u0026lt;= \u0026#34;111\u0026#34;; we \u0026lt;= \u0026#39;1\u0026#39;; wait for clock_period; -- do readback ----------------------------------------------------------------------------- src2 \u0026lt;= \u0026#34;000\u0026#34;; wait for clock_period; if data2 /= x\u0026#34;00000000\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; src2 \u0026lt;= \u0026#34;001\u0026#34;; wait for clock_period; if data2 /= x\u0026#34;FFFFFFFF\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; src2 \u0026lt;= \u0026#34;010\u0026#34;; wait for clock_period; if data2 /= x\u0026#34;FFFFFFFF\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; src2 \u0026lt;= \u0026#34;011\u0026#34;; wait for clock_period; if data2 /= x\u0026#34;FFFFFFFF\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; src2 \u0026lt;= \u0026#34;100\u0026#34;; wait for clock_period; if data2 /= x\u0026#34;FFFFFFFF\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; src2 \u0026lt;= \u0026#34;101\u0026#34;; wait for clock_period; if data2 /= x\u0026#34;FFFFFFFF\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; src2 \u0026lt;= \u0026#34;110\u0026#34;; wait for clock_period; if data2 /= x\u0026#34;FFFFFFFF\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; src2 \u0026lt;= \u0026#34;111\u0026#34;; wait for clock_period; if data2 /= x\u0026#34;FFFFFFFF\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; report \u0026#34;DISCH_GRADING (good, bad, total): \u0026#34; \u0026amp; integer\u0026#39;image(good_checks) \u0026amp; \u0026#34; \u0026#34; \u0026amp; integer\u0026#39;image(bad_checks) \u0026amp; \u0026#34; \u0026#34; \u0026amp; integer\u0026#39;image(good_checks + bad_checks) \u0026amp; \u0026#34;\u0026#34; severity note; wait; end process; ------------------------------------------------------------------------------- -- DUT ------------------------------------------------------------------------------- DUT: component regfile generic map( G_WIDTH =\u0026gt; G_WIDTH, G_REGCOUNT_LOG2 =\u0026gt; G_REGCOUNT_LOG2 ) port map( clock =\u0026gt; clock_i, reset =\u0026gt; reset_i, we =\u0026gt; we, src1 =\u0026gt; src1, src2 =\u0026gt; src2, dest =\u0026gt; dest, data =\u0026gt; data, data1 =\u0026gt; data1, data2 =\u0026gt; data2 ); ------------------------------------------------------------------------------- -- CLOCK ------------------------------------------------------------------------------- PCLK: process begin clock_i \u0026lt;= \u0026#39;1\u0026#39;; wait for clock_period/2; clock_i \u0026lt;= \u0026#39;0\u0026#39;; wait for clock_period/2; end process PCLK; ------------------------------------------------------------------------------- -- RESET ------------------------------------------------------------------------------- PRST: process begin reset_i \u0026lt;= \u0026#39;1\u0026#39;; wait for clock_period*9; wait for clock_period/2; reset_i \u0026lt;= \u0026#39;0\u0026#39;; wait; end process PRST; end Behavioural; "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/500_cpu/",
	"title": "5. RISC-V-like CPU",
	"tags": [],
	"description": "",
	"content": "CPU Image courtesy: pexels - Shawn Stutzman "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/500_cpu/510_intro_cpu/",
	"title": "Een CPU maken",
	"tags": [],
	"description": "",
	"content": "Zoals in het begin van deze lessenreeks reeds vermeld, is het uiteindelijke doel het maken van een processor. In de voorbije labo\u0026rsquo;s is hiervoor de basis gelegd.\nEen processor kan, met een beetje fantasie, gezien worden als een chef-kok die een recept maakt. De chef volgt het recept stap voor stap.\nSchuif een latje of blaadje naar onder voor de volgende regel van het recept te bepalen, lees de volgende regel in het recept, probeer te ontcijferen wat deze instructie wilt zeggen, en voer de instructie uit. Een processor doet hetzelfde rondje als de chef:\nVerhoog de program counter, haal de volgende instructie van het programma op uit geheugen, decodeer de instructie, en voer de instructie uit. Image courtesy: Microsoft Copilot - Untitled De figuur hieronder geeft het blokschema weer van processor die er gemaakt dient te worden. De groene blokken in het blokschema zijn componenten die gemaakt zijn in voorgaande hoofdstukken. De rode blokken in het blokschema zijn componenten die voor jullie gemaakt zijn. Wat er nog rest is de (blauwe blok): de program counter.\nProgrammeren is de kunst om goede recepten op te stellen. Deze zullen aan de hand van tools vertaald worden naar recepten die de processor kan uitvoeren.\nHoge(-re) programmeertaal Software wordt geschreven in een hoge(-re) programmeertaal. Denk bijvoorbeel aan Python, Java, C, Rust, of GO.\nAssembly De software wordt aan de hand van een aantal tussenstappen (afhankelijk van het abstractieniveau van de taal) omgezet naar assembly code. Dit wordt gedaan door een interpreter of een compiler .\nMachinetaal De assembler zet tenslotte de gegeneerde assembly om naar machine code\nDe uiteindelijke machinetaal zal uiteraard afhangen van de processor die deze instructies moet uitvoeren. ISA staat voor Instruction set architecture en beschrijft hoe instructies opgebouwd moeten worden zodat de CPU deze kan uitvoeren.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/500_cpu/520_pc/",
	"title": "Program counter",
	"tags": [],
	"description": "",
	"content": "De program counter is als vingertje van een kind dat leert lezen. Het duidt aan waar het gebleven is, welke regel er gelezen moet worden. Dit is ook de functie van de program counter (PC). De PC duidt aan welke instructie er momenteel uitgevoerd wordt. Wanneer de instructie uitgevoerd is, moet de vinger een plaats verschoven worden.\nDe program counter houdt de regelnummer naar de juiste instructie bij. Deze staat opgeslagen in een 32-bit breed register. Na het uitvoeren van een instructie dient de PC verhoogd te worden met 0x4.\nIn een programma wordt er ook vaak een sprong gedaan. Dit wilt zeggen dat de program counter een stuk verderop (of terug) moet gaan voor de volgende instructie aan te duiden. In de hardware kan dit geïmplementeerd worden door de controle signalen correct aan te sturen.\nWaarom 0x4? Het is je misschien opgevallen dat er bij een verhoging van de progam counter, verhoogd wordt met 0x4. Alhoewel dit verwarrend kan overkomen is de reden hiervoor echter simpel.\nHet geheugen waarin het programma opgeslagen zit, werkt op byte-niveau. Dit wilt zeggen: iedere byte die opgeslagen is, is bereikbaar op één welbepaald adres.\nDe processor werkt echter met een 32-bit bus. Dit wilt zeggen dat er altijd 32 bits (of 4 bytes) gelezen en/of geschreven worden. Aangezien een de breedte van 1 instructie ook 32 bits is, komt dit dus overeen met 1 overdracht over de bus. Dit wilt echter ook zeggen dat de volgende instructie 4 addressen verder staat.\n\u0026hellip; start your engines Voordat de processor geïmplementeerd kan worden, moet dus eerst de program counter gemaakt worden. In het volgende hoofdstuk wordt er in detail ingegaan op de program counter. Voorlopig is het voldoende dat de program counter gewoon optelt met stappen van 4.\nDe entity voor de program counter er als volgt uit.\nclock en synchrone, actief hoge reset twee 32-bit data ingangen één 32-bit data uitgang 2 controle signalen: abs_rel_b is \u0026lsquo;1\u0026rsquo; bij een absolute sprong en \u0026lsquo;0\u0026rsquo; bij een relatieve immediate_four_b is \u0026lsquo;1\u0026rsquo; voor een relatieve sprong met offset en \u0026lsquo;0\u0026rsquo; bij een (standaard) sprong met 4 entity program_counter is port( clock : in STD_LOGIC; reset : in STD_LOGIC; abs_rel_b: in std_logic; immediate_four_b: in std_logic; rs1 : in std_logic_vector(31 downto 0); immediate : in std_logic_vector(31 downto 0); data_out : out std_logic_vector(31 downto 0) ); end entity program_counter; De enige poorten die nodig zijn in dit hoofdstuk zijn:\nclock synchrone, actief hoge reset data_out (de waarde van de program counter) Je kan de ripple carry adder van opdracht 2 gebruiken.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/500_cpu/530_integrate/",
	"title": "Integratie",
	"tags": [],
	"description": "",
	"content": "Met het laatste ontbrekende bouwblokje (de program counter (PC)) geïmplementeerd, is het tijd om alles te integreren.\nEen RISC-V processor heeft verschillende types van instructies. Om de zaken niet nodeloos complex te maken, wordt er voor deze implementatie enkel naar R-type (een deel van) de I-type instructies gekeken.\nEen I-type instructie (althans het deel van de I-types die in scoop ligt) voert een ALU operatie uit met 1 register en 1 argument Een R-type instructie voert een ALU operatie uit met 2 registers Hier zijn 4 assembly instructies. Hoe deze uitgevoerd worden door de processor wordt hieronder uitgelegd.\n0x0: addi x1, x0, 1 0x4: addi x2, x0, 1 0x8: add x3, x2, x1 0xC: add x4, x3, x2 Tel 1 op bij register 0 (x0) en sla het resultaat op in register 1 (x1) Tel 1 op bij register 0 (x0) en sla het resultaat op in register 2 (x2) Tel de inhouden van registers 2 (x2) en 1 (x1) op en sla de som op in register 3 (x3) Tel de inhouden van registers 3 (x3) en 2 (x2) op en sla de som op in register 4 (x4) De PC start op 0x0. Deze waarde wordt aan het instructie geheugen gegeven en deze stuurt de instructie addi x1, x0, 1 terug. De control blok ontleedt de instructie en maakt de bijpassende controle-signalen:\nde selectie-signalen van de register file voor beide operanden de keuze van de operatie van de ALU de keuze voor de tweede operand die naar de ALU gaat de aansturing van de write-enable van de register file de aansturing van de register selectie voor de opslag van het resultaat de correcte instructie voor de PC Hierdoor geeft de register file de juiste waardes, ontvangt de ALU de correcte operanden om de instructie op uit te voeren en wordt het resultaat op de juiste plaats weggeschreven.\nDe tabel hieronder illustreert hoe de waardes veranderen in de implementatie.\nIn simulatie ziet er dit ongeveer als volgt uit: De inhoud van register 0 (x0) MAG nooit overschreven worden en zal altijd de waarde 0x0 hebben.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/500_cpu/550_opdracht/",
	"title": "Opdracht 5: Processor",
	"tags": [],
	"description": "",
	"content": "Voor deze opdracht is het de bedoeling om zelf de processor te maken. Je mag, maar dit is niet verplicht, eerder gebruikte code (voor ALU, program counter, \u0026hellip;) hergebruiken.\nentity processor is port( clock : in STD_LOGIC; reset : in STD_LOGIC; pc : out STD_LOGIC_VECTOR(31 downto 0); inst : in STD_LOGIC_VECTOR(31 downto 0) ); end entity processor; De controle blok kan hier gedownload worden. Hieronder vind je een woordje uitleg over de poorten van de controle blok.\nPoort naam Dimensie en richting Bron / Doel Uitleg inst 32-bit input van IMEM de instructie die uitgevoerd moet worden alu_equal 1-bit input van ALU de vlag die aangeeft dat de twee operanden gelijk zijn alu_x_lt_y_s 1-bit input van ALU de vlag die aangeeft dat de x kleiner is dan y (als er uitgegaan wordt van signed getallen alu_x_lt_y_u 1-bit input van ALU de vlag die aangeeft dat de x kleiner is dan y (als er uitgegaan wordt van unsigned getallen abs_rel_b 1-bit output naar PC controle-signaal dat aanduidt of er absolute (\u0026lsquo;1\u0026rsquo;) of relatieve sprong (\u0026lsquo;0\u0026rsquo;) is immediate_four_b 1-bit output naar PC controle-signaal dat aanduidt of de relatieve sprong immediate (\u0026lsquo;1\u0026rsquo;) of 0x4 (\u0026lsquo;0\u0026rsquo;) gebruikt als tweede operand immediate 32-bit output naar PC en ALU data die: de grootte van de relatieve sprong immediate aangeeft (PC)de tweede operand aanbiedt (ALU) regfile_we 1-bit output naar register file controle-signaal dat de write-enable stuurt van de register file alu_op 3-bit output naar ALU controle-signaal de operatie van de ALU kiest alu_arith_logic_b 1-bit output naar ALU controle-signaal dat het onderscheid maakt tussen een arithmetische (\u0026lsquo;1\u0026rsquo;) en een logische (\u0026lsquo;0\u0026rsquo;) operatie alu_signed_unsigned_b 1-bit output naar ALU controle-signaal dat het onderscheid maakt tussen een signed (\u0026lsquo;1\u0026rsquo;) en een unsigned (\u0026lsquo;0\u0026rsquo;) operatie second_operand_selector 1-bit output naar multiplexer controle-signaal dat de selectie maakt van de MUX (\u0026lsquo;1\u0026rsquo; voor de 32-bit immediate bus ; \u0026lsquo;0\u0026rsquo; voor de tweede data uitgang van register file), die de tweede operand bepaalt van de ALU "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/500_cpu/560_testbench/",
	"title": "Opdracht - testbench",
	"tags": [],
	"description": "",
	"content": "Zoals bij voorgaande opdrachten, wordt ook bij deze opdracht een testbench voorzien. Een blokdiagramma van de testbench ziet er als volgt uit en kan hier worden gedownload.\nHet \u0026ldquo;programma\u0026rdquo; zorgt ervoor dat het begin van de Fibonnacci reeks berekend wordt in de eerste 8 registers.\nJe kan in de simulator de Radix aanpassen. Hierdoor kan de weergave op \u0026ldquo;Unsigned decimal\u0026rdquo; zetten.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/600_binst/",
	"title": "6. B-instructies",
	"tags": [],
	"description": "",
	"content": "B-instructies Image courtesy: pexels - Jill Wellington "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/600_mult/610_cijferend_mul/",
	"title": "Cijferend vermenigvuldigen",
	"tags": [],
	"description": "",
	"content": "Weet je nog? Cijfer-rekenen op de lagere school? Misschien had je nooit gedacht dat je dit nog ooit nodig had, maar nu zit je hier \u0026#x1f609;.\nVoor zij die het zich niet meer helemaal herinneren is hier een snelle opfrissing. De 123 heet de vermenigvuldiger en de 45 het het vermenigvuldigtal. Het protocol:\nbegin met het meest linkse karakter van het vermenigvuldigtal (rood) vermenigvuldig dit, van links naar rechts, met ieder karakter van de de vermendigvuldiger noteer het partiële produkt schuif 1 karakter naar rechts in het vermenigvuldigtal (blauw) herhaal stap 2. noteer het partiële produkt, maar begin 1 karakter meer naar links herhaal de stappen 4- 6 tot het vermenigvuldigtal helemaal afgehandeld is Tel, tenslotte, alle partiële produkten op Waarom moet dit opgefrist worden? Het doel hiervan is dat er extra functionaliteit toegevoegd dient te worden aan de ALU: de vermenigvuldiging. Eerder in deze labo\u0026rsquo;s is er gekeken hoe een optelling uitgevoerd kan worden in hardware. Voor de vermenigvuldiging wordt een gelijkaardig pad gevolgd. Een mogelijke manier om dit te implementeren verschilt namelijk niet veel van de de manuele manier in het voorbeeld hierboven.\nbegin met de meest linkse bit van het vermenigvuldigtal (rood) vermenigvuldig dit, van links naar rechts, met iedere bit van de de vermendigvuldiger noteer het partiële produkt schuif 1 karakter naar rechts in het vermenigvuldigtal (blauw) herhaal stap 2. noteer het partiële produkt, maar begin 1 karakter meer naar links (ook geel en groen ) herhaal de stappen 4- 6 tot het vermenigvuldigtal helemaal afgehandeld is Tel, tenslotte, alle partiële produkten op Enkele opmerkingen die gemaakt kunnen worden:\nmerk op dat het recept hetzelfde blijft voor binair als met decimaal wat is het effect van de breedte van de inputs op de breedte van produkt? een n-bit getal plus een n-bit getal wordt een n+1-bit getal een n-bit getal maal een n-bit getal wordt een \u0026hellip; 2n-bit getal wat is het aantal verschillende uitkomsten dat een partieel produkt kan hebben? "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/600_binst/610_jumps/",
	"title": "Jumps",
	"tags": [],
	"description": "",
	"content": "Tot hiertoe liep het programma gelijk een recept in de keuken. Iedere stap werd één-voor-één uitgevoerd. Iets geavanceerdere software (met de nadruk op iets) breken met dit principe. Af en toe wordt er een sprong uitgevoerd. Dit is zelfs al het geval bij een simpele if-constructie.\nif (a_certain_variable == 16) { do_something(); } else { do_something_else(); } 138:\t01000293 addi t0,zero,16 13c:\t00531463 bne\tt1,t0,144 \u0026lt;do_something_else\u0026gt; /* this is do_something */ 140:\t00628333 add\tt1,t0,t1 00000144 \u0026lt;do_something_else\u0026gt;: 144:\t006282b3 add\tt0,t0,t1 In dit voorbeeld wordt er een conditionele jump gedaan. Dit is een sprong in het recept, mits er aan een bepaalde voorwaarde al-dan-niet voldaan is. De voorwaarde in het voorbeeld is: is deze waarde gelijk aan 16.\nIndien er aan de voorwaarde voldaan is, wordt er een bepaalde instructie (of reeks van instructies) uitgevoerd. Indien er niet aan de voorwaarde voldaan is, wordt een andere (set van) instructie(s) uitgevoerd. De pijlen in de tekening de volgorde van de instructies aan en illustreren hoe er een sprong gemaakt wordt.\nIn de tekening ontbreekt 1 sprong. Welke?\nDe processor die gemaakt wordt, moet dit soort jumps ook kunnen faciliteren. Dit wordt gedaan door de program counter niet, na elke instructie, te verhogen met 0x4; maar door (wanneer nodig) een andere offset op te tellen of zelfs een volledige load te doen van de 32 bits van de PC.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/600_binst/620_details/",
	"title": "Details",
	"tags": [],
	"description": "",
	"content": " Voordat je (ongetwijfeld met vol enthousiasme) een Vivado project maakt en code begint te schijven, blijft het belangrijk om eerst een design te maken!!\nHiernaast wordt de volledige set van instructie voor de RISC-V weergeven. Om precies te zijn, dit is de volledige set van instructie voor de basis RISC-V 32i (RV32i) instructies.\nIn deze lijst zijn er 8 instructies die een effect hebben op de program counter. De eerste 6 gemarkeerde instructies zijn de conditional branch instructies: beq, bne, blt, bge, bltu en bgeu. Bij deze instructies zal er (indien aan de vooropgestelde voorwaarde voldaan is) een relatieve jump gebeuren. Het adres waarnaar er gesprongen wordt is een offset ten opzichte van de huidige waarde van de program counter. Bij de laatste gemarkeerde instructies kan een relatieve jump en een absolute jump gedaan worden.\nEr kan dus geconcludeerd worden dat, bij een jump, de waarde van de program counter altijd het resultaat is van een som:\nvan de PC zelf en een offset van een register en een offset Indien er geen jump is, is de waarde van de program counter de som:\nvan de PC zelf en de constante 0x4 Met dit inzicht, een blaadje papier met een potlood (en een gom), enkele tassen koffie of thee (of water), kan een design gemaakt worden. Bijvoorbeeld:\nOngeacht de keuze van het design, ziet de entity voor de program counter er (quasi) hetzelfde uit.\nclock en synchrone, actief hoge reset twee 32-bit data ingangen één 32-bit data uitgang 2 controle signalen: abs_rel_b is \u0026lsquo;1\u0026rsquo; bij een absolute sprong en \u0026lsquo;0\u0026rsquo; bij een relatieve immediate_four_b is \u0026lsquo;1\u0026rsquo; voor een relatieve sprong met offset en \u0026lsquo;0\u0026rsquo; bij een (standaard) sprong met 4 entity program_counter is port( clock : in STD_LOGIC; reset : in STD_LOGIC; abs_rel_b: in std_logic; immediate_four_b: in std_logic; rs1 : in std_logic_vector(31 downto 0); immediate : in std_logic_vector(31 downto 0); data_out : out std_logic_vector(31 downto 0) ); end entity program_counter; Merk ook op dat de immediate ingang geen rol speel bij een absolute jump\nEen testbench voor de program counter kan je hieronder vinden of hier downloaden. Op het einde van de simulatie wordt er een resultaat afgedrukt, zoals in het voorbeeld hieronder.\n-------------------------------------------------------------------------------- -- KU Leuven - ESAT/COSIC - Emerging technologies, Systems \u0026amp; Security -------------------------------------------------------------------------------- -- Module Name: program_counter_tb - Behavioural -- Project Name: Testbench for program_counter -- Description: -- -- Revision Date Author Comments -- v0.1 20250826 VlJo Initial version -- -------------------------------------------------------------------------------- library IEEE; use IEEE.STD_LOGIC_1164.ALL; -- use IEEE.NUMERIC_STD.ALL; entity program_counter_tb is end entity program_counter_tb; architecture Behavioural of program_counter_tb is component program_counter is port ( clock : in STD_LOGIC; reset : in STD_LOGIC; abs_rel_b: in std_logic; immediate_four_b: in std_logic; rs1 : in std_logic_vector(31 downto 0); immediate : in std_logic_vector(31 downto 0); data_out : out std_logic_vector(31 downto 0) ); end component program_counter; signal clock_i : STD_LOGIC; signal reset_i : STD_LOGIC; signal abs_rel_b_i : STD_LOGIC; signal immediate_four_b_i : STD_LOGIC; signal rs1_i : STD_LOGIC_VECTOR(31 downto 0); signal immediate_i : STD_LOGIC_VECTOR(31 downto 0); signal data_out_o : STD_LOGIC_VECTOR(31 downto 0); constant clock_period : time := 10 ns; begin ------------------------------------------------------------------------------- -- STIMULI ------------------------------------------------------------------------------- PSTIM: process variable good_checks : natural; variable bad_checks : natural; begin abs_rel_b_i \u0026lt;= \u0026#39;0\u0026#39;; immediate_four_b_i \u0026lt;= \u0026#39;0\u0026#39;; rs1_i \u0026lt;= (others =\u0026gt; \u0026#39;0\u0026#39;); immediate_i \u0026lt;= (others =\u0026gt; \u0026#39;0\u0026#39;); wait until clock_i = \u0026#39;1\u0026#39;; wait until clock_i = \u0026#39;0\u0026#39;; wait until reset_i = \u0026#39;0\u0026#39;; if data_out_o /= x\u0026#34;00000000\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; wait for clock_period; if data_out_o /= x\u0026#34;00000004\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; wait for clock_period; if data_out_o /= x\u0026#34;00000008\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; wait for clock_period*5; if data_out_o /= x\u0026#34;0000001C\u0026#34; then bad_checks := bad_checks + 1; else good_checks := good_checks + 1; end if; immediate_four_b_i \u0026lt;= \u0026#39;1\u0026#39;; immediate_i \u0026lt;= (4 =\u0026gt; \u0026#39;1\u0026#39;, others =\u0026gt; \u0026#39;0\u0026#39;); wait for clock_period; if data_out_o /= x\u0026#34;0000002C\u0026#34; then bad_checks := bad_checks + 1; report(\u0026#34;DISCH_GRADING - Abnormal behavior detected\u0026#34;); else good_checks := good_checks + 1; end if; immediate_four_b_i \u0026lt;= \u0026#39;0\u0026#39;; wait for clock_period; if data_out_o /= x\u0026#34;00000030\u0026#34; then bad_checks := bad_checks + 1; report(\u0026#34;DISCH_GRADING - Abnormal behavior detected\u0026#34;); else good_checks := good_checks + 1; end if; wait for clock_period; if data_out_o /= x\u0026#34;00000034\u0026#34; then bad_checks := bad_checks + 1; report(\u0026#34;DISCH_GRADING - Abnormal behavior detected\u0026#34;); else good_checks := good_checks + 1; end if; immediate_four_b_i \u0026lt;= \u0026#39;1\u0026#39;; immediate_i \u0026lt;= x\u0026#34;80000000\u0026#34;; wait for clock_period; if data_out_o /= x\u0026#34;80000034\u0026#34; then bad_checks := bad_checks + 1; report(\u0026#34;DISCH_GRADING - Abnormal behavior detected\u0026#34;); else good_checks := good_checks + 1; end if; immediate_four_b_i \u0026lt;= \u0026#39;0\u0026#39;; wait for clock_period; if data_out_o /= x\u0026#34;80000038\u0026#34; then bad_checks := bad_checks + 1; report(\u0026#34;DISCH_GRADING - Abnormal behavior detected\u0026#34;); else good_checks := good_checks + 1; end if; wait for clock_period; if data_out_o /= x\u0026#34;8000003C\u0026#34; then bad_checks := bad_checks + 1; report(\u0026#34;DISCH_GRADING - Abnormal behavior detected\u0026#34;); else good_checks := good_checks + 1; end if; abs_rel_b_i \u0026lt;= \u0026#39;1\u0026#39;; immediate_i \u0026lt;= x\u0026#34;00000004\u0026#34;; wait for clock_period; if data_out_o /= x\u0026#34;00000004\u0026#34; then bad_checks := bad_checks + 1; report(\u0026#34;DISCH_GRADING - Abnormal behavior detected\u0026#34;); else good_checks := good_checks + 1; end if; immediate_four_b_i \u0026lt;= \u0026#39;1\u0026#39;; immediate_i \u0026lt;= x\u0026#34;80000000\u0026#34;; wait for clock_period; if data_out_o /= x\u0026#34;80000000\u0026#34; then bad_checks := bad_checks + 1; report(\u0026#34;DISCH_GRADING - Abnormal behavior detected\u0026#34;); else good_checks := good_checks + 1; end if; immediate_four_b_i \u0026lt;= \u0026#39;0\u0026#39;; wait for clock_period; if data_out_o /= x\u0026#34;80000000\u0026#34; then bad_checks := bad_checks + 1; report(\u0026#34;DISCH_GRADING - Abnormal behavior detected\u0026#34;); else good_checks := good_checks + 1; end if; wait for clock_period; if data_out_o /= x\u0026#34;80000000\u0026#34; then bad_checks := bad_checks + 1; report(\u0026#34;DISCH_GRADING - Abnormal behavior detected\u0026#34;); else good_checks := good_checks + 1; end if; rs1_i \u0026lt;= x\u0026#34;80000000\u0026#34;; wait for clock_period; if data_out_o /= x\u0026#34;00000000\u0026#34; then bad_checks := bad_checks + 1; report(\u0026#34;DISCH_GRADING - Abnormal behavior detected\u0026#34;); else good_checks := good_checks + 1; end if; rs1_i \u0026lt;= x\u0026#34;5EADBEEF\u0026#34;; wait for clock_period; if data_out_o /= x\u0026#34;DEADBEEF\u0026#34; then bad_checks := bad_checks + 1; report(\u0026#34;DISCH_GRADING - Abnormal behavior detected\u0026#34;); else good_checks := good_checks + 1; end if; rs1_i \u0026lt;= x\u0026#34;00000002\u0026#34;; immediate_i \u0026lt;= x\u0026#34;00000002\u0026#34;; wait for clock_period; if data_out_o /= x\u0026#34;00000004\u0026#34; then bad_checks := bad_checks + 1; report(\u0026#34;DISCH_GRADING - Abnormal behavior detected\u0026#34;); else good_checks := good_checks + 1; end if; wait until reset_i = \u0026#39;1\u0026#39;; if data_out_o /= x\u0026#34;00000004\u0026#34; then bad_checks := bad_checks + 1; report(\u0026#34;DISCH_GRADING - Abnormal behavior detected\u0026#34;); else good_checks := good_checks + 1; end if; wait until clock_i = \u0026#39;1\u0026#39;; if data_out_o /= x\u0026#34;00000004\u0026#34; then bad_checks := bad_checks + 1; report(\u0026#34;DISCH_GRADING - Abnormal behavior detected\u0026#34;); else good_checks := good_checks + 1; end if; wait for 1 ns; if data_out_o /= x\u0026#34;00000000\u0026#34; then bad_checks := bad_checks + 1; report(\u0026#34;DISCH_GRADING - Abnormal behavior detected\u0026#34;); else good_checks := good_checks + 1; end if; report \u0026#34;DISCH_GRADING (good, bad, total): \u0026#34; \u0026amp; integer\u0026#39;image(good_checks) \u0026amp; \u0026#34; \u0026#34; \u0026amp; integer\u0026#39;image(bad_checks) \u0026amp; \u0026#34; \u0026#34; \u0026amp; integer\u0026#39;image(good_checks + bad_checks) \u0026amp; \u0026#34;\u0026#34; severity note; wait; end process; ------------------------------------------------------------------------------- -- DUT ------------------------------------------------------------------------------- DUT: component program_counter port map( clock =\u0026gt; clock_i, reset =\u0026gt; reset_i, abs_rel_b =\u0026gt; abs_rel_b_i, immediate_four_b =\u0026gt; immediate_four_b_i, rs1 =\u0026gt; rs1_i, immediate =\u0026gt; immediate_i, data_out =\u0026gt; data_out_o ); ------------------------------------------------------------------------------- -- CLOCK ------------------------------------------------------------------------------- PCLK: process begin clock_i \u0026lt;= \u0026#39;1\u0026#39;; wait for clock_period/2; clock_i \u0026lt;= \u0026#39;0\u0026#39;; wait for clock_period/2; end process PCLK; ------------------------------------------------------------------------------- -- RESET ------------------------------------------------------------------------------- PRST: process begin reset_i \u0026lt;= \u0026#39;1\u0026#39;; wait for clock_period*9; wait for clock_period/2; reset_i \u0026lt;= \u0026#39;0\u0026#39;; wait for clock_period*25; reset_i \u0026lt;= \u0026#39;1\u0026#39;; wait; end process PRST; end Behavioural; "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/600_mult/620_hwmult/",
	"title": "Hardware multiplier",
	"tags": [],
	"description": "",
	"content": "Het is altijd een goed idee om een probleem op te splitsen in kleinere probleempjes. De aanpak die in de vorige sectie uitgelegd is, kan opgedeeld worden in 3 fasen. Deze 3 fases zijn eenvoudiger om te vertalen naar hardware.\nMet deze analyse zou je in staat moeten zijn om een hardware multiplier te maken. De entity van de multiplier is hieronder weergegeven.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/600_mult/630_cpu_v2/",
	"title": "CPU v2",
	"tags": [],
	"description": "",
	"content": "Uiteraard is het de bedoeling dat deze multiplier gebruikt kan worden in de CPU die tot hiertoe ontwikkeld is. Voor de volledigheid moet er gezegd worden dat er hiermee buiten de scoop getreden wordt van de Hack CPU.\nData pad De eenvoudigste manier om deze extra functionaliteit toe te voegen is om een tweede ALU te maken. Zowel de x-operand als de y-operand die aan deze tweede ALU gekoppeld worden, zijn dezelfde als deze die aan de oorspronkelijke ALU gekoppeld zijn. Merk op dat beide ALU\u0026rsquo;s altijd actief zijn.\nAangezien er nu twee mogelijkheden zijn voor het resultaat, moet hier een multiplexer geplaatst worden. Indien dit niet gedaan wordt, worden er double drivers geïntroduceerd, wat ten allen tijde vermeden dient te worden.\nDe breedte van het resultaat van de multiplier kan het dubbele zijn van de breedte van de factoren. Om dit op te vangen, wordt er nog een multiplexer geplaatst. Deze laat toe om te kiezen of de minst-beduidende of de meest-beduidende helft van het product beschouwd wordt.\nDe Hack CPU Hack CPU v2 Controle pad Twee belangrijke stappen om een multiplier toe te voegen zijn reeds genomen:\nde ontwikkeling van de hardware van een multiplier het toevoegen van deze hardware aan het bestaande data pad Wat nog rest is \u0026hellip; het toevoegen van deze hardware aan het bestaande controle pad. Hieronder wordt de redenering achter de nieuwe instructie uit de doeken gedaan.\naangezien er een berekening moet gebeuren, is het logisch dat de instructie die toegevoegd moet worden een C-instructie is; de eerste bit ligt dus vast de constructie van de velden dest := comp; jump past ook voor de vermenigvuldiging: het dest veld kan behouden blijven het jump veld kan behouden blijven wat er dan nog rest zijn de 2 niet-gebruikte instructie-bits en het comp veld Bij een vergelijking tussen de twee versies van het datapad, is het duidelijk dat er 3 extra outputs verwacht worden van het controle path. Eén van deze outputs is de configuratie van de multiplier. De toegevoegde ALU voert echter maar 1 instructie uit (nl. de vermenigvuldiging), dus deze output valt weg. Er resten nog 2 outputs:\nde controle-bit die bepaalt van welke ALU het resultaat gebruikt wordt (X); de controle-bit die bepaalt of de meest- of minst-beduidende helft van de multiplier gebruikt moet worden (Y). Als de X aanduidt dat de originele ALU gebruikt dient te worden, is de waarde van Y irrelevant. Enkel wanneer X aangeeft dat het nodig is, dient Y geïnterpreteerd te worden. In het geval dat de originele ALU gebruikt dient te worden, hebben de controlebits c1-c6 een betekenis. Wanneer de multiplier-ALU gebruikt wordt, hebben deze géén betekenis meer. Het is bijgevolg een logisch keuze om Y onder te brengen onder de c-bits en X buiten de c-bits.\nMet deze aanpak kan de multiplier dus gebruikt worden. Er dient in de instructie aangegeven te worden of er interesse is de meest- of minst-beduidende helft van het produkt.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/600_mult/640_opdracht/",
	"title": "Opdracht 6: CPU v2",
	"tags": [],
	"description": "",
	"content": "Voor deze opdracht wordt de Hack CPU ge-upgrade tot de CPU v2.\nOm te testen kan je deze firmware gebruiken. In dit programma wordt 210 berekend.\nIn de simulatie kan je de machten van 2 zien in M[2].\nTestbench in Vivado "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/700_fsm/",
	"title": "7. Finite State Machines",
	"tags": [],
	"description": "",
	"content": "Finite State Machines Image courtesy: AI - Copilot "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/700_fsm/740_opdracht/",
	"title": "Opdracht 7: Finite State Machine",
	"tags": [],
	"description": "",
	"content": "Voor deze opdracht dien je zelf een FSM te beschrijven. De controle is een versimpelde versie van een muziek speler.\nNa power-up komt de FSM in de sReset state. Ook als de gebruiker het reset signal indrukt, gaat de FSM naar deze state, ongeacht van de huidige toestand. Deze state is slechts 1 klokcyclus actief en gaat meteen naar de sStop state. De controle blijft in deze toestand totdat de btn_play button ingedrukt wordt. In de sPlay state kan er overgegaan worden naar de sPause state en terug door opnieuw gebruik te maken van de btn_play button. Zowel in sPlay als is sPause kan er overgegaan worden naar sStop als de gebruiker de btn_stop button indrukt.\nOm de complexiteit te beperken zijn er maar 4 stuur-uitgangen. Deze vormen een one-hot encoding van de huidige state.\nHet state-diagram en de entity staan hieronder afgebeeld.\nentity muziek_speler_controle is port( clock : in STD_LOGIC; reset : in STD_LOGIC; btn_stop : in STD_LOGIC; btn_play : in STD_LOGIC; inReset : out STD_LOGIC; inStop : out STD_LOGIC; inPlay : out STD_LOGIC; inPause : out STD_LOGIC ); end entity muziek_speler_controle; Let er op dat het signaal van een button eerst laag moet worden vóórdat er een nieuw signal geïnterpreteerd kan worden!!\nHier vind je een testbench.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/800_extras/",
	"title": "Extras",
	"tags": [],
	"description": "",
	"content": "Extras Image courtesy: pexels - RDNE Stock project "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/800_extras/810_tuning/",
	"title": "Tuning",
	"tags": [],
	"description": "",
	"content": "De latency is de tijd die er nodig is tussen het starten van een operatie en het verkrijgen van het resultaat.\nDe throughput is de hoeveelheid bits die een operatie verwerkt in een gegeven tijdseenheid.\nDe cost is de kost van een ontwerp. Hoe meer componenten, hoe meer oppervlakte er ingenomen wordt op chip, en hoe duurder het ontwerp wordt.\nHet kritische pad is het langste combinatorische pad tussen 2 registers/flip-flops.\nDesign in de Hack Processor De latency is 1 clock cycle. Als we aannemen dat het kritische pad de ripple carry is en dat de minimale klok periode 2 ns is, dan is de latency = 2ns.\nAangezien er iedere clock cycle een optelling gedaan kan worden, is de througput = 8 Gbps (= 16 bits / 1CC = 16 bits / 2 ns = 16 / (2 * 10-9) bits/s = 8 x 109 bits / s )\nHalvering van de breedte De latency is 1 clock cycle. Als we aannemen dat het kritische pad de ripple carry lineair mee krimpt, wordt de minimale klok periode 1 ns is en dan is de latency = 1ns.\nAangezien er iedere clock cycle een optelling gedaan kan worden, is de througput = 8 Gbps (= 8 bits / 1CC = 8 bits / 1 ns = 8 x 109 bits / s )\nUnrolled De latency is 1 clock cycle. Als we aannemen dat het kritische pad de ripple carry niet wijzigt, dan is de latency = 2ns.\nAangezien er iedere clock cycle een optelling gedaan kan worden, is de througput = 8 Gbps (= 16 bits / 1CC = 16 bits / 2 ns = 16 / (2 * 10-9) bits/s = 8 x 109 bits / s )\nPipelined De latency is 2 clock cycles. Als we aannemen dat het kritische pad de ripple carry lineair mee krimpt, wordt de minimale klok periode 1 ns is en dan is de latency = 2ns.\nAangezien er, bij een volled pipeline, iedere clock cycle een optelling gedaan kan worden, is de througput = 16 Gbps (= 16 bits / 1CC = 16 bits / 1 ns = 16 / (1 * 10-9) bits/s)\nSequential De latency is 2 clock cycles. Als we aannemen dat het kritische pad de ripple carry lineair mee krimpt, wordt de minimale klok periode 1 ns is en dan is de latency = 2ns.\nAangezien er iedere 2 clock cycles een optelling gedaan kan worden, is de througput = 8 Gbps (= 16 bits / 2CC = 16 bits / 2 ns = 16 / (2 * 10-9) bits/s = 8 x 109 bits / s )\nSamenvatting 16-bit 8-bit Unrolled Pipelined Sequential Tmin [ns] 2 1 2 1 1 Latency [CC] 1 1 1 2 2 Latency [ns] 2 1 2 2 2 Throughput [Gbps] 8 8 8 16 8 Aantal FF 3x16 + 2x1 = 50 3x8 + 2x1 = 26 3x16 + 2x1 = 50 (3x16 + 2x1) + (3x8 + 1x1) = 75 2x16 + 2x1 + 2x8 = 50 Kan 16-bit optelling ✓ ✗ ✓ ✓ ✓ Extra controle pad ✗ ✗ ✗ ✓ ✓ Fmax [MHz] 500 1000 500 1000 1000 De resultaten van de 8-bit versie zijn louter voor de volledigheid; Unrolled geeft geen meerwaarde in dit geval Pipelined geeft betere throughput en klok snelheid, ten kosten van extra oppervlakte Sequential geeft betere klok snelheid, ten kosten van extra controle-logica Functionaliteit, kost, performantie \u0026hellip; Je kan voor maximaal 2 prioriteiten optimaliseren, maar niet voor alle prioriteiten.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/800_extras/820_tips_and_tricks/",
	"title": "Tips &amp; Tricks",
	"tags": [],
	"description": "",
	"content": "Signaal verkorten to 1CC Soms is het handig om signalen te verkorten. Een stuursignaal kan, bijvoorbeeld, enkele clock cycles hoog zijn. De hardware echter verwacht een hoog signaal dat precies 1 clock cycle duurt.\nVan zodra je begint te denken \u0026ldquo;nu moet dit zijn en daarvoor moest dat zijn \u0026hellip; FF-tijd.\n-- entity -- architecture signal input_d : STD_LOGIC; -- begin PREG: process(clock_i) begin if rising_edge(clock_i) then input_d \u0026lt;= input_i; end if; end process; output_i \u0026lt;= input_i AND not(input_d); -- end architecture \u0026lsquo;Default\u0026rsquo; waardes bij een MUX Het is uiterst belangrijk dat bij een MUX ALLE outputs een waarde toegekend krijgen, voor elke mogelijke conditie!! Je kan jezelf beschermen van de zonde om dit te vergeten door te werken met een \u0026ldquo;default\u0026rdquo;-waarde. Het voorbeeld hiernaast ziet er op het eerste zicht correct uit en volgens de VHDL syntax is dit ook zo. Afhankelijk van de laatste bit zal het signaal getal_is_even hoog worden, of getal_is_oneven.\nDit zijn eigenlijk twee muxen, die in één proces beschreven worden!!\n-- entity -- architecture signal getal : STD_LOGIC_VECTOR(3 downto 0); signal getal_is_even, getal_is_oneven : STD_LOGIC; -- begin PMUX: process(getal) begin if getal(0) = \u0026#39;1\u0026#39; then getal_is_oneven \u0026lt;= \u0026#39;1\u0026#39;; elsif getal(0) = \u0026#39;0\u0026#39; then getal_is_even \u0026lt;= \u0026#39;1\u0026#39;; end if; end process; -- end architecture -- entity -- architecture signal getal : STD_LOGIC_VECTOR(3 downto 0); signal getal_is_even, getal_is_oneven : STD_LOGIC; -- begin PMUX: process(getal) begin if getal(0) = \u0026#39;1\u0026#39; then getal_is_oneven \u0026lt;= \u0026#39;1\u0026#39;; getal_is_even \u0026lt;= \u0026#39;0\u0026#39;; elsif getal(0) = \u0026#39;0\u0026#39; then getal_is_oneven \u0026lt;= \u0026#39;0\u0026#39;; getal_is_even \u0026lt;= \u0026#39;1\u0026#39;; end if; end process; -- end architecture In deze twee voorbeelden is er in de beschrijving gezorgd dat voor alle mogelijkheden een waarde beschikbaar is. Het eerste voorbeeld doet dit expliciet. Wanneer er veel uitgangen zijn, kan dit snel omslachtige worden. Het tweede voorbeeld kan dan een oplossing vormen, door eerst default waardes toe te kennen aan alle uitgangen.\n-- entity -- architecture signal getal : STD_LOGIC_VECTOR(3 downto 0); signal getal_is_even, getal_is_oneven : STD_LOGIC; -- begin PMUX: process(getal) begin getal_is_oneven \u0026lt;= \u0026#39;0\u0026#39;; getal_is_even \u0026lt;= \u0026#39;0\u0026#39;; if getal(0) = \u0026#39;1\u0026#39; then getal_is_oneven \u0026lt;= \u0026#39;1\u0026#39;; elsif getal(0) = \u0026#39;0\u0026#39; then getal_is_even \u0026lt;= \u0026#39;1\u0026#39;; end if; end process; -- end architecture Power to the editor VHDL is een expliciete taal. Er moet veel code geschreven worden, als we het aantal \u0026ldquo;karakters\u0026rdquo; tellen in een beschrijving. Tegenwoordig bestaan er tal van general purpose editors. Aangezien VHDL-bestanden gewone tekstbestanden zijn, kunnen deze ook perfect in een editor geschreven worden. Voorbeelden van editors zijn: Visual Studio Code, Sublime, Notepad++ en UltraEdit. De meeste editors laten toe om te werken met snippets. Dit zijn onderdelen in de editor die stukken boilerplate code genereren. Dit is een voorbeeld van een snippet in VS Code. Wanneer er in een .vhd file gewerkt wordt, zal de prefix srff meteen de block code genereren voor een SR-FlipFlop.\nHet loont écht de moeite om jezelf goed vertrouwd te maken met 1 editor. Dit soort algemene editors kunnen immers gebruikt worden voor veel talen die je zal gebruiken: Python, VHDL, C, Java, Assembly (\u0026#x1f603;), HTML, CSS, \u0026hellip;\n\u0026#34;VHDL SRFF\u0026#34;: { \u0026#34;prefix\u0026#34;: \u0026#34;srff\u0026#34;, \u0026#34;body\u0026#34; : [ \u0026#34;-- signal $1, $1_set, $1_reset : STD_LOGIC;\u0026#34;, \u0026#34;$1_set \u0026lt;= ;\u0026#34;, \u0026#34;$1_reset \u0026lt;= ;\u0026#34;, \u0026#34;PSRFF: process(clock_i)\u0026#34;, \u0026#34;begin\u0026#34;, \u0026#34; if rising_edge(clock_i) then\u0026#34;, \u0026#34; if reset_n_i = \u0026#39;0\u0026#39; then \u0026#34;, \u0026#34; $1 \u0026lt;= \u0026#39;0\u0026#39;;\u0026#34;, \u0026#34; else\u0026#34;, \u0026#34; if $1_reset = \u0026#39;1\u0026#39; then \u0026#34;, \u0026#34; $1 \u0026lt;= \u0026#39;0\u0026#39;;\u0026#34;, \u0026#34; elsif $1_set = \u0026#39;1\u0026#39; then \u0026#34;, \u0026#34; $1 \u0026lt;= \u0026#39;1\u0026#39;;\u0026#34;, \u0026#34; end if;\u0026#34;, \u0026#34; end if;\u0026#34;, \u0026#34; end if;\u0026#34;, \u0026#34;end process;\u0026#34; ], \u0026#34;description\u0026#34;: \u0026#34;VHDL boilerplate code for a set-reset flip-flop\u0026#34; } Automating (Vivado) Zij, die deze labo\u0026rsquo;s met Vivado gedaan hebben, hebben misschien al gemerkt dat deze tool niet altijd helemaal werkt zoals dat verwacht wordt. Een tip is om zo weinig mogelijk manueel werk te doen. Het is je misschien al opgevallen dat er een TCL console is. Hiermee kan de tool ook bediend worden met commando\u0026rsquo;s in plaats van met manuele muiskliks.\nEen project aanmaken voor het PYNQ ontwikkelbord vergt 10 muiskliks en 1 tekst-veld manipulatie. Wanneer je naar de TCL console kijkt, zie iets (analoog aan) zoals hieronder. De regels die in het blauw staan, zijn TCL-commandos.\nJe kan dus, als alternatief voor als een bezetene rond te klikken, ook deze commando\u0026rsquo;s uitvoeren. Het resultaat is exact hetzelfde. Aangezien we al genoeg typwerk hebben, is het nog interessanter om een klein script te maken waarin deze commando\u0026rsquo;s staan.\n# TCL script to generate a Vivado project for the PYNQ-Z2 board # create_project project_demo /home/jvliegen/project_demo -part xc7z020clg400-1 set_property board_part tul.com.tw:pynq-z2:part0:1.0 [current_project] set_property target_language VHDL [current_project] Als we er van uitgaan dat deze TCL-file te vinden is op: /home/username/myscript.tcl, dan volstaat in om in de TCL console van Vivado te typen:\nsource /home/username/myscript.tcl Hou de TCL console in de gaten. Je kan, voor elke actie die je in Vivado doet, de commando\u0026rsquo;s die uitgevoerd worden kopiëren in het TCL script. Die-hards kunnen zelfs beginnen programmeren, zodat je één generiek TCL-script krijgt dat parameteriseerbaar is.\n# set parameters set pname \u0026#34;this_is_my_project_name\u0026#34; set srcpath \u0026#34;/home/jvliegen/vc/github/KULeuven-Diepenbeek/course_disch/tcl\u0026#34; set projpath \u0026#34;/home/jvliegen/sandbox/course_hdisch\u0026#34; set part \u0026#34;xc7vx485tffg1761-2\u0026#34; set board \u0026#34;xilinx.com:vc707:part0:1.3\u0026#34; # delete older versions cd $projpath exec rm -Rf $pname # create project create_project $pname $projpath/$pname -part $part set_property board_part $board [current_project] set_property target_language VHDL [current_project] # add VHDL source files set fnames [glob -directory $srcpath -- \u0026#34;*.vhd\u0026#34;] foreach fname $fnames { add_files $fname } "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/900_zelfstudie/910_hw_vs_sw/",
	"title": "Hardware vs software",
	"tags": [],
	"description": "",
	"content": "Hardware vs software beschrijvingstaal voor hardware \u0026ne; programmeertaal programmeertaal (bv. C): hardware = processor hardware is reeds ontworpen code: beschrijft hoe hardware gebruikt moet worden code wordt gecompileerd voor een specifieke processor hardware beschrijvingstaal (bv. VHDL) hardware = ontwerp op FPGA of ASIC hardware moet ontworpen worden code: beschrijft welke hardware ontworpen moet worden code wordt gesynthetiseerd voor een specifieke FPGA of ASIC technologie Voorbeeld hardware c \u0026lt;= a and b; e \u0026lt;= c or d; betekent hetzelfde als\ne \u0026lt;= c or d; c \u0026lt;= a and b; schematische voorstelling "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/900_zelfstudie/920_ent_arch/",
	"title": "Entiteiten en architecturen",
	"tags": [],
	"description": "",
	"content": "De VHDL code van elk bouwblok bevat een\neen lijst van de gebruikte bibliotheken, interface beschrijving: entity, functie beschrijving: architecture. Voorbeeld library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity and_or_poort is port( A: IN STD_LOGIC; B: IN STD_LOGIC; D: IN STD_LOGIC; E: OUT STD_LOGIC ); end entity and_or_poort; architecture Behavioural of and_gate is signal c: STD_LOGIC; begin c \u0026lt;= a and b; e \u0026lt;= c or d; end Behavioural; Entity De entity bevat de beschrijving van de interface.\nentity and_or_poort is port( a, b, d: in STD_LOGIC; e: out STD_LOGIC); end and_or_poort; De entity Entity ports Elke poort heeft:\neen naam in dit voorbeeld: a,b,d,e een mode in dit voorbeeld: in, out een type in dit voorbeeld: STD_LOGIC Namen in VHDL Namen voldoen aan de volgende eisen:\nbestaan uit letters, cijfers en _ beginnen met een letter niet eindigen met een _ geen twee _ na elkaar geen gereserveerde woorden zoals bv. \u0026ldquo;entity\u0026rdquo; Namen zijn niet case sensitive.\nModes van ports Belangrijkste modes, of richtingen:\nin: ingang out: uitgang inout: in- en uitgang buffer: uitgang die intern ook gebruikt wordt voorbeeld: and_or_poort waarbij we c ook als uitgang willen entity and_or_poort is port( a, b, d: in STD_LOGIC; c: buffer STD_LOGIC; e: out STD_LOGIC); end and_or_poort; architecture arch of and_or_poort is begin c \u0026lt;= a and b; e \u0026lt;= c or d; end arch; Gebruik van buffer Het gebruik van de mode buffer kan vermeden worden door een intern signaal aan te maken en dit te verbinden met de uitgang.\nVolgende twee codes zijn identiek:\nentity and_or_poort is port( a, b, d: in STD_LOGIC; c: buffer STD_LOGIC; e: out STD_LOGIC); end and_or_poort; architecture arch of and_or_poort is begin c \u0026lt;= a and b; e \u0026lt;= c or d; end arch; entity and_or_poort is port( a, b, d: in STD_LOGIC; c, e: out STD_LOGIC); end and_or_poort; architecture arch of and_or_poort is signal c_intern: STD_LOGIC; begin c_intern \u0026lt;= a and b; e \u0026lt;= c_intern or d; c \u0026lt;= c_intern; end arch; Architecture De architecture beschrijft het gedrag. Een architecture moet verbonden zijn met een specifieke entity. Een entity kan meerdere architectures hebbben. architecture arch of and_or_poort is signal c: STD_LOGIC; begin c \u0026lt;= a and b; e \u0026lt;= c or d; end arch; Signals Om interne data voor te stellen, worden signals gebruikt. Een signal is van een bepaald type maar heeft geen mode. Namen van signalen: zelfde voorwaarden als namen van entity ports. Voorbeeld: signal c: STD_LOGIC architecture arch of and_or_poort is signal c: STD_LOGIC; begin c \u0026lt;= a and b; e \u0026lt;= c or d; end arch; Commentaar in VHDL Je kan iets in commentaar zetten door er 2 keer een - voor te zetten.\n-- dit is een regel commentaar z \u0026lt;= a -- dit kan ook op het einde van de regel "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/900_zelfstudie/",
	"title": "VHDL - korte naslag",
	"tags": [],
	"description": "",
	"content": "VHDL Onderdelen van dit hoofdstuk kunnen gevraagd worden in het theorie examen.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/900_zelfstudie/930_hierachie/",
	"title": "Hiërarchie",
	"tags": [],
	"description": "",
	"content": "het is mogelijk om een hiërarchie in te bouwen. Een bouwblok kan een instantie van een andere bouwblok bevatten.\nlibrary IEEE; use IEEE.STD_LOGIC_1164.ALL; entity and_or_xor_poort is port( a, b, c, d: in STD_LOGIC; e: out STD_LOGIC); end and_or_xor_poort; architecture arch of and_or_xor_poort is -- declaratie van and_or poort component and_or_poort is port( a, b, d: in STD_LOGIC; e: out STD_LOGIC); end component; signal f: STD_LOGIC; begin -- instantie van and_or poort inst_and_or_poort: component and_or_poort port map( a =\u0026gt; b, b =\u0026gt; a, d =\u0026gt; c, e =\u0026gt; f); e \u0026lt;= d xor f; end arch; Een component moet eerst gedeclareerd zijn alvorens hem te instantiëren. De component declaratie heeft dezelfde ports als de entity declaratie van het bijhorend bouwblok.\nAls alternatief, kan de instantiatie ook beschreven worden als volgt:\ninst_and_or_poort: component and_or_poort port map(b, a, c, f); In het voorbeeld hieboven, worden signalen toegekend op volgorde, bv: het eerste signaal tussen de ( ) aan de eerste port van de declaratie, enz.\nAls oefening kan je zelf eens de volgende componenten maken • and-poort • or-poort • invertor • een multiplexer die gebruikt maakt van bovenstaande componenten Dit kan je dan zelf eens simuleren in Vivado\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/900_zelfstudie/940_libraries/",
	"title": "Libraries",
	"tags": [],
	"description": "",
	"content": " Een library kan meerdere packages bevatten.\nEen package bevat 1 of meer van onderstaande middelen.\ntypes constanten functies procedures component declaraties Een VHDL module kan gebruik maken van 1 of meerdere packages Voorbeeld:\nlibrary library1; use library1.pack2.all; library library2; use library2.pack4.all; entity ... architecture... \u0026ldquo;std\u0026rdquo; library Een verwijzing naar de package \u0026ldquo;standard\u0026rdquo; in de library \u0026ldquo;std\u0026rdquo; is steeds impliciet aanwezig. Volgende twee codes zijn identiek.\nentity and_or_poort is port( a, b, d: in bit; e: out bit); end and_or_poort; architecture arch of and_or_poort is signal c: bit; begin c \u0026lt;= a and b; e \u0026lt;= c or d; end arch; library std; use std.standard.all; -- geeft aan wat we precies willen gebruiken van deze package entity and_or_poort is port( a, b, d: in bit; e: out bit); end and_or_poort; architecture arch of and_or_poort is signal c: bit; begin c \u0026lt;= a and b; e \u0026lt;= c or d; end arch; Een stuk code van de standard package.\npackage STANDARD is --opsomming types type BOOLEAN is (FALSE, TRUE); type BIT is (\u0026#39;0\u0026#39;, \u0026#39;1\u0026#39;); type CHARACTER is ( -- opsomming ASCII characters); type INTEGER is range -- implementation defined; --arrays: samengestelde types waarvan de range moet ingesteld worden type STRING is array (POSITIVE range \u0026lt;\u0026gt;) of CHARACTER; type BIT_VECTOR is array (NATURAL range \u0026lt;\u0026gt;) of BIT; ... end STANDARD;"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/900_zelfstudie/950_arrays/",
	"title": "Arrays",
	"tags": [],
	"description": "",
	"content": "Een range kan stijgend of dalend gekozen worden:\nx(2 to 6) y(7 downto 0) We kunnen verwijzen naar individuele elementen door een index te gebruiken:\nx(4) y(7) Voorbeeld:\nentity and_or_poort is port( a_vec: in bit_vector(2 downto 0); c_vec: out bit_vector(0 to 1)); end and_or_poort; architecture arch of and_or_poort is signal c_intern: bit; begin c_intern \u0026lt;= a_vec(2) and a_vec(1); c_vec(1) \u0026lt;= c_intern or a_vec(0); c_vec(0) \u0026lt;= c_intern: end arch; Toekenning van arrays Toekenning gebeurt op basis van positie, niet op basis van index. Voorbeeld:\nsignal x: bit_vector(2 to 6); signal y: bit_vector(7 downto 3); ... x \u0026lt;= y; Voorbeelden van de toekenning van de individuele elementen van een samengesteld type: signal y, z: bit_vector(3 downto 0); signal a, b: bit; signal byte: bit_vector(7 downto 0); Op basis van positie: z \u0026lt;= (a, \u0026#39;1\u0026#39;, b, \u0026#39;0\u0026#39;); -- z wordt dan a1b0 met a en b een waarde 0 of 1 op basis van index: byte \u0026lt;= (7 =\u0026gt; \u0026#39;1\u0026#39;, 4 downto 2 =\u0026gt; a, 6 =\u0026gt; b, others =\u0026gt; \u0026#39;0\u0026#39;); -- byte wordt dan 1b0aaa00 Voorbeeld van de toekenning van een waarde: z \u0026lt;= \u0026#34; 1010\u0026#34; ; Voorbeelden van samenvoeginstructies: z \u0026lt;= a \u0026amp; \u0026#39;1\u0026#39; \u0026amp; b \u0026amp; \u0026#39;0\u0026#39;; byte \u0026lt;= y \u0026amp; z; Voorbeelden van de gedeeltelijke toekenning van een array: signal a, z: bit_vector(3 downto 0); signal b: bit; signal byte: bit_vector(7 downto 0); ... byte(5 downto 2) \u0026lt;= a; z(1 downto 0) \u0026lt;= \u0026#39;0\u0026#39; \u0026amp; b; De richting van de deeltoekenning moet dezelfde zijn als de richting van de declaratie. Correct voorbeeld: signal a: bit_vector(3 downto 0); signal byte: bit_vector(7 downto 0); ... byte(5 downto 2) \u0026lt;= a; Foutief voorbeeld: signal z: bit_vector(3 downto 0); signal b: bit; ... z(0 to 1) \u0026lt;= \u0026#39;0\u0026#39; \u0026amp; b; -- dit geeft een error! Aliases Aliases zijn verwijzingen naar reeds gedefinieerde signals, die de code beter begrijpbaar maken.\nsignal adres: bit_vector(31 downto 0); alias top_adres: bit_vector(3 downto 0) is adres(31 downto 28); alias adres_bank: bit_vector(3 downto 0) is adres(27 downto 24); alias rij_adres: bit_vector(11 downto 0) is adres(24 downto 12); "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/900_zelfstudie/960_packages/",
	"title": "Packages",
	"tags": [],
	"description": "",
	"content": "Zelf-gedefinieerde packages Per default worden zelfgemaakte bouwblokken opgeslagen in de library work. In deze library kunnen we zelf packages definiëren.\nVoorbeeld van een zelf-gedefinieerde package: package and_or_xor_pack is component and_or_poort is port( a, b, d: in bit; e: out bit); end component; end package; Als we deze package toevoegen, hoeven we de component declaratie niet meer te doen.\nlibrary work; use work.and_or_xor_pack.all; entity and_or_xor_poort ... architecture ... -- zonder component declaratie \u0026ldquo;std_logic_1164\u0026rdquo; package De package \u0026quot; std_logic_1164\u0026quot; in library \u0026quot; ieee\u0026quot; bevat o.a. de types \u0026quot; std_ulogic\u0026quot; en \u0026quot; std_logic\u0026quot; .\npackage std_logic_1164 is type std_ulogic is ( \u0026#39;U\u0026#39;, -- Uninitialized : flipflop waar nog nooit in is geschreven \u0026#39;X\u0026#39;, -- Forcing Unknown \u0026#39;0\u0026#39;, -- Forcing 0 : rechtstreeks aan grond \u0026#39;1\u0026#39;, -- Forcing 1 : rechtstreeks aan voeding \u0026#39;Z\u0026#39;, -- High Impedance \u0026#39;W\u0026#39;, -- Weak Unknown \u0026#39;L\u0026#39;, -- Weak 0 : via weerstand aan grond \u0026#39;H\u0026#39;, -- Weak 1 : via weerstand aan voeding \u0026#39;-\u0026#39;, -- Don\u0026#39;t Care ); subtype std_logic is resolved std_ulogic; type std_ulogic_vector is array (NATURAL range \u0026lt;\u0026gt;) of std_ulogic; type std_logic_vector is array (NATURAL range \u0026lt;\u0026gt;) of std_logic; ... We gebruiken altijd \u0026ldquo;std_logic\u0026rdquo; in de plaats van \u0026ldquo;bit\u0026rdquo;.\n\u0026ldquo;std_logic_unsigned\u0026rdquo; en \u0026ldquo;std_logic_signed\u0026rdquo; In de package std_logic_unsigned (uit library ieee) worden std_logic_vectors beschouwd als positieve binaire getallen zonder tekenbit .\nIn de package std_logic_signed (uit library ieee) worden std_logic_vectors beschouwd als getallen in 2\u0026rsquo;s complement notatie.\nDe volgende functies staan o.a. beschreven in de packages: +, -, *, \u0026lt;, \u0026lt;=, \u0026gt;, \u0026gt;=, =, /=, shl, shr, conv_integer\nOpteller We zouden een opteller kunnen bouwen a.d.h.v. half/full adders. Het voordeel van VHDL is dat we het hardware-ontwerp ook op een hoger niveau kunnen beschrijven. In het geval van de opteller kunnen we gewoon \u0026lsquo;+\u0026rsquo; gebruiken. Daarvoor moeten we eerst verwijzen naar de juiste \u0026lsquo;package\u0026rsquo; in de juiste \u0026rsquo;library\u0026rsquo; en moeten we groepjes van bits zien als \u0026lsquo;arrays\u0026rsquo;.\nDe onderstaande manier beschijft een 4-bit opteller maken in VHDL:\nlibrary ieee; use ieee.std_logic_1164.all; use ieee.std_logic_unsigned.all; entity opteller is port( a, b: in std_logic_vector(3 downto 0); c: out std_logic_vector(3 downto 0)); end opteller; architecture arch of opteller is begin c \u0026lt;= a + b; end arch; De lengtes van a, b en c moeten hetzelfde zijn, dus de carry-out wordt niet berekend!\nAls we de carry-out ook willen berekenen, kunnen we de lengte van c met 1 bit vergroten, maar dan moeten we intern de lengte van a en b ook vergroten, want per syntax geldt dat de som van 2 n-bit vectoren, terug een n-bit verctor is:\nlibrary ieee; use ieee.std_logic_1164.all; use ieee.std_logic_unsigned.all; entity opteller is port( a, b: in std_logic_vector(3 downto 0); c: out std_logic_vector(4 downto 0)); end opteller; architecture arch of opteller is signal a_long, b_long: std_logic_vector(4 downto 0); begin a_long \u0026lt;= \u0026#39;0\u0026#39; \u0026amp; a; b_long \u0026lt;= \u0026#39;0\u0026#39; \u0026amp; b; c \u0026lt;= a_long + b_long; end arch; Aftrekker Met behulp van de package std_logic_unsigned kunnen we ook aftrekkingen uitvoeren. De ingangen worden dan beschouwd als positieve binaire getallen zonder tekenbit. Indien het resultaat kleiner wordt dan nul, wordt er terug vanaf het maximum naar beneden geteld, alsof alle getallen zich op een cirkel bevinden. Dat komt overeen met 2\u0026rsquo;s complement notatie. Voor optelling en aftrekking maakt het niet uit of we std_logic_unsigned of std_logic_signed gebruiken. Voor \u0026gt;, \u0026gt;=, \u0026lt;, \u0026lt;= maakt het wel uit.\nuse ieee.std_logic_1164.all; use ieee.std_logic_unsigned.all; entity opteller is port( a, b: in std_logic_vector(3 downto 0); c: out std_logic_vector(3 downto 0)); end opteller; architecture arch of opteller is begin c \u0026lt;= a - b; end arch; Opteller/aftrekker We gebruiken de ingang \u0026ldquo;op_af\u0026rdquo; om te bepalen of we gaan optellen of aftrekken. Als de bit gelijk is aan 0, tellen we op. Als de bit gelijk is aan 1, trekken we af. Voor de beschrijving van een MUX hebben we een process nodig. Daar komen we in de les nog op terug.\nlibrary ieee; use ieee.std_logic_1164.all; use ieee.std_logic_signed.all; entity opteller_aftrekker is port( a, b: in std_logic_vector(3 downto 0); c: out std_logic_vector(3 downto 0); op_af: in std_logic); end opteller_aftrekker; architecture arch of opteller_aftrekker is begin p: process(a, b, op_af) begin if op_af = \u0026#39;0\u0026#39; then c \u0026lt;= a + b; else c \u0026lt;= a - b; end if; end process; end arch; "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/900_zelfstudie/970_processen/",
	"title": "Processen",
	"tags": [],
	"description": "",
	"content": "Structuur van een proces Een proces wordt uitgevoerd wanneer een signaal in de sensitivity lijst van waarde verandert. Signalen worden geupdated aan het einde van het proces.\nVoorbeeld van een proces met een if-then-else statement: multiplexer.\nlibrary ieee; use ieee.std_logic_1164.all; entity mux is port( a, b, s: in std_logic; z: out std_logic); end mux; architecture arch of mux is begin p1: process(a, b, s) -- a, b, s is de sensitiviy lijst begin if s = \u0026#39;1\u0026#39; then z \u0026lt;= a; else z \u0026lt;= b; end if; end process; end arch; Toekenningen in processen Volgende processen leiden tot dezelfde implementatie:\np1: process(a, b) begin y \u0026lt;= a; y \u0026lt;= b; end process; p2: process(b) begin y \u0026lt;= b; end process; Wanneer één van de signalen in de sensitivity list van het proces verandert, wordt het proces van begin tot einde doorlopen. Wanneer het proces helemaal doorlopen is, wacht het op een nieuwe verandering van de signalen in de sensitity list. Pas wanneer het proces in deze wachtfase terechtkomt, gebeurt de eigenlijke toekenning van de signalen. Daarom overschrijft de tweede uitdrukking de eerste in process p1.\nVolgende processen leiden niet tot dezelfde implementatie:\np1: process(b) begin a \u0026lt;= b; c \u0026lt;= a; end process; p2: process(a, b) begin a \u0026lt;= b; c \u0026lt;= a; end process; Wat gebeurt er wanneer b van waarde verandert?\nIn p1: Het proces wordt doorlopen. Daarna gebeuren alle toekenningen. In dit geval wordt b toegekend aan a en op hetzelfde moment wordt de oude waarde van a toegekend aan c. Er wordt dus een geheugenwerking gecreëerd.\nIn p2: Het proces wordt doorlopen. Daarna gebeuren alle toekenningen. In dit geval wordt b toegekend aan a en op hetzelfde moment wordt de oude waarde van a toegekend aan c. Omdat a in de sensitivity list staat, wordt het proces opnieuw doorlopen en wordt daarna b opnieuw toegekend aan a en wordt de nieuwe waarde van a toegekend aan c. Deze werking is zuiver combinatorisch.\nModelleren van combinatorische processen Volgende processen leiden to dezelfde implementatie:\np1: process(a, b) begin c \u0026lt;= \u0026#34;00\u0026#34;; if a = \u0026#39;1\u0026#39; then c \u0026lt;= \u0026#34;01\u0026#34;; elsif b = \u0026#39;1\u0026#39; then c \u0026lt;= \u0026#34;11\u0026#34;; end if; end process; p2: process(a, b) begin if a = \u0026#39;1\u0026#39; then c \u0026lt;= \u0026#34;01\u0026#34;; elsif b = \u0026#39;1\u0026#39; then c \u0026lt;= \u0026#34;11\u0026#34;; else c \u0026lt;= \u0026#34;00\u0026#34;; end if; end process; Meerdere processen binnen een ontwerp architecture arch_example of example is begin p1: process(-- sensitivity list) begin -- sequentiële statements end process; p2: process(-- sensitivity list) begin -- sequentiële statements end process; p3: process(-- sensitivity list) begin -- sequentiële statements end process; end arch_example; Een ingang van een proces kan een uitgang van een ander proces zijn.\nVoorbeeld if statement library ieee; use ieee.std_logic_1164.all; entity if_example is port( a, b, c, x: in std_logic_vector(3 downto 0); z: out std_logic_vector(3 downto 0)); end if_example; architecture arch_if_example of if_example is begin p_if: process(a, b, c, x) begin if x = \u0026#34; 0000\u0026#34; then z \u0026lt;= a; elsif x = \u0026#34; 0101\u0026#34; then z \u0026lt;= b; else z \u0026lt;= c; end if; end process; end arch_if_example; Case statement Structuur case statement case expression is when value_1 =\u0026gt; -- toekenning when value_2 | value_3 =\u0026gt; -- toekenning when value_M to value_N =\u0026gt; -- toekenning when others =\u0026gt; -- toekenning end case; Voorbeeld case statement library ieee; use ieee.std_logic_1164.all; entity case_example is port( a, b, c, x: in integer range 0 to 15; z: out integer range 0 to 15); end case_example; architecture arch_case_example of case_example is begin p_case: process(a, b, c, x) begin case x is when 0 to 4 =\u0026gt; z \u0026lt;= b; when 5 =\u0026gt; z \u0026lt;= c; when 7|9 =\u0026gt; z \u0026lt;= a; when others =\u0026gt; z \u0026lt;= 0; end case; end process; end arch_case_example; Concurrente, selectieve signaaltoekenning Een with-select statement: concurrente versie van de case statement. Verschil: slechts één bestemming mogelijk. Zelfde regels als bij de case statement\nentity example is port( a, b, c, x: in integer range 0 to 7; z: out integer range 0 to 7); end example; architecture arch_example of example is begin p: process(a, b, c, x) begin case x is -- case in process when 0 to 4 =\u0026gt; z \u0026lt;= b; when 5 =\u0026gt; z \u0026lt;= c; when others =\u0026gt; z \u0026lt;= a; end case; end process; end arch_example; architecture arch_example of example is begin with x select -- with-select buiten process z \u0026lt;= b when 0 to 4, c when 5, a when others; end arch_example; Concurrente statements Concurrente statements komen voor buiten een proces.\nVoorbeelden van concurrente statements:\nconcurrente signaaltoekenning (bv. a \u0026lt;= b), conditionele signaaltoekenning (when-else), geselectioneerde signaaltoekenning (with-select), proces, generate statement, component instantiatie. Sequentiële statements Sequentiële statements komen steeds voor binnen een proces.\nVoorbeelden van sequentiële statements:\ncase, if, for loop, toekenning van een variabele, wait statement. Verschil tussen sensitivity list en wait Een proces met een sensitivity list mag geen wait opdracht hebben. Een proces met een wait opdracht mag geen sensitivity list hebben. Een wait statement is niet synthetiseerbaar en kan dus niet behoren tot VHDL-code die op een FPGA geïmplementeerd wordt. Een wait statement mag bijvoorbeeld wel in een testbench gebruikt worden. p_optelling: process(a, b, cin) -- sensitivity list begin som \u0026lt;= a xor b xor cin; end process; p_optelling: process begin som \u0026lt;= a xor b xor cin; wait on a, b, cin; -- wait opdracht end process; Wait statements p: process begin wait on a; b \u0026lt;= \u0026#39;1\u0026#39;; wait for 10 ns; b \u0026lt;= \u0026#39;0\u0026#39;; wait until (a = \u0026#39;1\u0026#39;); b \u0026lt;= \u0026#39;1\u0026#39;; end process; "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/900_zelfstudie/980_signalen_variablen/",
	"title": "Signalen vs. variabelen",
	"tags": [],
	"description": "",
	"content": " Signalen:\nnemen de nieuwe waarde aan na een vertraging, hebben een hardware equivalent, worden toegekend met \u0026quot; \u0026lt;=\u0026quot; . Variabelen:\nnemen de nieuwe waarde onmiddellijk aan, hebben géén hardware equivalent, worden toegekend met \u0026quot; :=\u0026quot; , komen enkel voor in een proces. Signalen Volgende beschrijvingen leiden tot dezelfde implementatie:\narchitecture arch of vb1 is signal o1, o2, o3: std_logic; begin p: process(a, b, c, d, o1, o2, o3) begin q \u0026lt;= not o3; o1 \u0026lt;= a and b; o2 \u0026lt;= c and d; o3 \u0026lt;= o1 or o2; end process; end arch; architecture arch of vb2 is signal o1, o2, o3: std_logic; begin q \u0026lt;= not o3; o1 \u0026lt;= a and b; o2 \u0026lt;= c and d; o3 \u0026lt;= o1 or o2; end arch; architecture arch of vb3 is begin q \u0026lt;= not ((a and b) or (c and d)); end arch; Als we de tussenliggende signalen o1, o2 en o3 vergeten in de sensitivity list, is het gedrag niet meer zuiver combinatorisch. Volgend proces leidt dus niet tot dezelfde implementatie als de vorige voorbeelden:\narchitecture arch of vb4 is signal o1, o2, o3: std_logic; begin p: process(a, b, c, d) begin q \u0026lt;= not o3; o1 \u0026lt;= a and b; o2 \u0026lt;= c and d; o3 \u0026lt;= o1 or o2; end process; end arch; Resolutie-functie In het volgende voorbeeld worden er twee toekenningen gedaan aan hetzelfde signaal: signal a, b, z: std_logic; ... z \u0026lt;= a; z \u0026lt;= b; De resolutie functie die voorzien is in het type std_logic maakt een keuze tussen a en b op basis van de waarde van a en b. De resolutie-functie sluit niet uit dat de synthesetool (die de code omzet in hardware) een foutmelding kan geven.\nVariabelen Als we variabelen gebruiken in plaats van signalen, krijgen we opnieuw dezelfde implementatie:\narchitecture arch of vb5 is begin p: process(a, b, c, d) variable o1, o2, o3; begin q \u0026lt;= not o3; o1 := a and b; o2 := c and d; o3 := o1 or o2; end process; end arch; Voor code die hardware beschrijft (a.k.a. synthetiseerbare code) gebruiken we std_logic. In een testbench kunnen we wel variabelen gebruiken.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/900_zelfstudie/990_flipflop_latch/",
	"title": "Flipflop en latches",
	"tags": [],
	"description": "",
	"content": "D-flipflop De D-flip-flop is het basiselement van synchrone logica. De data bit wordt opgenomen in het geheugenelement op de stijgende of dalende flank van de klok. De data bit blijft in het geheugenelement aanwezig tot de volgende stijgende of dalende flank van de klok.\nEngelse benamingen:\npositive/negative edge triggered D-type flip-flop rising/falling edge triggered D-type flip-flop Positieve flank getriggerde D-FF in VHDL Proces met enkel de klok in de sensitivity list. Klok event komt overeen met de flank. Enkel if, geen else.\nlibrary ieee; use ieee.std_logic_1164.all; entity pos_dff is port( d, clk: in std_logic; q: out std_logic); end pos_dff; architecture arch_pos_dff of pos_dff is begin p_pos_dff: process(clk) begin if clk\u0026#39;event and clk = \u0026#39;1\u0026#39; then q \u0026lt;= d; end if; end process; end arch_pos_dff; Negatieve flank getriggerde D-FF in VHDL library ieee; use ieee.std_logic_1164.all; entity pos_dff is port( d, clk: in std_logic; q: out std_logic); end pos_dff; architecture arch_pos_dff of pos_dff is begin p_pos_dff: process(clk) begin if clk\u0026#39;event and clk = \u0026#39;0\u0026#39; then q \u0026lt;= d; end if; end process; end arch_pos_dff; Extra functies voor klokflanken In std_logic_1164 zijn de volgende functies gedefinieerd:\nrising_edge falling_edge Beide kolommen doen lijken funtioneel hetzelfde te doen, maar er is een subtiel verschil. Wanneer er gebruikt gemaakt wordt van het xxxx\u0026rsquo;event keyword, wilt dat zeggen er is een verandering in de waarde van xxxx. Als dit gevolgd wordt door de test clk = \u0026lsquo;1\u0026rsquo;, wilt dat zeggen dat deze conditie waar is voor elke overgang naar \u0026lsquo;1\u0026rsquo; (bv: \u0026lsquo;0\u0026rsquo; -\u0026gt; \u0026lsquo;1\u0026rsquo;, maar ook \u0026lsquo;X\u0026rsquo; -\u0026gt; \u0026lsquo;1\u0026rsquo; en \u0026lsquo;-\u0026rsquo; -\u0026gt; \u0026lsquo;1\u0026rsquo;)\nif rising_edge(clk) then if falling_edge(clk) then if clk\u0026#39;event and clk = \u0026#39;1\u0026#39; then if clk\u0026#39;event and clk = \u0026#39;0\u0026#39; then Voor de twee voorbeelden die gebruik maken van functies uit STD_LOGIC_1164, wordt een bepaalde \u0026ldquo;uitgangspositie\u0026rdquo; verwacht.\nrising_edge() geeft true wanneer een signaal van \u0026lsquo;0\u0026rsquo; of \u0026lsquo;L\u0026rsquo; verandert naar \u0026lsquo;1\u0026rsquo; of \u0026lsquo;H\u0026rsquo; falling_edge() geeft true wanneer een signaal van \u0026lsquo;1\u0026rsquo; of \u0026lsquo;H\u0026rsquo; verandert naar \u0026lsquo;0\u0026rsquo; of \u0026lsquo;L\u0026rsquo; D-latch Bij een D-latch worden de data binnengenomen gedurende de hele periode dat de klok hoog is. Een ontwerp met D-flip-flops is veel makkelijker te analyseren en managen dan een ontwerp met D-latches.\nD-latch in VHDL proces met klok en data in de sensitivity list geen klok event enkel if, geen else library ieee; use ieee.std_logic_1164.all; entity dlatch is port( d, clk: in std_logic; q: out std_logic); end dlatch; architecture arch_dlatch of dlatch is begin p_dlatch: process(clk, d) begin if clk = \u0026#39;1\u0026#39; then q \u0026lt;= d; end if; end process; end arch_dlatch; Ongewenste componenten Ongewenste latches Als niet alle mogelijkheden voorzien zijn, kan een combinatorisch circuit zich gedragen als een latch. Dit moet steeds vermeden worden.\nlibrary ieee; use ieee.std_logic_1164.all; entity fout is port( a, b: in std_logic; s: in std_logic_vector(1 downto 0); z: out std_logic); end fout; architecture arch_fout of fout is begin p_fout: process(a, b, s) begin if s = \u0026#34;00\u0026#34; then z \u0026lt;= a; elsif s = \u0026#34;01\u0026#34; then --er is geen beschrijving voor s is 10 of 11 z \u0026lt;= b; end if; end process; end arch_fout; Ongewenste registers Indien we voor een bepaald signaal geen register willen implementeren, moet dat signaal buiten het proces geplaatst worden.\nseq: process(clk) begin if clk\u0026#39;event and clk = \u0026#39;1\u0026#39; then j \u0026lt;= a and b; --register voor j i \u0026lt;= j xor k; end if; end process; seq: process(clk) begin if clk\u0026#39;event and clk = \u0026#39;1\u0026#39; then i \u0026lt;= j xor k; end if; end process; j \u0026lt;= a and b; --geen register voor j "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/900_zelfstudie/995_voorbeelden/",
	"title": "Voorbeelden",
	"tags": [],
	"description": "",
	"content": "Binair-naar-onehot decoder library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity bin_to_onehot is port( binair: in std_logic_vector(2 downto 0); decimaal: out std_logic_vector(0 to 7) ); end bin_to_onehot; architecture arch of bin_to_onehot is signal binair_i: std_logic_vector(2 downto 0); signal decimaal_i: std_logic_vector(0 to 7); begin binair_i \u0026lt;= binair; decimaal \u0026lt;= decimaal_i; p: process(binair_i) begin case binair_i is when \u0026#34;000\u0026#34; =\u0026gt; decimaal_i \u0026lt;= \u0026#34;10000000\u0026#34; ; when \u0026#34;001\u0026#34; =\u0026gt; decimaal_i \u0026lt;= \u0026#34;01000000\u0026#34; ; when \u0026#34;010\u0026#34; =\u0026gt; decimaal_i \u0026lt;= \u0026#34;00100000\u0026#34; ; when \u0026#34;011\u0026#34; =\u0026gt; decimaal_i \u0026lt;= \u0026#34;00010000\u0026#34; ; when \u0026#34;100\u0026#34; =\u0026gt; decimaal_i \u0026lt;= \u0026#34;00001000\u0026#34; ; when \u0026#34;101\u0026#34; =\u0026gt; decimaal_i \u0026lt;= \u0026#34;00000100\u0026#34; ; when \u0026#34;110\u0026#34; =\u0026gt; decimaal_i \u0026lt;= \u0026#34;00000010\u0026#34; ; when others =\u0026gt; decimaal_i \u0026lt;= \u0026#34;00000001\u0026#34; ; end case; end process; end arch; BCD-naar-7-segment decoder library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity bcd_to_7seg is port( bcd: in std_logic_vector(3 downto 0); seg7: out std_logic_vector(1 to 7) ); end bcd_to_7seg; architecture arch of bin_to_7seg is signal bcd_i: std_logic_vector(3 downto 0); signal seg7_i: std_logic_vector(1 to 7)); begin bcd_i \u0026lt;= bcd; seg7 \u0026lt;= seg7_i; p: process(bcd_i) begin case bcd_i is when \u0026#34;0000\u0026#34; =\u0026gt; seg7_i \u0026lt;= \u0026#34;1111110\u0026#34; ; when \u0026#34;0001\u0026#34; =\u0026gt; seg7_i \u0026lt;= \u0026#34;0110000\u0026#34; ; when \u0026#34;0010\u0026#34; =\u0026gt; seg7_i \u0026lt;= \u0026#34;1101101\u0026#34; ; when \u0026#34;0011\u0026#34; =\u0026gt; seg7_i \u0026lt;= \u0026#34;1111001\u0026#34; ; when \u0026#34;0100\u0026#34; =\u0026gt; seg7_i \u0026lt;= \u0026#34;0110011\u0026#34; ; when \u0026#34;0101\u0026#34; =\u0026gt; seg7_i \u0026lt;= \u0026#34;1011011\u0026#34; ; when \u0026#34;0110\u0026#34; =\u0026gt; seg7_i \u0026lt;= \u0026#34;1011111\u0026#34; ; when \u0026#34;0111\u0026#34; =\u0026gt; seg7_i \u0026lt;= \u0026#34;1110000\u0026#34; ; when \u0026#34;1000\u0026#34; =\u0026gt; seg7_i \u0026lt;= \u0026#34;1111111\u0026#34; ; when \u0026#34;1001\u0026#34; =\u0026gt; seg7_i \u0026lt;= \u0026#34;1111011\u0026#34; ; when others =\u0026gt; seg7_i \u0026lt;= \u0026#34;-------\u0026#34; ; end case; end process; end arch; Conditionele toekenning m.b.v. with-select Deze toekenning is equivalent aan een multiplexer. Overlap is verboden. \u0026quot; others\u0026quot; is altijd nodig. library ieee; use ieee.std_logic_1164.all; entity mux is port( a, b, c, d: in std_logic; s: in std_logic_vector(1 downto 0); z: out std_logic); end mux; architecture arch of mux is begin with s select z \u0026lt;= a when \u0026#34;00\u0026#34; , b when \u0026#34;01\u0026#34; , c when \u0026#34;10\u0026#34; , d when others; end arch; Conditionele toekenning m.b.v. when-else Deze toekenning is eveneens equivalent aan een multiplexer.\nlibrary ieee; use ieee.std_logic_1164.all; entity mux is port( a, b, c, d: in std_logic; s: in std_logic_vector(1 downto 0); z: out std_logic); end mux; architecture arch of mux is begin with s select z \u0026lt;= a when (s = \u0026#34;00\u0026#34; ) else b when (s = \u0026#34;01\u0026#34; ) else c when (s = \u0026#34;10\u0026#34; ) else d; end arch; Modulo 10 up counter library ieee; use ieee.std_logic_1164.all; use ieee.std_logic_unsigned.all; entity comb_reg is port( clk: in std_logic; q: out std_logic_vector(3 downto 0)); end comb_reg; architecture arch_comb_reg of comb_reg is signal count: std_logic_vector(3 downto 0); begin p_comb_reg: process(clk) begin if clk\u0026#39;event and clk = \u0026#39;1\u0026#39; then if count \u0026gt;= \u0026#34;1001\u0026#34; then count \u0026lt;= \u0026#34;0000\u0026#34; ; else count \u0026lt;= count + 1; end if; end if; end process; q \u0026lt;= count; end arch_comb_reg; Cyclic shift register library ieee; use ieee.std_logic_1164.all; entity cyclic_shift is port( clk: in std_logic; load_data: in std_logic; data_in: in std_logic_vector(7 downto 0); data_out: out std_logic_vector(7 downto 0)); end cyclic_shift; architecture arch_cyclic_shift of cyclic_shift is signal shift_register: std_logic_vector(7 downto 0); begin p_comb_reg: process(clk) begin if clk\u0026#39;event and clk = \u0026#39;1\u0026#39; then if load_data = \u0026#39;1\u0026#39; then shift_register \u0026lt;= data_in; else shift_register(0) \u0026lt;= shift_register(7); shift_register(7 downto 1) \u0026lt;= shift_register(6 downto 0); end if; end if; end process; data_out \u0026lt;= shift_register; end arch_cyclic_shift; "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/900_zelfstudie/997_lfsr/",
	"title": "Linear feedback shift register",
	"tags": [],
	"description": "",
	"content": "Als we een sequentie van getallen willen genereren, kunnen we een LFSR (linear feedback shift register) gebruiken. Een LFSR is een shift register, waarbij de inschuivende bit elke klokcyclus gelijk is aan de XOR van een aantal bits in de interne toestand. Op wikipedia staat uitgelegd welke bits er genomen moeten worden bij iedere grootte van LFSR.\nVoorbeeld 16 bit LFSR. Bron: Wikipedia library ieee; use ieee.std_logic_1164.all; entity LFSR is port( clk: in std_logic; load_data: in std_logic; reset: in std_logic; data_out: out std_logic_vector(15 downto 0)); end LFSR; architecture arch_LFSR of LFSR is signal shift_register: std_logic_vector(15 downto 0); begin p_comb_reg: process(clk) begin if clk\u0026#39;event and clk = \u0026#39;1\u0026#39; then if reset = \u0026#39;1\u0026#39; then shift_register \u0026lt;= (others =\u0026gt; \u0026#39;1\u0026#39;); --we resetten naar 1, anders loopt de LFSR vast else shift_register(0) \u0026lt;= shift_register(10) XOR shift_register(12) XOR shift_register(13) XOR shift_register(15); shift_register(15 downto 1) \u0026lt;= shift_register(14 downto 0); end if; end if; end process; data_out \u0026lt;= shift_register; end arch_LFSR; Een LFSR gebaseerd op XOR blijft stilstaan als alle bits 0 zijn. Als we dit niet willen kunnen in de plaats XNOR poorten gebruiken. Hierdoor blijft alles stilstaan als alle bits 1 zijn.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/",
	"title": "Digitale elektronische schakelingen",
	"tags": [],
	"description": "",
	"content": "Digitale elektronische schakelingen Image courtesy: pexels - Pixabay "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]