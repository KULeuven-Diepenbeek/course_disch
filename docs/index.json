[
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/000_intro/",
	"title": "Introductie",
	"tags": [],
	"description": "",
	"content": "Introductie Welkom bij het labo van Digitale Elektronische Schakelingen. Het uiteindelijke doel van het labo is om een simpele processor te maken. We gaan een HACK-processor maken zoals in de MOOC (Massive Open Online Course) nand2tetris. We maken deze processor in de taal VHDL. VHDL (Very High Speed Integrated Circuit Hardware Description Language) is een hardware beschrijvings taal. Dat wil zeggen dat alle code die we in deze cursus schrijven, een beschrijving geeft van een schakeling die opgebouwd kan worden met digitale componenten.\nDe beschrijvingen die we maken in HDL kunnen gebruikt worden om FPGA\u0026rsquo;s mee te configureren of om ASIC\u0026rsquo;s (Application-Specific Integrated Circuits) mee te maken.\nBeoordeling 40% van de punten van dit opleidingsonderdeel staan op dit labo. 60% staat op de theorie.\nEr zijn 5 opdrachten die moeten ingediend worden via Toledo.\nEr is ook verplichte aanwezigheid in het labo. De labopunten worden evenredig met de afwezigheden van de student tijdens het labo gereduceerd. Bijvoorbeeld, als een student maar op 70% van de labozittingen aanwezig is, krijgt hij/zij 70% van het toegekende labopunt.\nBij opdracht 5 heb je nodig wat je in opdracht 3 en 4 gemaakt hebt!\nzelfstudie De zelfstudie VHDL wordt verwacht gelezen te worden in de loop van de lessen. De zelfstudie FSM is niet nodig voor deze labo\u0026rsquo;s. Er komen vragen van beide zelfstudie modules in het theorie examen!\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/001_software/010_alternatief/",
	"title": "Alternatieve omgeving",
	"tags": [],
	"description": "",
	"content": "Alternatief voor thuis Als het niet mogellijk is om Vivado te installaren op je eigen laptop, dan kan je de site EDA playground om toch thuis verder te kunnen werken. Je kan hierop inloggen met je Google account (van UHasselt). Zorg dat je bij testbench + design VHDL hebt geselecteerd. Nu kan je de code in de testbench (links) en het design (rechts) zetten. Als de code er in zit moet je ook de top entity van het design aangeven, deze naam moet je bij Top entity invulllen. Bij tools \u0026amp; simulators selecteren we GHDL. GHDL is een gratis simulator die niet zelf detecteert wanneer de code stopt dus bij de simulator options moet je nog zetten \u0026ndash;stop-time=50ns om aan te geven hoe lang er gesimuleerd moet worden. Als laatste moeten we nog aanvinken dat we de EPWave willen openen na de run. De eind tijd van stop-time moet je natuurlijk aanpassen als je langer wil simuleren.\nOm de simulatie te starten druk je vanboven op de run knop.\nscreenshot hoe een nand gate simuleren met EDA playground "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/001_software/",
	"title": "Ontwikkel omgeving",
	"tags": [],
	"description": "",
	"content": "Ontwikkel omgeving Naast de \u0026ldquo;integrated circuits\u0026rdquo; (in de volksmond ook wel \u0026ldquo;chips\u0026rdquo; genoemd ðŸ˜ƒ) die een vaste functionaliteit hebben, bestaan er ook speciale IC\u0026rsquo;s waarvan je de functionaliteit kan aanpassen. De logische poorten (Gates, in het Engels) in die IC\u0026rsquo;s zijn configureerbaar of programmeerbaar (Programmable, in het Engels). Als er zo een groot aantal gates gebundeld worden (in een Array, in het Engels) en deze kunnen ter plaatste (in the Field, in het Engels) geherprogrammeerd worden, noemen we deze IC\u0026rsquo;s Field Programmable Gate Arrays, oftewel FPGAs.\nDe FPGA-markt wordt gedomineerd door 2 grote fabrikanten van FPGA\u0026rsquo;s: AMD en Intel. Beide spelers samen leveren meer dan 85% van alle FPGAs wereldwijd. Het simuleren en configureren van FPGAs gebeurt in een speciale ontwikkelomgeving: Quartus voor Intel FPGA\u0026rsquo;s en Vivado (vroeger ISE) voor AMD FPGA\u0026rsquo;s.\nTer info \u0026hellip; de originele FPGA producenten waren Xilinx en Altera. AMD nam Xilinx over (2022) en Intel nam Altera over (2015).\nVivado Wij schrijven de HDL-code voor dit opleidingsonderdeel in Vivado. Vivado is de omgeving van AMD en wordt gebruik voor de huidige families van FPGAs. Je kan de software downloaden van de site van AMD. Je moet wel een (gratis) account aanmaken om de software te kunnen downloaden. Deze software is enkel beschikbaar voor Windows en Linux.\nVivado vereist veel opslagruimte om te installeren \u0026gt;100 GB. Door minder types van FPGA\u0026rsquo;s te ondersteunen kan hier wel wat bij bespaard worden!\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/010_intro_vhdl/",
	"title": "1. Eerste project",
	"tags": [],
	"description": "",
	"content": "Eerste project Image courtesy: pexels - Pixabay "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/010_intro_vhdl/010_eerste_project/",
	"title": "Eerste project",
	"tags": [],
	"description": "",
	"content": "Maak een project We starten met een eerste vivado project maken. We beginnen natuurlijk met vivado op te starten en te klikken op create project. Je geeft het project een naam en zorgt dat je het op een plaats zet waar je het nog kan terugvinden. Bij project type zeggen we RTL project en vinken we \u0026ldquo;Do not specify sources at this time\u0026rdquo; aan.\nDe volgende keuze die gemaakt moet worden is het type van FPGA. Als part maakt het niet veel uit wat we kiezen. Het beste is om een FPGA te kiezen die gratis is te gebruiken met Vivado zoals de xc7z020.\nLet er op dat je in het pad naar je Vivado project geen spaties hebt!! Dus, geen paden zoals \u0026ldquo;C:\\school\\2e jaar\\disch\u0026rdquo; of \u0026ldquo;C:\\mijn documenten\\demo\u0026rdquo;\nNu krijgen we een omgeving die er zo uit ziet. Voeg HDL code toe Na het maken van een project, kunnen we HDL code toevoegen. Dit kan via de link add sources. Vervolgens komt er een keuze om een nieuw bestand te maken of om een reeds bestaande file toe te voegen. Kies voor een nieuwe file en voeg een vhdl design source toe. De tool vraagt vervolgens voor I/O port definitions, die kan je al instellen bij het maken van de vhdl file, maar kunnen later ook nog aangepast worden in de code.\nMerk op dat Vivado al een kleine aanzet geeft om van te beginnen. Onderstaande VHDL-code geeft een beschrijving zorgt voor een invertor die, zoals verwacht, de ingang geÃ¯nverteerd doorgeeft aan de uitgang.\nlibrary IEEE; use IEEE.STD_LOGIC_1164.ALL; entity invertor is Port ( A: in std_logic; Z: out std_logic ); end invertor; architecture Behavioral of invertor is begin Z \u0026lt;= NOT A; end Behavioral; Dit is een eenvoudige VHDL beschrijving en we zullen deze in detail onder de loep nemen.\nentity invertor is Port ( A: in std_logic; Z: out std_logic ); end invertor; De entity definieert de input en de outputs van het (sub-)design dat we beschrijven. Het design heeft als naam gekregen: invertor. Vervolgens zien in de lijst van poorten dat deze component 2 poorten heeft: een ingang A en een uitgang Z.\nDeze component is dus een IC met twee pinnen en de entity blok omschrijft als het ware enkel de behuizing.\nDe tweede blok architecture beschrijft wat er IN de behuizing zit. Ook deze beschrijving kunnen we een naam geven: Behavioural. Alles wat er vervolgens beschreven wordt tussen de begin en end definieert het gedrag van de component.\narchitecture Behavioral of invertor is begin Z \u0026lt;= NOT A; end Behavioral; library IEEE; use IEEE.STD_LOGIC_1164.ALL; Tenslotte zijn er nog de eerste twee regels van de beschrijving. De eerste regel zegt dat er een library genaamd IEEE gebruikt wordt in deze beschrijving. De tweede regel zegt dat er uit deze library de package STD_LOGIC_1164 volledig (.ALL) gebruikt wordt. Wat dit precies wilt zeggen, daar wordt later op teruggekomen.\nHet is uitermate belangrijk dat het besef blijft dat VHDL (of iedere andere HDL) louter een beschrijving geeft van een hardware design. Dit wilt zeggen dat het mogelijk moet zijn een schema te tekenen !!!\nDe beschrijving van de de component hierboven is in een schema te tekenen als een invertor of NIET-poort.\nThe entity and architecture of the invertor std_logic Omdat we de package IEEE.STD_LOGIC_1164 gebruiken kunnen we het typen std_logic gebruiken. Dit is het type dat we meestal gebruiken wanneer we met signalen werken in een hardware beschrijving. std_logic kan 9 verschillende waardes aannemen. Meestal gebruiken we \u0026lsquo;0\u0026rsquo; en \u0026lsquo;1\u0026rsquo;. Hieronder zijn de mogellijke waardes opgelijst met uitleg.\n\u0026#39;U\u0026#39;, -- Uninitialized : flipflop waar nog nooit in is geschreven \u0026#39;X\u0026#39;, -- Forcing Unknown \u0026#39;0\u0026#39;, -- Forcing 0 : rechtstreeks aan grond \u0026#39;1\u0026#39;, -- Forcing 1 : rechtstreeks aan voeding \u0026#39;Z\u0026#39;, -- High Impedance \u0026#39;W\u0026#39;, -- Weak Unknown \u0026#39;L\u0026#39;, -- Weak 0 : via weerstand aan grond \u0026#39;H\u0026#39;, -- Weak 1 : via weerstand aan voeding \u0026#39;-\u0026#39;, -- Don\u0026#39;t Care"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/010_intro_vhdl/020_nand/",
	"title": "NAND poort",
	"tags": [],
	"description": "",
	"content": "De volgende stap is de beschrijving van een logisch NAND poort. Hiervoor maak je een nieuwe component aan in het Vivado project. Het grootste deel van de code van de invertor kunnen we overnemen als startpunt voor deze beschrijving.\nWe passen de entity aan zodat we 2 inputs hebben in plaats van 1. De behuizing van de nieuwe component zegt nu dat er 3 pinnen zijn: 2 input pinnen en 1 output pin.\nUiteraard moet het gedrag van deze component ook aangepast worden. In de architecture schrijven we dat we een NAND operatie willen doen. De basis poort NAND is ook beschikbaar als keyword in VHDL.\n-------------------------------- -- Revision Date Author Comments -- v0.2 20240118 VlJo Initial version -------------------------------- library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity nand_gate is Port ( A : in std_logic; B : in std_logic; Z : out std_logic ); end nand_gate; architecture Behavioral of nand_gate is -- (DE-)LOCALISING IN/OUTPUTS signal A_i : STD_LOGIC; signal B_i : STD_LOGIC; signal Z_i : STD_LOGIC; begin -------------------------------- -- (DE-)LOCALISING IN/OUTPUTS -------------------------------- A_i \u0026lt;= A; B_i \u0026lt;= B; Z \u0026lt;= Z_i; -------------------------------- -- COMBINATORIAL -------------------------------- Z_i \u0026lt;= A_i nand B_i; end Behavioral; NAND gate Nog enkele bijkomende opmerkingen: VHDL is case-insensitive. Je mag dus hoofdletters en kleine letters verwisselen. commentaar wordt vooraf gegaan van 2 min-tekens -- Het is good-practice om niet meteen te werken met de in- en uitgangen, maar met lokale signalen. Daarom wordt in dit voorbeeld deze \u0026ldquo;vertaalslag\u0026rdquo; gemaakt. commentaar kan NOOIT kwaad Voor deze simpele voorbeelden lijkt het banaal om de link met de discrete component (en de bijhorende schematic) te leggen. Een goede designer verliest echter het volledige schema NOOIT uit het oog.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/010_intro_vhdl/025_and/",
	"title": "AND poort",
	"tags": [],
	"description": "",
	"content": "Heb gÃ©Ã©n schrik van deze titel. We gaan zeker niet alle componenten 1-voor-1 afgaan ðŸ˜ƒ.\nUiteraard gaan complexere designs moeilijk te beschrijven zijn in Ã©Ã©n enkel bestand. Componenten kunnen hergebruikt worden in andere componenten. Laat ons als voorbeeld een AND poort bouwen met behulp van de eerder geziene NAND poort en de invertor. Het schema van ons design ziet er dus als volgt uit.\nDe AND gate, gebouwd met behulp van een NAND en een invertor -------------------------------- -- KU Leuven - ESAT/COSIC - ES\u0026amp;S -------------------------------- -- Module Name: and_gate - Behavioural -- Project Name: Digitale elektronische schakelingen -- Description: Een voorbeeld van een and-gate, gebouwd -- met een nand en een invertor. -- -- Revision Date Author Comments -- v0.1 20240118 VlJo Initial version -- -------------------------------- library IEEE; -- gebruik de package STD_LOGIC_1164 uit de library use IEEE.STD_LOGIC_1164.ALL; entity and_gate is port( A: IN STD_LOGIC; B: IN STD_LOGIC; Z: OUT STD_LOGIC ); end entity and_gate; architecture Behavioural of and_gate is -- COMPONENT DECLARATIONS component inverter is port( A: IN STD_LOGIC; Z: OUT STD_LOGIC ); end component inverter; component nand_gate is port( A: IN STD_LOGIC; B: IN STD_LOGIC; Z: OUT STD_LOGIC ); end component nand_gate; -- (DE-)LOCALISING IN/OUTPUTS signal A_i : STD_LOGIC; signal B_i : STD_LOGIC; signal Z_i : STD_LOGIC; -- INTERNAL SIGNALS signal x : STD_LOGIC; begin -------------------------------- -- (DE-)LOCALISING IN/OUTPUTS -------------------------------- A_i \u0026lt;= A; B_i \u0026lt;= B; Z \u0026lt;= Z_i; -------------------------------- -- COMBINATORIAL -------------------------------- nand_gate_inst00: component nand_gate port map( A =\u0026gt; A_i, B =\u0026gt; B_i, Z =\u0026gt; X ); inverter_inst00: component inverter port map( A =\u0026gt; X, Z =\u0026gt; Z_i ); end Behavioural; De beschrijving van deze AND poort begint met het gebruiken van een package (STD_LOGIC_1164) uit een library (IEEE).\nVervolgens is er opnieuw de entity block die aangeeft dat dit design 2 ingangspinnen heeft en 1 uitgangspin.\nIn de architecture verschijnt er iets nieuws. Tussen architecture en begin kunnen er declaraties gebeuren. Dit kunnen zowel declaraties zijn van signalen als van compontenten.\nAls er andere entities gebruikt gaan worden, dan moeten we aangeven hoe deze er uit zien. Volgens ons schema gaan we gebruik maken van een NAND poort van en van een invertor. Deze twee component dienen dus gedeclareerd te worden.\nMerk op dat een component-declaratie exact hetzelfde beschreven wordt als de entity van de component zelf. Vervang het woordje entity door component.\nDe declaratie van een signaal is simpelweg duidelijk maken dat er een draadje gebruikt gaat worden, van een bepaald type en met een bepaalde naam.\nEen component instantiÃ«ren Volgens het design dienen we 2 componenten te gebruiken. Beide zijn hierboven reeds gedeclareerd. Deze declaratie is enkel om de tools duidelijk te maken hoe deze component er uit ziet.\nTussen de begin en end van de architecture kan er een instantiatie gemaakt worden van reeds gedeclareerde componenten.\nBi het instantieren kan er een naam gegeven worden aan de instantiatie. In het voorbeeld zijn de anmen nand_gate_inst00 en inverter_inst00. Na de naamgeving wordt duidelijk gemaakt over welke component het gaat (component nand_gate). Uiteindelijk moet er port map gebeuren. Iedere in- en uitgang moet ergens aan gehangen worden. Dit kan soms een beetje verwarrend lijken, maar het idee is dat er voor iedere in- en uitgang het volgende staat:\nLINKS =\u003e RECHTS (komma) LINKS staat de naam van de poort van de component, RECHTS staat de naam van het signaal dat hierop aangesloten wordt.\nVerschillende poorten worden gescheiden door een komma (,). Dit wilt dus zeggen dat er na de laatste mapping geen komma meer mag volgen.\nIn de bovenstaande beschrijving van de AND poort gebruiken we een NAND en een INV. Voor de volledigheid geven we nog even mee dat er ook een keyword AND bestaat: Z_i \u0026lt;= A_i AND B_i; was dus een perfect alternatief geweest ðŸ˜‰.\nAlle lijnen \u0026hellip; tegelijk In tegenstelling tot alle software die jullie tot hier toe geprogrameerd hebben, is er Ã©Ã©n heel belangrijk, conceptueel verschil met deze hardware beschrijving. Iedere lijn tussen de begin en end van de architecture wordt TEGELIJKERTIJD uitgevoerd. Het kan uiteraard (zoals in dit voorbeeld) dat het resultaat van Ã©Ã©n blok afhangt van het resultaat van een ander blok, maar zowel de NAND-gate als de invertor zijn tegelijkertijd aan het werken.\nDenk nog eens terug aan de beschrijving op de MUDEC. Het IC met de AND poort werkt ook simultaan met het IC met de invertor.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/010_intro_vhdl/030_simulatie/",
	"title": "Simulatie",
	"tags": [],
	"description": "",
	"content": "Hoe kan er nu getest worden of onze nand poort correct werkt? We zouden een ASIC kunnen maken, maar dat zou een veel te dure en tijdrovende manier zijn.\nEen realistischere manier is om het design te implementeren op een FPGA, maar er is nog een gemakkelijkere en nuttigere manier: testbenches.\nHet idee achter een testbench is dat er \u0026ldquo;toestellen\u0026rdquo; zijn die inputs (ook stimuli genoemd) kunnen genereren. Vervolgens kunnen de waveforms van het hele design visueel geanalyseerd worden Ã©n kan de output van een component geverifieerd worden.\nIn dit opleidingsonderdeel krijgen jullie vaak de testbenches, maar het is goed om deze zelf aan te passen of uit te breiden.\nVoorbeeld: testbench voor een NAND poort Maken van een testbench Met onderstaande testbench kunnen we testen of onze nand poort werkt. Er moet een nieuwe simulation source aangemaakt worden en onderstaande testbench dient hierin geplakt te worden. Merk op dat ook de testbench geschreven is in (V)HDL.\nCommentaar Alhoewel dit geen verplicht stuk is, is het altijd nuttig om commentaar te voorzien.\nGebruik packages Deze testbench begint, net zoals de componenten, met het gebruiken van een package (STD_LOGIC_1164) uit een library (IEEE). Dit is uiteraard nodig omdat we anders geen definitie hebben van wat een STD_LOGIC type is.\nEen lege entitity Vervolgens is er ook een entity block. Merk hier zeker bij op dat een testbench typisch GEEN input en/of output poorten heeft.\nDeclaraties In de architecture gebeuren opnieuw eerst enkele declaraties. Zowel de component als de gebruikte signalen dienen gedeclareerd te worden.\nDUT Er wordt een component instantiatie gemaakt van de nand_gate in deze testbench. De naam van deze instantie is DUT, wat een acronym is van Device Under Test. UUT (Unit Under Test) wordt ook soms gebruikt\nStimuli Tenslotte is er nog Ã©Ã©n blok dat de stimuli beschrijft. Dit is een speciaal soort blok (een process) waar we later nog op terug komen. Wat er tussen de begin en end van een process beschreven staat, wordt sequentieel overlopen (hiermee wordt bedoeld: zoals bij een C-programma). Wees er echter van bewust dat de hele process-block TEGELIJKERTIJD loopt met de DUT.\nDe correcte werking van de NAND poort wordt in deze testbench nagegaan door alle mogelijke logische combinaties aan te leggen aan de ingangen van nullen en enen.\n-------------------------------- -- KU Leuven - ESAT/COSIC - ES\u0026amp;S -------------------------------- -- Module Name: nand_tb - Behavioural -- Project Name: Digitale eletronische schakelingen -- Description: Testbench for nand -- -- Revision Date Author Comments -- v1.0 20240118 VlJo Initial version -- -------------------------------- library IEEE; use IEEE.STD_LOGIC_1164.ALL; -- use IEEE.NUMERIC_STD.ALL; entity nand_tb is end entity nand_tb; architecture Behavioural of nand_tb is component nand_gate is port( A: IN STD_LOGIC; B: IN STD_LOGIC; Z: OUT STD_LOGIC ); end component nand_gate; signal input_a, input_b : STD_LOGIC; signal output_z : STD_LOGIC; begin -------------------------------- -- STIMULI -------------------------------- PSTIM: process begin input_a \u0026lt;= \u0026#39;0\u0026#39;; input_b \u0026lt;= \u0026#39;0\u0026#39;; wait for 10 ns; input_a \u0026lt;= \u0026#39;1\u0026#39;; input_b \u0026lt;= \u0026#39;0\u0026#39;; wait for 10 ns; input_a \u0026lt;= \u0026#39;0\u0026#39;; input_b \u0026lt;= \u0026#39;1\u0026#39;; wait for 10 ns; input_a \u0026lt;= \u0026#39;1\u0026#39;; input_b \u0026lt;= \u0026#39;1\u0026#39;; wait for 10 ns; wait; end process; -------------------------------- -- DUT -------------------------------- DUT: component nand_gate port map( A =\u0026gt; input_a, B =\u0026gt; input_b, Z =\u0026gt; output_z ); end Behavioural; Om een testbench toe te voegen aan het Vivado project is het belangrijk erop te letten dat je een Simulation source toevoegd. In deze testbench kan je vervolgens bovenstaande code plakken.\nRunnen van een testbench Als alle code beschreven is, kan de bovenstaante simulatie uitgevoerd worden. Er zijn meerdere manieren om een simulatie te starten en deze zul je ontdekken doorheen de labs.\nDe gemakkelijkste manier is om in de Flow Navigator (de verticale balk aan de linkerkant van het scherm) te klikken op: Run simulation. Als alles goed loop zou je (ongeveer) onderstaand scherm moeten krijgen.\nSimulatie van de nand gate met Vivado Je ziet hierin de inputs en de output van de DUT. De tijd verstrijkt over de X-as. Als beide inputs of Ã©Ã©n van beide inputs \u0026lsquo;hoog\u0026rsquo; is, is de uitgang ook \u0026lsquo;hoog\u0026rsquo;. Indien beide ingangen \u0026lsquo;hoog\u0026rsquo; zijn, is de uitgang \u0026rsquo;laag\u0026rsquo;.\nDat is exact wat een NAND poort moet doen !! (gelukkig)\nAls het design gesimuleerd wordt met een open-source simulator krijgen we een identiek resultaat.\nSimulatie van de nand gate met GHDL en GTKWave "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/010_intro_vhdl/031_synthesisable/",
	"title": "Synthetiseerbaar",
	"tags": [],
	"description": "",
	"content": "Synthesisable subset Tot hier hebben we gekeken naar de beschrijving van enkele discrete componenten. Deze componenten hebben beschreven in VHDL. Daarnaast hebben we een eerste testbench gemaakt ter verificatie van het ontwerp. Ook deze testbench is beschreven in VHDL. Dit is wellicht een goed moment om even aan te halen dat er ook andere HDL (hardware description languages) bestaan. Wellicht is de meest bekende (en meest gebruikte) taal verilog. De meest recente, wijd-verspreide taal is SystemVerilog, welke (zoals de naam doet vermoeden) gebaseeerd is op verilog. Dan zijn er ook nog HDLs die naar software talen leunen zoals: SystemC (C-like), MyHDL (Python-like) of Lava (Haskell-like).\nHet is belangrijk om te weten dat niet alle (V)HDL code synthesisable is. Wat wordt daarmee bedoeld?\nOf er nu voor FPGA of ASIC ontwikkeld wordt, de eerste stap van de toolchain is Synthesis. Tijdens de synthese wordt de HDL omgezet in een netlist. Dit is feitelijk niets anders dan een lijst van electronische componenten samen met een set van hoe deze verbonden zijn. Dit wilt dus zeggen: er moet een werkelijke component zijn voor (een deel van) de beschrijving.\nAlle keywords en constructies van een HDL waarvoor een fysieke implementatie bestaat wordt synthetiseerbare code genoemd:\nkeyword AND: is een beschrijving voor een logische poort poort richting IN: is een beschrijving voor een richting van een poort Z_i \u0026lt;= x: is het leggen een draadje tussen de draadjes Z_i en x In de testbench hebben we constructie gebruikt zoals wait for 10 ns;. Voor deregelijke instructies bestaat er geen fysieke implementatie. Deze code noemen we (surprise, surprise): niet-synthetiseerbare code.\nQuasi alle hardware beschrijvingstalen hebben zowel de mogelijkheid tot het schrijven van synthetiseerbare en niet-synthetiseerbare code. Dit eerste is voor designs te beschrijven, terwijl het tweede is om designs te testen.\nEnkele voorbeelden van niet-synthetiseerbare code: wait for 10ns; wait until ready = \u0026#39;1\u0026#39;; for i in 1 to 10 loop test_signaal \u0026lt;= NOT test_signaal; wait for 10ns; end loop; ..."
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/010_intro_vhdl/040_opdracht/",
	"title": "Opdracht 1: OR gate",
	"tags": [],
	"description": "",
	"content": "Als eerste opdracht in deze labo\u0026rsquo;s gaan jullie zelf een OR gate maken. In plaats van gebruik te maken van het OR keyword, moÃ©t deze gate gemaakt worden met uitsluitend NAND poorten. Maak hiervoor een nieuw bestand aan waarin je de beschrijving kwijt kan. Om te weten of de implementatie werkt, moet er ook een testbench geschreven worden. Deze kan dan gebruiken om het design te simuleren.\nDe schematic voor de OR poort (voor zij die het vergeten zouden zijn) is:\nOR gate De entity voor de OR poort moÃ©t als volgt zijn:\nentity or_gate is port( A : IN STD_LOGIC; B : IN STD_LOGIC; Z : OUT STD_LOGIC ); end entity or_gate; Opleveren Om deze opdracht op te leveren moeten jullie volgende bestanden indienen via Toledo:\nÃ©Ã©n (of meerdere) bestanden met het design Ã©Ã©n bestand met de testbench [OPTIONEEL] een markdown file met nodige uitleg Deze laatste is misschien nog niet nuttig voor deze opdracht, maar mogelijks wel voor latere opdrachten. Deze file geeft je de mogelijkheid om extra info mee te sturen.\nLaad enkel de bovenvernomende bestanden op in Toledo. Het is NIET de bedoeling om een volledig Vivado project te zippen en in te dienen !!\nDe VHDL broncode van de voorbeelden uit dit hoofdstuk kun je vinden op GitHub.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/200_next_step/",
	"title": "2. Volgende stap",
	"tags": [],
	"description": "",
	"content": "Volgende stap Image courtesy: pexels - Porapak Apichodilok "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/200_next_step/240_vectors/",
	"title": "Vectors",
	"tags": [],
	"description": "",
	"content": "Soms moet of wil je met arrays of groepen van bits werken. Natuurlijk gaat dit ook in VHDL en in VHDL worden dit vectors genoemd. Als we een array van 8 bits willen dan beschrijven we dat in Ã©Ã©n van de twee onderstaande opties.\nsignal result: std_logic_vector(7 downto 0); signal outcome: std_logic_vector(0 to 7); Een vector van 8 bits, Little Endian, met LSB en MSB aanduiding Stel dat we het getal 213 willen voorstellen. Hexadecimaal wordt dit 0xD5 en in binaire notatie is dit 0b11010101. Zoals in de meeste moderne Europese talen, lezen we van links naar rechts. Het cijfer 3 in 213 geeft het aantal eenheden mee. Dit cijfer heeft het minste gewicht en wordt het minst beduidend genoemd. De meest rechtse bit noemen we deze bit de minst-beduidende bit, of least significant bit (LSB), en deze staat rechts. Deze afspraak wordt Little endian genoemd. Indien we de LSB links zetten, spreken we van Big endiann.\nIs het sop de kool waard? Waarom zouden we daar nu moeilijk over doen? Denk eens na over de volgende twee regels C-code.\nunsigned char value_x[3] = {2, 1, 3}; unsigned char value_y = 213; Hieronder is een mooie illustratie van het verschil. Laat u niet ver(r)assen door het Endian-monster! Image courtesy: LinkedIn - ByteByteGo Wat is nu het verschil tussen result en outcome van de hierboven gedeclareerde signalen? De binaire vector 11010101 blijft altijd hetzelfde, bv de voorlaatste bit is een \u0026lsquo;0\u0026rsquo;. Het verschil zit hem in het indexeren. Deze bit is result(1) ofwel outcome(6). De waarde in de vector verandert niet!!\nVoorbeeld Als voorbeeld van het gebruik van vectoren wordt hieronder de code gegeven voor een 4-bit AND poort\n-------------------------------- -- KU Leuven - ESAT/COSIC - ES\u0026amp;S -------------------------------- -- Module Name: 4-bit and_gate - Behavioural -- Project Name: Digitale elektronische schakelingen -- Description: Een voorbeeld van een 4-bit and-gate. -- X geeft een bits-gewijze AND van A en B -- Z geeft een 4-bit and van A -- Revision Date Author Comments -- v0.1 20240118 VlJo Initial version -- -------------------------------- library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity fourbit_and_gate is port( A: IN STD_LOGIC_VECTOR(3 downto 0); B: IN STD_LOGIC_VECTOR(3 downto 0); X: OUT STD_LOGIC_VECTOR(3 downto 0); Z: OUT STD_LOGIC ); end entity fourbit_and_gate; architecture Behavioural of fourbit_and_gate is -- (DE-)LOCALISING IN/OUTPUTS signal A_i : STD_LOGIC_VECTOR(3 downto 0); signal B_i : STD_LOGIC_VECTOR(3 downto 0); signal X_i : STD_LOGIC_VECTOR(3 downto 0); signal Z_i : STD_LOGIC; begin -------------------------------- -- (DE-)LOCALISING IN/OUTPUTS -------------------------------- A_i \u0026lt;= A; B_i \u0026lt;= B; X \u0026lt;= X_i; Z \u0026lt;= Z_i; -------------------------------- -- COMBINATORIAL -------------------------------- Z \u0026lt;= A_i(0) AND A_i(1) AND A_i(2) AND A_i(3); X_i(0) \u0026lt;= A_i(0) AND B_i(0); X_i(1) \u0026lt;= A_i(1) AND B_i(1); X_i(2) \u0026lt;= A_i(2) AND B_i(2); X_i(3) \u0026lt;= A_i(3) AND B_i(3); -- wat ook mag is: --X_i \u0026lt;= A_i AND B_i; end Behavioural; Nog enkele bijkomende opmerkingen: een 4-bit vector moÃ©t niet altijd index 0 bevatten: signal voorbeeld : STD_LOGIC_VECTOR(4 downto 1) is ook geldig indexen worden geselecteerd met gewone haakjes \u0026lsquo;(\u0026rsquo; en \u0026lsquo;)\u0026rsquo; namen (van poorten, signalen, variabelen, entities, \u0026hellip;) moeten aan bepaalde voorwaarden voldoen: beginnen met een letter mogen voor de rest letters of cijfers bevatten mogen gÃ©Ã©n spaties of \u0026lsquo;-\u0026rsquo;-tekens bevatten een underscore (\u0026rsquo;_\u0026rsquo;) is toegestaan, maar niet als laatste karakter twee opeenvolgende underscores is niet toegestaan zijn hoofdletter-ongevoelig mogen geen keyword (signal, begin, procedure, \u0026hellip;) zijn er bestaan verschillende manieren om toekenningen te doen: bv \u0026ldquo;0001\u0026rdquo; aan Q_i Q_i \u0026lt;= \u0026ldquo;0001\u0026rdquo;; \u0026ndash; handig voor hardcoding Q_i \u0026lt;= (0 =\u0026gt; \u0026lsquo;1\u0026rsquo;, others =\u0026gt; \u0026lsquo;0\u0026rsquo;); \u0026ndash; handig voor langere vectoren Q_i(0) \u0026lt;= \u0026lsquo;1\u0026rsquo;; Q_i(1) \u0026lt;= \u0026lsquo;0\u0026rsquo;; Q_i(2) \u0026lt;= \u0026lsquo;0\u0026rsquo;; Q_i(3) \u0026lt;= \u0026lsquo;0\u0026rsquo;; \u0026ndash; handig bij ingewikkeldere designs "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/200_next_step/250_signals/",
	"title": "Signals",
	"tags": [],
	"description": "",
	"content": "Natuurlijk hebben we soms ook tussensignalen nodig in ons project/code. Hiervoor gebruiken we signals. Signals declareer je na de architecture maar voor het begin keyword, zoals in het voorbeeld hieronder.\nlibrary IEEE; use IEEE.STD_LOGIC_1164.ALL; entity signal_example is Port (A_vector: in std_logic_vector(7 downto 0); Y_vector: out std_logic_vector(7 downto 0)); end signal_example; architecture Behavioral of signal_example is signal tussenresultaat: std_logic; begin tussenresultaat \u0026lt;= A_vector(0) AND A_vector(1); Y_vector(7) \u0026lt;= tussenresultaat; Y_vector(6 downto 0) \u0026lt;= A_vector(7 downto 1); end Behavioral; "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/200_next_step/260_processen/",
	"title": "Processen",
	"tags": [],
	"description": "",
	"content": "Een basis component die vaak voorkomt is een multiplexer.\n2-naar-1 multiplexer ... architecture Behavioral of ... ... signal rotate_left : STD_LOGIC_VECTOR(7 downto 0); signal rotate_right : STD_LOGIC_VECTOR(7 downto 0); signal MUX_select : STD_LOGIC; signal transformed : STD_LOGIC_VECTOR(7 downto 0); ... begin ... -- optie 1 transformed \u0026lt;= rotate_left when MUX_select = \u0026#39;0\u0026#39; else rotate_right; -- optie 2 with MUX_select select transformed \u0026lt;= rotate_left when \u0026#39;0\u0026#39;, rotate_right when others; -- optie 3 PMUX: process(rotate_left, rotate_right, MUX_select) begin if MUX_select = \u0026#39;0\u0026#39; then transformed \u0026lt;= rotate_left; else transformed \u0026lt;= rotate_right; end if; end process; ... end Behavioral; In het voorbeeld hierboven zijn er twee signalen rotate_left en rotate_right. EÃ©n van beide wordt doorverbonden met het signaal transformed. Welke van beide mogelijkheden doorgegeven wordt, wordt bepaald door de waarde van het signaal MUX_select (\u0026lsquo;0\u0026rsquo;: rotate_left en \u0026lsquo;1\u0026rsquo;: rotate_right). Note that select is a keyword.\nAlle drie de opties zijn geldige VHDL constructies. Met de netlist (die gegenereerd wordt door de synthese-tool) in achterhoofd, is er geen verschil tussen de drie opties.\nOptie 1 geeft een handige manier handige manier indien er maar 2 opties zijn. Optie 2 geeft een handige manier handige manier indien er meer dan 2 opties zijn. Optie 3 geeft een handige manier handige manier indien er meer complexiteit nodig is. De derde optie vergt nog een extra woordje uitleg. Een process is een set van instructies, tussen begin en end die sequentieel uitgevoerd wordt. De vraag die zich dan stelt is: \u0026ldquo;Wanneer wordt deze lijst van instructies uitgevoerd ?\u0026rdquo;. Om dit te definiÃ«ren is er de sensitiviy list. Dit is een oplijsting van signalen die, wanneer ze veranderen van waarde, het proces triggeren.\nTenslotte dient er nog vermeld te worden dat een process een naam kan hebben. In het voorbeeld is dit: PMUX.\nMerk op dat de regels tussen begin en end van het process eigenlijk niet-synthetiseerbaar zijn. In het geheel van het process, wordt het wel synthetiseerbaar.\nEen tweede opmerking is er (bewust) een mismatch is tussen de schematic en de code, met name: de breedte van de signalen. Als er twee draden zijn die naar 1 draad moeten gaan, volstaat een 2-naar-1 multiplexer. Indien er echter 2 bussen zijn die naar 1 bus moeten gaan, zijn er meerdere multiplexers nodig. In het geval van een 8-bit bus, worden het acht 2-naar-1 multiplexers.\nEen subtiliteitje Q: Wat zijn de mogelijke waardes die MUX_select kan hebben ?\nWelke manier van beschrijven is het beste? Dat is een simpele vraag en het eenvoudige antwoord hierop is: het maakt niet uit. \u0026ldquo;Waarom ?\u0026rdquo;, hoor ik je zeggen?\nLaat ons even teruggaan naar het begin:\nwe willen hardware ontwerpen die een bepaalde functionaliteit bekomt wij, als hardware designers, denken hard na (LOL, sorry) en komen op de proppen met een ontwerp op een of andere manier moeten we dit ontwerp duidelijk maken aan de computer, meer bepaald de design tools om dit te behalen gebruiken we een HDL Zolang de tools weten, in dit geval, dat we een multiplexer bedoelen, maakt de hoeveelheid schrijfwerk NIETS uit "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/200_next_step/280_generate/",
	"title": "Generate",
	"tags": [],
	"description": "",
	"content": "Een generate is handig als je vaak VHDL-code moet herhalen. Meestal kan je dan een generate statement gebruiken om te voorkomen dat je te veel moet kopiÃ«ren en plakken.\nDe generate gaat in dit voorbeeld van 0 tot 6 omdat 6+1 al 7 is, wat het laatste element van de array is.\nlibrary IEEE; use IEEE.STD_LOGIC_1164.ALL; entity generate_example is Port (A_vector: in std_logic_vector(7 downto 0); Y_vector: out std_logic_vector(7 downto 0)); end generate_example; architecture Behavioral of generate_example is begin GEN : for i in 0 to 6 generate Y_vector(i) \u0026lt;= A_vector(i) AND A_vector(i+1); end generate; Y_vector(7) =\u0026gt; \u0026#39;0\u0026#39;; end Behavioral; Schematische voorstelling Vivado kan een schematische voorstelling maken van de hardware beschrijving met RTL analysis elaborate design.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/200_next_step/285_generic/",
	"title": "Generic",
	"tags": [],
	"description": "",
	"content": "Sommige studenten hebben misschien al door dat de componenten tot hiertoe niet goed schaalbaar zijn. Wat als er nu nood is aan een 6-bit XOR poort? Moeten we dan voor iedere mogelijke breedte een nieuwe component maken? Nee! Dit kunnen we oplossen door generics te gebruiken. Als voorbeeld hebben we een 8-bit AND poort die generic is en kan schalen.\nGeneric AND voorstelling Je kan deze AND poort beschrijven met onderstaand code. De variable N wordt gebruikt als het aantal inputs.\n-------------------------------------------------------------------------------- -- KU Leuven - ESAT/COSIC - Emerging technologies, Systems \u0026amp; Security -------------------------------------------------------------------------------- -- Module Name: nbit_and - Behavioural -- Project Name: Digitale eletronische schakelingen -- Description: n-bit AND poort ter illustratie van het gebruik van generics -- -- Revision Date Author Comments -- v0.1 20140119 VlJo Initial version -- -------------------------------------------------------------------------------- library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity nbit_and is Generic( N : integer := 8 ); Port ( A_vector: in std_logic_vector(N-1 downto 0); B_vector: in std_logic_vector(N-1 downto 0); Z_vector: out std_logic_vector(N-1 downto 0) ); end nbit_and; architecture Behavioral of nbit_and is -- (DE-)LOCALISING IN/OUTPUTS signal A_vector_i : std_logic_vector(N-1 downto 0); signal B_vector_i : std_logic_vector(N-1 downto 0); signal Z_vector_i : std_logic_vector(N-1 downto 0) begin -------------------------------- -- (DE-)LOCALISING IN/OUTPUTS -------------------------------- A_vector_i \u0026lt;= A_vector; B_vector_i \u0026lt;= B_vector; Z_vector \u0026lt;= Z_vector_i; -------------------------------- -- COMBINATORIAL -------------------------------- Z_vector_i \u0026lt;= A_vector_i AND B_vector_i; end Behavioral; Voor integers wordt er := gebruikt in VHDL.\nAls we dergelijk beschreven AND poort willen gebruiken, kunnen we de N waarde aanpassen. In dit voorbeeld wordt de nbit_and twee maal geÃ¯nstantieerd: een keer op 4 en een keer op 91.\n... architecture Behavioral of demo is component nbit_and is Generic( N : integer := 8 ); Port ( A_vector: in std_logic_vector(N-1 downto 0); B_vector: in std_logic_vector(N-1 downto 0); Z_vector: out std_logic_vector(N-1 downto 0) ); end component nbit_and; ... begin mijn_4_bit_and_poort: component nbit_and generic map( N =\u0026gt; 4) port map ( A_vector =\u0026gt; een_vier_bit_a, B_vector =\u0026gt; een_vier_bit_b, Z_vector =\u0026gt; een_vier_bit_z); ... mijn_91_bit_and_poort: component nbit_and generic map( N =\u0026gt; 91) port map ( A_vector =\u0026gt; een_eenennegentig_bit_a, B_vector =\u0026gt; een_eenennegentig_bit_b, Z_vector =\u0026gt; een_eenennegentig_bit_z); ... end Behavioral; "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/200_next_step/290_opdracht/",
	"title": "Opdracht 2: Ripple carry adder",
	"tags": [],
	"description": "",
	"content": "In deze opdracht moet je een 16 bit ripple-carry adder te maken. Indien je vergeten bent hoe een full adder en een half adder eruit zien, kan je kijken naar onderstaande schema\u0026rsquo;s. Bij een ripple-carry adder wordt de C out van de eerste adder doorgegeven aan de tweede adder. We werken in little endian.\nHet is niet de bedoeling dat je de + operator gebruikt van \u0026ldquo;std_logic_unsigned\u0026rdquo; of \u0026ldquo;std_logic_signed\u0026rdquo;!\nHalf adder, met S = A \u0026amp;oplus; B Full adder Het is altijd een goed idee om eerst een tekening te maken voordat je begint met typen.\nTestbench Hieronder staat een voorbeeld van een testbench. Vaak is het interesant om enkele specifieke stimuli te hebben tijdens de ontwikkeling. Indien het mogelijk is (zoals hier het geval is), is het ook een optie om simpelweg ALLE opties te verifiÃ«ren. Omdat dergelijk bestand nogal groot wordt, is hieronder een verkorte versie weergegeven. De volledige testbench kan hier gedownload worden.\nOm een component declaratie te doen, kan je eenvoudig de entity kopiÃ«ren en de keywoorden entity vervangen door component. Het omgekeerde kan uiteraard ook ðŸ˜ƒ\n-------------------------------------------------------------------------------- -- KU Leuven - ESAT/COSIC - Emerging technologies, Systems \u0026amp; Security -------------------------------------------------------------------------------- -- Module Name: rca_tb - Behavioural -- Project Name: Digitale eletronische schakelingen -- Description: Testbench for rca -- -- Revision Date Author Comments -- v0.1 20140119 VlJo Initial version -- -------------------------------------------------------------------------------- library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity rca_tb is generic( WIDTH_as_set_by_the_testbench : natural := 16 ); end entity rca_tb; architecture Behavioural of rca_tb is component rca is generic( WIDTH : natural := 8 ); port( A : IN STD_LOGIC_VECTOR(WIDTH-1 downto 0); B : IN STD_LOGIC_VECTOR(WIDTH-1 downto 0); S : OUT STD_LOGIC_VECTOR(WIDTH-1 downto 0); C : OUT STD_LOGIC ); end component rca; signal A : STD_LOGIC_VECTOR(WIDTH_as_set_by_the_testbench-1 downto 0); signal B : STD_LOGIC_VECTOR(WIDTH_as_set_by_the_testbench-1 downto 0); signal S : STD_LOGIC_VECTOR(WIDTH_as_set_by_the_testbench-1 downto 0); signal C : STD_LOGIC; begin ------------------------------------------------------------------------------- -- STIMULI ------------------------------------------------------------------------------- PSTIM: process begin A \u0026lt;= x\u0026#34;0000\u0026#34;; B \u0026lt;= x\u0026#34;0000\u0026#34;; wait for 3 ns; assert (S = x\u0026#34;0000\u0026#34;) report \u0026#34;Error in sum\u0026#34; severity note; assert (C = \u0026#39;0\u0026#39;) report \u0026#34;Error in carry\u0026#34; severity note; wait for 2 ns; A \u0026lt;= x\u0026#34;0003\u0026#34;; B \u0026lt;= x\u0026#34;0027\u0026#34;; wait for 3 ns; assert (S = x\u0026#34;002A\u0026#34;) report \u0026#34;Error in sum\u0026#34; severity note; assert (C = \u0026#39;0\u0026#39;) report \u0026#34;Error in carry\u0026#34; severity note; wait for 2 ns; A \u0026lt;= x\u0026#34;FFFF\u0026#34;; B \u0026lt;= x\u0026#34;FFFF\u0026#34;; wait for 3 ns; assert (S = x\u0026#34;FFFE\u0026#34;) report \u0026#34;Error in sum\u0026#34; severity note; assert (C = \u0026#39;1\u0026#39;) report \u0026#34;Error in carry\u0026#34; severity note; wait for 2 ns; wait; end process; ------------------------------------------------------------------------------- -- DUT ------------------------------------------------------------------------------- DUT: component rca generic map (WIDTH =\u0026gt; WIDTH_as_set_by_the_testbench) port map( A =\u0026gt; A, B =\u0026gt; B, S =\u0026gt; S, C =\u0026gt; C ); end Behavioural; "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/300_alu/",
	"title": "3. ALU",
	"tags": [],
	"description": "",
	"content": "ALU Image courtesy: pexels - Kindel Media "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/300_alu/310_intro_alu/",
	"title": "Wat is een ALU?",
	"tags": [],
	"description": "",
	"content": "Het doel van dit labo is om uiteindelijk een werkende microprocessor te maken, ook al is het in een simpele vorm. Het doel is om de hack processor te maken van de cursus nand2tetris. In dit OPO gaan we de beschrijving uiteraard wel maken in VHDL.\nEÃ©n van de componenten die in iedere processor zit is een Arithmetic Logic Unit (ALU). Een ALU neemt 2 (of 1) input(s) en voert hier een bepaalde instructie mee uit. Deze instructie kan iets logisch zijn zoals AND, OR, XOR,.. of iets wiskundig zoals plus of min. De ALU die gebruikt wordt in de hack computer biedt de mogelijkheid om 18 verschillende instructies uit te voeren. De operatie die uitgevoerd wordt, wordt omgeschreven als f(x,y).\nAritmetische operaties f(x,y) = Omschrijving \u0026nbsp; \u0026nbsp; x\u0026nbsp; \u0026nbsp; Het resultaat is altijd x \u0026nbsp; \u0026nbsp; y\u0026nbsp; \u0026nbsp; Het resultaat is altijd y \u0026nbsp; \u0026nbsp; x+1\u0026nbsp; \u0026nbsp; Het resultaat is x+1 \u0026nbsp; \u0026nbsp; y+1\u0026nbsp; \u0026nbsp; Het resultaat is y+1 \u0026nbsp; \u0026nbsp; x-1\u0026nbsp; \u0026nbsp; Het resultaat is x-1 \u0026nbsp; \u0026nbsp; y-1\u0026nbsp; \u0026nbsp; Het resultaat is y-1 \u0026nbsp; \u0026nbsp; x+y\u0026nbsp; \u0026nbsp; Het resultaat is de som van x en y \u0026nbsp; \u0026nbsp; x-y\u0026nbsp; \u0026nbsp; Het resultaat is het verschil van x en y \u0026nbsp; \u0026nbsp; y-x\u0026nbsp; \u0026nbsp; Het resultaat is het verschil van y en x Logische operaties f(x,y) = Omschrijving \u0026nbsp; \u0026nbsp; 0\u0026nbsp; \u0026nbsp; Het resultaat is altijd 0 \u0026nbsp; \u0026nbsp; 1\u0026nbsp; \u0026nbsp; Het resultaat is altijd 1 \u0026nbsp; \u0026nbsp; -1\u0026nbsp; \u0026nbsp; Het resultaat is altijd -1 \u0026nbsp; \u0026nbsp; !x\u0026nbsp; \u0026nbsp; Het resultaat is de inverse van x \u0026nbsp; \u0026nbsp; !y\u0026nbsp; \u0026nbsp; Het resultaat is de inverse van y \u0026nbsp; \u0026nbsp; -x\u0026nbsp; \u0026nbsp; Het resultaat is het negatieve van x \u0026nbsp; \u0026nbsp; -y\u0026nbsp; \u0026nbsp; Het resultaat is het negatieve van y \u0026nbsp; \u0026nbsp; x\u0026y\u0026nbsp; \u0026nbsp; Het resultaat is x AND y \u0026nbsp; \u0026nbsp; x|y\u0026nbsp; \u0026nbsp; Het resultaat is x OR y "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/300_alu/315_2scompliment/",
	"title": "2&#39;s Compliment",
	"tags": [],
	"description": "",
	"content": "â„• Gezien je voor een richting electronica gekozen hebt, gaan we er van uit dat je geen schrik hebt van binaire getallen. Hopelijk zie je dat 0b1010 hetzelfde is als 0xA, of tien zoals men in de volksmond zegt. Hieronder vind je nog een overzichtstabel voor de eerste 16 natuurlijke getallen.\nDecBinHexDecBinHexDecBinHexDecBinHex 00b00x0 40b1000x4 80b10000x8 120b11000xC 10b10x1 50b1010x5 90b10010x9 130b11010xD 20b100x2 60b1100x6 100b10100xA 140b11100xE 30b110x3 70b1110x7 110b10110xB 150b11110xF Merk op dat alle 16 mogelijkheden binair te vervatten zijn in 4 tekens (=digits). In het geval dat de voorstelling korter is dan 4 digits, kunnen we altijd 0-en toevegen aan de linkerkant.\nâ„¤ Stel dat we de verzameling van natuurlijke getallen willen uitbreiden naar de gehele getallen, hebben we ook negatieve getallen nodig. De meest gebruikte manier om negatieve getallen weer te geven is met behulp van 2\u0026rsquo;s compliment. De conversie naar 2\u0026rsquo;s complement kan bekomen worden door de binaire voorstelling te inverteren en dan 1 bit op te tellen. Merk op dat de terugomzetting van 2\u0026rsquo;s complement bekomen kan worden met dezelfde conversietechiek.\nDecimaalBinair\u0026nbsp;DecimaalBinair 10b0001\u0026nbsp;-10b1111 20b0010\u0026nbsp;-20b1110 30b0011\u0026nbsp;-30b1101 40b0100\u0026nbsp;-40b1100 50b0101\u0026nbsp;-50b1011 60b0110\u0026nbsp;-60b1010 70b0111\u0026nbsp;-70b1001 In tegenstelling tot bij de natuurlijke getallen, kunnen hier niet de breedte verlengen door links nullen toe voegen. In het kort kan gezegd worden dat je MSB kunt herhalen aan de linkerkant.\nWat is het effect van 2\u0026rsquo;s complement op ? Juist, ja: 0.\nTenslotte dient er nog even gemeld te worden dat de conversie ook op een andere manier kan gebeuren: verminder het getal met 1 en voer dan een bits-gewijze inversie uit.\nAdd/sub EÃ©n van de mogelijke ALU instructies is f(x,y) = x-y. Wiskundig gezien weten wechter dat: x - y = x + (-y). Dus in het kort kan je stellen dat een aftrekking hetzelfde is als een optelling met de negatieve waarde.\nHadden jullie nu net geen Ripple Carry Adder gemaakt? #Chance-ke.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/300_alu/320_status_codes/",
	"title": "Status codes ALU",
	"tags": [],
	"description": "",
	"content": "De ALU gaat dus een arithmetische of logische instructie uitvoeren.\nIn werkelijkheid gaat men niet rechtstreeks instructies aan een ALU geven, maar meer de status wat de ALU moet hebben.\nOnze ALU heeft 2 ingang van 16-bit registers. Onze ALU geeft ook status codes uit die we later in de processor nog gebruiken. "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/300_alu/330_opdracht_alu/",
	"title": "Opdracht 4: ALU",
	"tags": [],
	"description": "",
	"content": "De ALU die je moet maken voor deze opdracht ziet er uit zoals hieronder afgebeeld:\nIngangen x en y zijn 16 bits; De input status bits zijn: zx (zero x) nx (negate x) zy (zero y) ny (negate y) f (function) no (negate output) De output status zijn: zr (zero) ng (negativee). Later zetten we de input status code juist op basis van de binnenkomende instructie en optioneel doen we iets met de output status codes.\nDe opdracht is om zelf een ALU te maken die aan onderstaande waarheidstabel voldoet.\nBron: nand2tetris Een ALU is volledig combinatorisch.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/300_alu/340_testbench_alu/",
	"title": "Testbench ALU",
	"tags": [],
	"description": "",
	"content": "De testbench om te testen of de ALU werkt is deze. Deze testbench wordt ook gebruikt om de opdracht te verbeteren!\nlibrary IEEE; use IEEE.STD_LOGIC_1164.ALL; -- Uncomment the following library declaration if using -- arithmetic functions with Signed or Unsigned values --use IEEE.NUMERIC_STD.ALL; -- Uncomment the following library declaration if instantiating -- any Xilinx leaf cells in this code. --library UNISIM; --use UNISIM.VComponents.all; entity tb_ALU is -- Port ( ); end tb_ALU; architecture Behavioral of tb_ALU is component ALU is Port (zx, nx, zy, ny, f, no: in std_logic ; x, y: in std_logic_vector(15 downto 0); z : out std_logic_vector(15 downto 0); zr, ng: out std_logic); end component; signal zx, nx, zy, ny, f, no: std_logic ; signal x, y: std_logic_vector(15 downto 0); signal z : std_logic_vector(15 downto 0); signal zr, ng: std_logic; begin DUT: ALU port map( zx =\u0026gt; zx, nx =\u0026gt; nx, zy =\u0026gt; zy, ny =\u0026gt; ny, f =\u0026gt; f, no =\u0026gt; no, x =\u0026gt; x, y =\u0026gt; y, z =\u0026gt; z, zr =\u0026gt; zr, ng =\u0026gt; ng ); PROC: process begin zx \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; x \u0026lt;= \u0026#34;0000000000000000\u0026#34;; y \u0026lt;= \u0026#34;0000000000000000\u0026#34;; wait for 10ns; zx \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 10ns; assert (z = \u0026#34;0000000000000000\u0026#34;) report \u0026#34;0 werkt niet\u0026#34; severity failure; assert (zr = \u0026#39;1\u0026#39;) report \u0026#34;zr werkt niet\u0026#34; severity failure; wait for 10ns; zx \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; x \u0026lt;= \u0026#34;0000000011111111\u0026#34;; y \u0026lt;= \u0026#34;0011100111100110\u0026#34;; wait for 10ns; assert (z = \u0026#34;0000000000000001\u0026#34;) report \u0026#34;1 werkt niet\u0026#34; severity failure; wait for 10ns; zx \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; x \u0026lt;= \u0026#34;0000000011111111\u0026#34;; y \u0026lt;= \u0026#34;0011100111100110\u0026#34;; wait for 10ns; assert (z = \u0026#34;1111111111111111\u0026#34;) report \u0026#34;-1 werkt niet\u0026#34; severity failure; wait for 10ns; zx \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; x \u0026lt;= \u0026#34;0000110111111110\u0026#34;; y \u0026lt;= \u0026#34;0011100111100110\u0026#34;; wait for 10ns; assert (z = \u0026#34;0000110111111110\u0026#34;) report \u0026#34;x doorlaten werkt niet\u0026#34; severity failure; wait for 10ns; zx \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; x \u0026lt;= \u0026#34;0000110111111110\u0026#34;; y \u0026lt;= \u0026#34;0011100101100110\u0026#34;; wait for 10ns; assert (z = \u0026#34;0011100101100110\u0026#34;) report \u0026#34;y doorlaten werkt niet\u0026#34; severity failure; wait for 10ns; zx \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; x \u0026lt;= \u0026#34;0011111111111111\u0026#34;; y \u0026lt;= \u0026#34;0011100101100110\u0026#34;; wait for 10ns; assert (z = \u0026#34;1100000000000000\u0026#34;) report \u0026#34;niet x werkt niet\u0026#34; severity failure; wait for 10ns; zx \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; x \u0026lt;= \u0026#34;0011111000001111\u0026#34;; y \u0026lt;= \u0026#34;0011011111111110\u0026#34;; wait for 10ns; assert (z = \u0026#34;1100100000000001\u0026#34;) report \u0026#34;niet y werkt niet\u0026#34; severity failure; wait for 10ns; zx \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; x \u0026lt;= \u0026#34;0000000000000111\u0026#34;; y \u0026lt;= \u0026#34;0011011111111110\u0026#34;; wait for 10ns; assert (z = \u0026#34;1111111111111001\u0026#34;) report \u0026#34;min x werkt niet\u0026#34; severity failure; wait for 10ns; zx \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; x \u0026lt;= \u0026#34;0000000000000111\u0026#34;; y \u0026lt;= \u0026#34;0111111111111110\u0026#34;; wait for 10ns; assert (z = \u0026#34;1000000000000010\u0026#34;) report \u0026#34;min y werkt niet\u0026#34; severity failure; wait for 10ns; zx \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; x \u0026lt;= \u0026#34;0000000000000111\u0026#34;; y \u0026lt;= \u0026#34;0111111111110110\u0026#34;; wait for 10ns; assert (z = \u0026#34;0000000000001000\u0026#34;) report \u0026#34;x+1 werkt niet\u0026#34; severity failure; wait for 10ns; zx \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; x \u0026lt;= \u0026#34;0000000000000111\u0026#34;; y \u0026lt;= \u0026#34;0111111111111110\u0026#34;; wait for 10ns; assert (z = \u0026#34;0111111111111111\u0026#34;) report \u0026#34;y+1 werkt niet\u0026#34; severity failure; wait for 10ns; zx \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; x \u0026lt;= \u0026#34;0000000000000111\u0026#34;; y \u0026lt;= \u0026#34;0111111111100000\u0026#34;; wait for 10ns; assert (z = \u0026#34;0111111111100111\u0026#34;) report \u0026#34;x+y werkt niet\u0026#34; severity failure; wait for 10ns; zx \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; x \u0026lt;= \u0026#34;0000111000000111\u0026#34;; y \u0026lt;= \u0026#34;0111111111100000\u0026#34;; wait for 10ns; assert (z = \u0026#34;0000111000000000\u0026#34;) report \u0026#34;x\u0026amp;y werkt niet\u0026#34; severity failure; wait for 10ns; zx \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; x \u0026lt;= \u0026#34;0000111000000111\u0026#34;; y \u0026lt;= \u0026#34;0111111111100000\u0026#34;; wait for 10ns; assert (z = \u0026#34;0111111111100111\u0026#34;) report \u0026#34;x|y werkt niet\u0026#34; severity failure; wait for 10ns; zx \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; x \u0026lt;= \u0026#34;0000000000000010\u0026#34;; y \u0026lt;= \u0026#34;0000000000000100\u0026#34;; wait for 10ns; assert (z = \u0026#34;1111111111111110\u0026#34;) report \u0026#34;x-y werkt niet\u0026#34; severity failure; assert (ng = \u0026#39;1\u0026#39;) report \u0026#34;ng werkt niet\u0026#34; severity failure; wait for 10ns; wait; end process; end Behavioral; "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/920_cheat_sheet/",
	"title": "Cheat sheet",
	"tags": [],
	"description": "",
	"content": "Cheat sheet Algemeen VHDL \u0026bull; is een hoofdletterONgevoelige hardware beschrijvingstaal structuur librariesentityarchitecture libraries library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity entity lorem is \u0026nbsp; \u0026nbsp; A: in STD_LOGIC; \u0026nbsp; \u0026nbsp; B: in STD_LOGIC; \u0026nbsp; \u0026nbsp; Z: out STD_LOGIC_VECTOR(n-1 downto 0) end lorem -- direction kan zijn: in, out, inout, buffer, linkage architecture architecture x of y is \u0026nbsp; \u0026nbsp; -- declaraties van: constanten, signalen, componenten, .. begin \u0026nbsp; \u0026nbsp; -- beschrijving van het design end architecture; Entity VHDL \u0026bull; is een hoofdletterONgevoelige hardware beschrijvingstaal structuur librariesentityarchitecture libraries library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity entity lorem is \u0026nbsp; \u0026nbsp; A: in STD_LOGIC; \u0026nbsp; \u0026nbsp; B: in STD_LOGIC; \u0026nbsp; \u0026nbsp; Z: out STD_LOGIC_VECTOR(n-1 downto 0) end lorem -- direction kan zijn: in, out, inout, buffer, linkage architecture architecture x of y is \u0026nbsp; \u0026nbsp; -- declaraties van: constanten, signalen, componenten, .. begin \u0026nbsp; \u0026nbsp; -- beschrijving van het design end architecture; "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/",
	"title": "Digitale elektronische schakelingen",
	"tags": [],
	"description": "",
	"content": "Digitale elektronische schakelingen Image courtesy: pexels - Pixabay "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]