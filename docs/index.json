[
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/000_intro/",
	"title": "Introductie",
	"tags": [],
	"description": "",
	"content": "Introductie Welkom bij het labo van Digitale Elektronische Schakelingen. Het uiteindelijke doel van het labo is om een simpele processor te maken. We gaan een HACK-processor maken zoals in de MOOC (Massive Open Online Course) nand2tetris. We maken deze processor in de taal VHDL. VHDL (Very High Speed Integrated Circuit Hardware Description Language) is een hardware beschrijvings taal. Dat wil zeggen dat alle code die we in deze cursus schrijven, een beschrijving geeft van een schakeling die opgebouwd kan worden met digitale componenten.\nDe beschrijvingen die we maken in HDL kunnen gebruikt worden om FPGA\u0026rsquo;s mee te configureren of om ASIC\u0026rsquo;s (Application-Specific Integrated Circuits) mee te maken.\nBeoordeling 40% van de punten van dit opleidingsonderdeel staan op dit labo. 60% staat op de theorie.\nEr zijn 5 opdrachten die moeten ingediend worden via Toledo.\nEr is ook verplichte aanwezigheid in het labo. De labopunten worden evenredig met de afwezigheden van de student tijdens het labo gereduceerd. Bijvoorbeeld, als een student maar op 70% van de labozittingen aanwezig is, krijgt hij/zij 70% van het toegekende labopunt.\nBij opdracht 5 heb je nodig wat je in opdracht 3 en 4 gemaakt hebt!\nzelfstudie De zelfstudie VHDL wordt verwacht gelezen te worden in de loop van de lessen. De zelfstudie FSM is niet nodig voor deze labo\u0026rsquo;s. Er komen vragen van beide zelfstudie modules in het theorie examen!\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/001_software/010_alternatief/",
	"title": "Alternatieve omgeving",
	"tags": [],
	"description": "",
	"content": "Alternatief voor thuis Als het niet mogellijk is om Vivado te installaren op je eigen laptop, dan kan je de site EDA playground om toch thuis verder te kunnen werken. Je kan hierop inloggen met je Google account (van UHasselt). Zorg dat je bij testbench + design VHDL hebt geselecteerd. Nu kan je de code in de testbench (links) en het design (rechts) zetten. Als de code er in zit moet je ook de top entity van het design aangeven, deze naam moet je bij Top entity invulllen. Bij tools \u0026amp; simulators selecteren we GHDL. GHDL is een gratis simulator die niet zelf detecteert wanneer de code stopt dus bij de simulator options moet je nog zetten \u0026ndash;stop-time=50ns om aan te geven hoe lang er gesimuleerd moet worden. Als laatste moeten we nog aanvinken dat we de EPWave willen openen na de run. De eind tijd van stop-time moet je natuurlijk aanpassen als je langer wil simuleren.\nOm de simulatie te starten druk je vanboven op de run knop.\nscreenshot hoe een nand gate simuleren met EDA playground "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/001_software/",
	"title": "Ontwikkel omgeving",
	"tags": [],
	"description": "",
	"content": "Ontwikkel omgeving Naast de \u0026ldquo;integrated circuits\u0026rdquo; (in de volksmond ook wel \u0026ldquo;chips\u0026rdquo; genoemd ðŸ˜ƒ) die een vaste functionaliteit hebben, bestaan er ook speciale IC\u0026rsquo;s waarvan je de functionaliteit kan aanpassen. De logische poorten (Gates, in het Engels) in die IC\u0026rsquo;s zijn configureerbaar of programmeerbaar (Programmable, in het Engels). Als er zo een groot aantal gates gebundeld worden (in een Array, in het Engels) en deze kunnen ter plaatste (in the Field, in het Engels) geherprogrammeerd worden, noemen we deze IC\u0026rsquo;s Field Programmable Gate Arrays, oftewel FPGAs.\nDe FPGA-markt wordt gedomineerd door 2 grote fabrikanten van FPGA\u0026rsquo;s: AMD en Intel. Beide spelers samen leveren meer dan 85% van alle FPGAs wereldwijd. Het simuleren en configureren van FPGAs gebeurt in een speciale ontwikkelomgeving: Quartus voor Intel FPGA\u0026rsquo;s en Vivado (vroeger ISE) voor AMD FPGA\u0026rsquo;s.\nTer info \u0026hellip; de originele FPGA producenten waren Xilinx en Altera. AMD nam Xilinx over (2022) en Intel nam Altera over (2015).\nVivado Wij schrijven de HDL-code voor dit opleidingsonderdeel in Vivado. Vivado is de omgeving van AMD en wordt gebruik voor de huidige families van FPGAs. Je kan de software downloaden van de site van AMD. Je moet wel een (gratis) account aanmaken om de software te kunnen downloaden. Deze software is enkel beschikbaar voor Windows en Linux.\nVivado vereist veel opslagruimte om te installeren \u0026gt;100 GB. Door minder types van FPGA\u0026rsquo;s te ondersteunen kan hier wel wat bij bespaard worden!\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/010_intro_vhdl/",
	"title": "1. Eerste project",
	"tags": [],
	"description": "",
	"content": "Eerste project Image courtesy: pexels - Pixabay "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/010_intro_vhdl/010_eerste_project/",
	"title": "Eerste project",
	"tags": [],
	"description": "",
	"content": "Maak een project We starten met een eerste vivado project maken. We beginnen natuurlijk met vivado op te starten en te klikken op create project. Je geeft het project een naam en zorgt dat je het op een plaats zet waar je het nog kan terugvinden. Bij project type zeggen we RTL project en vinken we \u0026ldquo;Do not specify sources at this time\u0026rdquo; aan.\nDe volgende keuze die gemaakt moet worden is het type van FPGA. Als part maakt het niet veel uit wat we kiezen. Het beste is om een FPGA te kiezen die gratis is te gebruiken met Vivado zoals de xc7z020.\nLet er op dat je in het pad naar je Vivado project geen spaties hebt!! Dus, geen paden zoals \u0026ldquo;C:\\school\\2e jaar\\disch\u0026rdquo; of \u0026ldquo;C:\\mijn documenten\\demo\u0026rdquo;\nNu krijgen we een omgeving die er zo uit ziet. Voeg HDL code toe Na het maken van een project, kunnen we HDL code toevoegen. Dit kan via de link add sources. Vervolgens komt er een keuze om een nieuw bestand te maken of om een reeds bestaande file toe te voegen. Kies voor een nieuwe file en voeg een vhdl design source toe. De tool vraagt vervolgens voor I/O port definitions, die kan je al instellen bij het maken van de vhdl file, maar kunnen later ook nog aangepast worden in de code.\nMerk op dat Vivado al een kleine aanzet geeft om van te beginnen. Onderstaande VHDL-code geeft een beschrijving zorgt voor een invertor die, zoals verwacht, de ingang geÃ¯nverteerd doorgeeft aan de uitgang.\nlibrary IEEE; use IEEE.STD_LOGIC_1164.ALL; entity invertor is Port ( A: in std_logic; Z: out std_logic ); end invertor; architecture Behavioral of invertor is begin Z \u0026lt;= NOT A; end Behavioral; Dit is een eenvoudige VHDL beschrijving en we zullen deze in detail onder de loep nemen.\nentity invertor is Port ( A: in std_logic; Z: out std_logic ); end invertor; De entity definieert de input en de outputs van het (sub-)design dat we beschrijven. Het design heeft als naam gekregen: invertor. Vervolgens zien in de lijst van poorten dat deze component 2 poorten heeft: een ingang A en een uitgang Z.\nDeze component is dus een IC met twee pinnen en de entity blok omschrijft als het ware enkel de behuizing.\nDe tweede blok architecture beschrijft wat er IN de behuizing zit. Ook deze beschrijving kunnen we een naam geven: Behavioural. Alles wat er vervolgens beschreven wordt tussen de begin en end definieert het gedrag van de component.\narchitecture Behavioral of invertor is begin Z \u0026lt;= NOT A; end Behavioral; library IEEE; use IEEE.STD_LOGIC_1164.ALL; Tenslotte zijn er nog de eerste twee regels van de beschrijving. De eerste regel zegt dat er een library genaamd IEEE gebruikt wordt in deze beschrijving. De tweede regel zegt dat er uit deze library de package STD_LOGIC_1164 volledig (.ALL) gebruikt wordt. Wat dit precies wilt zeggen, daar wordt later op teruggekomen.\nHet is uitermate belangrijk dat het besef blijft dat VHDL (of iedere andere HDL) louter een beschrijving geeft van een hardware design. Dit wilt zeggen dat het mogelijk moet zijn een schema te tekenen !!!\nDe beschrijving van de de component hierboven is in een schema te tekenen als een invertor of NIET-poort.\nThe entity and architecture of the invertor std_logic Omdat we de package IEEE.STD_LOGIC_1164 gebruiken kunnen we het typen std_logic gebruiken. Dit is het type dat we meestal gebruiken wanneer we met signalen werken in een hardware beschrijving. std_logic kan 9 verschillende waardes aannemen. Meestal gebruiken we \u0026lsquo;0\u0026rsquo; en \u0026lsquo;1\u0026rsquo;. Hieronder zijn de mogellijke waardes opgelijst met uitleg.\n\u0026#39;U\u0026#39;, -- Uninitialized : flipflop waar nog nooit in is geschreven \u0026#39;X\u0026#39;, -- Forcing Unknown \u0026#39;0\u0026#39;, -- Forcing 0 : rechtstreeks aan grond \u0026#39;1\u0026#39;, -- Forcing 1 : rechtstreeks aan voeding \u0026#39;Z\u0026#39;, -- High Impedance \u0026#39;W\u0026#39;, -- Weak Unknown \u0026#39;L\u0026#39;, -- Weak 0 : via weerstand aan grond \u0026#39;H\u0026#39;, -- Weak 1 : via weerstand aan voeding \u0026#39;-\u0026#39;, -- Don\u0026#39;t Care"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/910_zelfstudie_fsm/010_fsm/",
	"title": "Finite State Machine (FSM)",
	"tags": [],
	"description": "",
	"content": "Een FSM is een controle structuur die zich in een eindig aantal toestanden kan bevinden. Onder invloed van ingangssignalen kan een FSM overgaan naar Ã©Ã©n bepaalde toestand Ã©Ã©n andere toestand. In elke toestand wordt er een waarde toegekend aan de uitgangssignalen. De toestand wordt opgeslagen in een toestandsregister.\nVoorbeeld FSM De meest eenvoudige FSM is een teller. Er is geen enkel ingangssignaal en de uitgang is de waarde van de toestand.\nEen eerste ingangssignaal dat de telcyclus kan beÃ¯nvloeden, is een enable signaal.\nEen ander ingangssignaal zou een up/down (UD) signaal kunnen zijn.\nWerkelijke toestandsdiagrammen kunnen heel wat complexer zijn.\nAanpak van een digitaal ontwerp Opdelen in functionele bouwblokken.\nOnderscheid maken tussen datapad en controle. Steeds dieper verfijnen tot basisblokken. Duidelijk beschrijven wat elk bouwblok moet doen. Duidelijk beschrijven welke signalen toekomen en vertrekken. Na deze stap kan de entity van de verschillende bouwblokken geschreven worden. Wanneer het ontwerp met meerdere personen zal gemaakt worden, is dit het moment om de taken te verdelen.\nDatapad opsplitsen in registers en combinatorische blokken. Controle implementeren als FSM. Het datapad Entity van het datapad Ingangssignalen zijn:\ndata ingangen (te verwerken) controle signalen (bepalen wat er moet gebeuren met de ingangsdata) Uitgangssignalen zijn:\ndata uitgangen status signalen (zijn nodig voor het controleblok om beslissingen te nemen) Uitwerken van het datapad De bouwblokken van het datapad zijn vaak goed gekende blokken:\ncombinatorische blokken (optellers, decoders, multiplexers, comparators, \u0026hellip;) registers Combinatorische blokken kunnen snel ontworpen worden op basis van Booleaanse vergelijkingen.\nHet Controlepad Entity van de controle Ingangssignalen zijn:\nstatus signalen (zijn nodig voor het controleblok om beslissingen te nemen) controle ingangen (controle van een ander controleblok) Het kloksignaal hoort hier ook bij. Uitgangssignalen zijn:\ncontrole signalen (bepalen wat er moet gebeuren met de ingangsdata) controle uitgangen (controle voor een ander controleblok) Controle a.d.h.v. een FSM Teken het bouwblok met alle signalen.\nTeken het toestandsdiagramma.\nElk van de verschillende stappen die ondernomen worden, vormen een verschillende toestand. Indien de uitgang verschillend is, moet de toestand zeker verschillen. Minimaliseer het aantal toestanden.\nTwee toestanden kunnen samengenomen worden als hun uitgangssignalen gelijk zijn en als de volgende toestand gelijk is. Controleer de volledigheid van het toestandsdiagramma.\nAlle mogelijke combinaties van ingangssignalen zijn in principe mogelijk in elke toestand. Voorzie wat er vanuit elke toestand moet gebeuren onder alle mogelijke combinaties. Voorkom dubbele toewijzingen. Bepaal de next state functie in functie van de huidige toestand en alle ingangssignalen (behalve de klok).\nHet resultaat van de next state functie wordt in de volgende klokpuls opgeslagen in het state register. De next state functie is een combinatorisch bouwblok. Bepaal de output functie in functie van de huidige toestand (en eventueel de ingangssignalen).\nDe output functie is al dan niet afhankelijk van de ingangssignalen. De output functie is een combinatorisch bouwblok. Moore en Mealy FSM Het is belangrijk een onderscheid te maken tussen een Moore en een Mealy FSM.\nEen Moore FSM heeft een output functie die enkel afhangt van de toestand. Een Mealy FSM heeft een output functie die afhangt van de toestand en de ingangen. Mealy FSMs mogen niet rondgekoppeld worden. Moore FSM Mealy FSM Toestandsencodering Encoderen van de toestanden in een FSM:\nwillekeurig bv. 000, 111, 011, 110, 101 minimale bitverandering (= Gray encodering) bv. 00, 01, 11, 10 one-hot bv. 0001, 0010, 0100, 1000 FSM in VHDL Definieer de toestand als een opsommingstype en maak twee signalen aan van dit type. Deze signalen vormen de ingang en de uitgang van het state register.\ntype my_state is (rst_state, green_state, yellow_state, red_state); signal next_state, state: my_state; Ontwerp de next state functie, het state register en de output functie in drie verschillende processen. Voorzie alle mogelijkheden in de next state functie en de output functie, anders ontstaan er latches in deze bouwblokken.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/010_intro_vhdl/020_nand/",
	"title": "NAND poort",
	"tags": [],
	"description": "",
	"content": "De volgende stap is de beschrijving van een logisch NAND poort. Hiervoor maak je een nieuwe component aan in het Vivado project. Het grootste deel van de code van de invertor kunnen we overnemen als startpunt voor deze beschrijving.\nWe passen de entity aan zodat we 2 inputs hebben in plaats van 1. De behuizing van de nieuwe component zegt nu dat er 3 pinnen zijn: 2 input pinnen en 1 output pin.\nUiteraard moet het gedrag van deze component ook aangepast worden. In de architecture schrijven we dat we een NAND operatie willen doen. De basis poort NAND is ook beschikbaar als keyword in VHDL.\n-------------------------------- -- Revision Date Author Comments -- v0.2 20240118 VlJo Initial version -------------------------------- library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity nand_gate is Port ( A : in std_logic; B : in std_logic; Z : out std_logic ); end nand_gate; architecture Behavioral of nand_gate is -- (DE-)LOCALISING IN/OUTPUTS signal A_i : STD_LOGIC; signal B_i : STD_LOGIC; signal Z_i : STD_LOGIC; begin -------------------------------- -- (DE-)LOCALISING IN/OUTPUTS -------------------------------- A_i \u0026lt;= A; B_i \u0026lt;= B; Z \u0026lt;= Z_i; -------------------------------- -- COMBINATORIAL -------------------------------- Z_i \u0026lt;= A_i nand B_i; end Behavioral; NAND gate Nog enkele bijkomende opmerkingen: VHDL is case-insensitive. Je mag dus hoofdletters en kleine letters verwisselen. commentaar wordt vooraf gegaan van 2 min-tekens -- Het is good-practice om niet meteen te werken met de in- en uitgangen, maar met lokale signalen. Daarom wordt in dit voorbeeld deze \u0026ldquo;vertaalslag\u0026rdquo; gemaakt. commentaar kan NOOIT kwaad Voor deze simpele voorbeelden lijkt het banaal om de link met de discrete component (en de bijhorende schematic) te leggen. Een goede designer verliest echter het volledige schema NOOIT uit het oog.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/910_zelfstudie_fsm/020_voorbeeld_verkeerslicht/",
	"title": "Voorbeeld verkeerslicht",
	"tags": [],
	"description": "",
	"content": "Voorbeeld Moore FSM: verkeerslichten In rst_state zijn alle uitgangen laag (geen enkel licht brandt). In green_state is de green uitgang hoog en de rest laag (het groen licht brandt). In yellow_state is de yellow uitgang hoog en de rest laag (het oranje licht brandt). In red_state is de red uitgang hoog en de rest laag (het rood licht brandt). We kiezen ervoor om enkel vanuit red_state de mogelijkheid te voorzien om naar rst_state te gaan. FSM schematisch: States type my_state is (rst_state, green_state, yellow_state, red_state); signal next_state, state: my_state; Next state functie p_next: process(state, rst) begin case state is when rst_state =\u0026gt; if rst = \u0026#39;1\u0026#39; then next_state \u0026lt;= rst_state; else next_state \u0026lt;= green_state; end if; when green_state =\u0026gt; next_state \u0026lt;= yellow_state; when yellow_state =\u0026gt;next_state \u0026lt;= red_state; when red_state =\u0026gt; if rst = \u0026#39;1\u0026#39; then next_state \u0026lt;= rst_state; else next_state \u0026lt;= green_state; end if; when others =\u0026gt; next_state \u0026lt;= rst_state; end case; end process; state register p_reg: process(clk) begin if clk\u0026#39;event and clk = \u0026#39;1\u0026#39; then state \u0026lt;= next_state; end if; end process; Output functie p_out: process(state) begin case state is when rst_state =\u0026gt; red \u0026lt;= \u0026#39;0\u0026#39;; yellow \u0026lt;= \u0026#39;0\u0026#39;; green \u0026lt;= \u0026#39;0\u0026#39;; when green_state =\u0026gt; red \u0026lt;= \u0026#39;0\u0026#39;; yellow \u0026lt;= \u0026#39;0\u0026#39;; green \u0026lt;= \u0026#39;1\u0026#39;; when yellow_state =\u0026gt; red \u0026lt;= \u0026#39;0\u0026#39;; yellow \u0026lt;= \u0026#39;1\u0026#39;; green \u0026lt;= \u0026#39;0\u0026#39;; when red_state =\u0026gt; red \u0026lt;= \u0026#39;1\u0026#39;; yellow \u0026lt;= \u0026#39;0\u0026#39;; green \u0026lt;= \u0026#39;0\u0026#39;; when others =\u0026gt; red \u0026lt;= \u0026#39;0\u0026#39;; yellow \u0026lt;= \u0026#39;0\u0026#39;; green \u0026lt;= \u0026#39;0\u0026#39;; end case; end process; Opdracht: Pas de FSM voor de aansturing van verkeerslichten aan zodat er vanuit elke toestand naar rst_state kan worden gesprongen. Teken het nieuwe toestandsdiagramma. Schrijf de nieuwe next state functie (de output functie verandert niet)\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/010_intro_vhdl/025_and/",
	"title": "AND poort",
	"tags": [],
	"description": "",
	"content": "Heb gÃ©Ã©n schrik van deze titel. We gaan zeker niet alle componenten 1-voor-1 afgaan ðŸ˜ƒ.\nUiteraard gaan complexere designs moeilijk te beschrijven zijn in Ã©Ã©n enkel bestand. Componenten kunnen hergebruikt worden in andere componenten. Laat ons als voorbeeld een AND poort bouwen met behulp van de eerder geziene NAND poort en de invertor. Het schema van ons design ziet er dus als volgt uit.\nDe AND gate, gebouwd met behulp van een NAND en een invertor -------------------------------- -- KU Leuven - ESAT/COSIC - ES\u0026amp;S -------------------------------- -- Module Name: and_gate - Behavioural -- Project Name: Digitale elektronische schakelingen -- Description: Een voorbeeld van een and-gate, gebouwd -- met een nand en een invertor. -- -- Revision Date Author Comments -- v0.1 20240118 VlJo Initial version -- -------------------------------- library IEEE; -- gebruik de package STD_LOGIC_1164 uit de library use IEEE.STD_LOGIC_1164.ALL; entity and_gate is port( A: IN STD_LOGIC; B: IN STD_LOGIC; Z: OUT STD_LOGIC ); end entity and_gate; architecture Behavioural of and_gate is -- COMPONENT DECLARATIONS component inverter is port( A: IN STD_LOGIC; Z: OUT STD_LOGIC ); end component inverter; component nand_gate is port( A: IN STD_LOGIC; B: IN STD_LOGIC; Z: OUT STD_LOGIC ); end component nand_gate; -- (DE-)LOCALISING IN/OUTPUTS signal A_i : STD_LOGIC; signal B_i : STD_LOGIC; signal Z_i : STD_LOGIC; -- INTERNAL SIGNALS signal x : STD_LOGIC; begin -------------------------------- -- (DE-)LOCALISING IN/OUTPUTS -------------------------------- A_i \u0026lt;= A; B_i \u0026lt;= B; Z \u0026lt;= Z_i; -------------------------------- -- COMBINATORIAL -------------------------------- nand_gate_inst00: component nand_gate port map( A =\u0026gt; A_i, B =\u0026gt; B_i, Z =\u0026gt; X ); inverter_inst00: component inverter port map( A =\u0026gt; X, Z =\u0026gt; Z_i ); end Behavioural; De beschrijving van deze AND poort begint met het gebruiken van een package (STD_LOGIC_1164) uit een library (IEEE).\nVervolgens is er opnieuw de entity block die aangeeft dat dit design 2 ingangspinnen heeft en 1 uitgangspin.\nIn de architecture verschijnt er iets nieuws. Tussen architecture en begin kunnen er declaraties gebeuren. Dit kunnen zowel declaraties zijn van signalen als van compontenten.\nAls er andere entities gebruikt gaan worden, dan moeten we aangeven hoe deze er uit zien. Volgens ons schema gaan we gebruik maken van een NAND poort van en van een invertor. Deze twee component dienen dus gedeclareerd te worden.\nMerk op dat een component-declaratie exact hetzelfde beschreven wordt als de entity van de component zelf. Vervang het woordje entity door component.\nDe declaratie van een signaal is simpelweg duidelijk maken dat er een draadje gebruikt gaat worden, van een bepaald type en met een bepaalde naam.\nEen component instantiÃ«ren Volgens het design dienen we 2 componenten te gebruiken. Beide zijn hierboven reeds gedeclareerd. Deze declaratie is enkel om de tools duidelijk te maken hoe deze component er uit ziet.\nTussen de begin en end van de architecture kan er een instantiatie gemaakt worden van reeds gedeclareerde componenten.\nBi het instantieren kan er een naam gegeven worden aan de instantiatie. In het voorbeeld zijn de anmen nand_gate_inst00 en inverter_inst00. Na de naamgeving wordt duidelijk gemaakt over welke component het gaat (component nand_gate). Uiteindelijk moet er port map gebeuren. Iedere in- en uitgang moet ergens aan gehangen worden. Dit kan soms een beetje verwarrend lijken, maar het idee is dat er voor iedere in- en uitgang het volgende staat:\nLINKS =\u003e RECHTS (komma) LINKS staat de naam van de poort van de component, RECHTS staat de naam van het signaal dat hierop aangesloten wordt.\nVerschillende poorten worden gescheiden door een komma (,). Dit wilt dus zeggen dat er na de laatste mapping geen komma meer mag volgen.\nIn de bovenstaande beschrijving van de AND poort gebruiken we een NAND en een INV. Voor de volledigheid geven we nog even mee dat er ook een keyword AND bestaat: Z_i \u0026lt;= A_i AND B_i; was dus een perfect alternatief geweest ðŸ˜‰.\nAlle lijnen \u0026hellip; tegelijk In tegenstelling tot alle software die jullie tot hier toe geprogrameerd hebben, is er Ã©Ã©n heel belangrijk, conceptueel verschil met deze hardware beschrijving. Iedere lijn tussen de begin en end van de architecture wordt TEGELIJKERTIJD uitgevoerd. Het kan uiteraard (zoals in dit voorbeeld) dat het resultaat van Ã©Ã©n blok afhangt van het resultaat van een ander blok, maar zowel de NAND-gate als de invertor zijn tegelijkertijd aan het werken.\nDenk nog eens terug aan de beschrijving op de MUDEC. Het IC met de AND poort werkt ook simultaan met het IC met de invertor.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/010_intro_vhdl/030_simulatie/",
	"title": "Simulatie",
	"tags": [],
	"description": "",
	"content": "Hoe kan er nu getest worden of onze nand poort correct werkt? We zouden een ASIC kunnen maken, maar dat zou een veel te dure en tijdrovende manier zijn.\nEen realistischere manier is om het design te implementeren op een FPGA, maar er is nog een gemakkelijkere en nuttigere manier: testbenches.\nHet idee achter een testbench is dat er \u0026ldquo;toestellen\u0026rdquo; zijn die inputs (ook stimuli genoemd) kunnen genereren. Vervolgens kunnen de waveforms van het hele design visueel geanalyseerd worden Ã©n kan de output van een component geverifieerd worden.\nIn dit opleidingsonderdeel krijgen jullie vaak de testbenches, maar het is goed om deze zelf aan te passen of uit te breiden.\nVoorbeeld: testbench voor een NAND poort Maken van een testbench Met onderstaande testbench kunnen we testen of onze nand poort werkt. Er moet een nieuwe simulation source aangemaakt worden en onderstaande testbench dient hierin geplakt te worden. Merk op dat ook de testbench geschreven is in (V)HDL.\nCommentaar Alhoewel dit geen verplicht stuk is, is het altijd nuttig om commentaar te voorzien.\nGebruik packages Deze testbench begint, net zoals de componenten, met het gebruiken van een package (STD_LOGIC_1164) uit een library (IEEE). Dit is uiteraard nodig omdat we anders geen definitie hebben van wat een STD_LOGIC type is.\nEen lege entitity Vervolgens is er ook een entity block. Merk hier zeker bij op dat een testbench typisch GEEN input en/of output poorten heeft.\nDeclaraties In de architecture gebeuren opnieuw eerst enkele declaraties. Zowel de component als de gebruikte signalen dienen gedeclareerd te worden.\nDUT Er wordt een component instantiatie gemaakt van de nand_gate in deze testbench. De naam van deze instantie is DUT, wat een acronym is van Device Under Test. UUT (Unit Under Test) wordt ook soms gebruikt\nStimuli Tenslotte is er nog Ã©Ã©n blok dat de stimuli beschrijft. Dit is een speciaal soort blok (een process) waar we later nog op terug komen. Wat er tussen de begin en end van een process beschreven staat, wordt sequentieel overlopen (hiermee wordt bedoeld: zoals bij een C-programma). Wees er echter van bewust dat de hele process-block TEGELIJKERTIJD loopt met de DUT.\nDe correcte werking van de NAND poort wordt in deze testbench nagegaan door alle mogelijke logische combinaties aan te leggen aan de ingangen van nullen en enen.\n-------------------------------- -- KU Leuven - ESAT/COSIC - ES\u0026amp;S -------------------------------- -- Module Name: nand_tb - Behavioural -- Project Name: Digitale eletronische schakelingen -- Description: Testbench for nand -- -- Revision Date Author Comments -- v1.0 20240118 VlJo Initial version -- -------------------------------- library IEEE; use IEEE.STD_LOGIC_1164.ALL; -- use IEEE.NUMERIC_STD.ALL; entity nand_tb is end entity nand_tb; architecture Behavioural of nand_tb is component nand_gate is port( A: IN STD_LOGIC; B: IN STD_LOGIC; Z: OUT STD_LOGIC ); end component nand_gate; signal input_a, input_b : STD_LOGIC; signal output_z : STD_LOGIC; begin -------------------------------- -- STIMULI -------------------------------- PSTIM: process begin input_a \u0026lt;= \u0026#39;0\u0026#39;; input_b \u0026lt;= \u0026#39;0\u0026#39;; wait for 10 ns; input_a \u0026lt;= \u0026#39;1\u0026#39;; input_b \u0026lt;= \u0026#39;0\u0026#39;; wait for 10 ns; input_a \u0026lt;= \u0026#39;0\u0026#39;; input_b \u0026lt;= \u0026#39;1\u0026#39;; wait for 10 ns; input_a \u0026lt;= \u0026#39;1\u0026#39;; input_b \u0026lt;= \u0026#39;1\u0026#39;; wait for 10 ns; wait; end process; -------------------------------- -- DUT -------------------------------- DUT: component nand_gate port map( A =\u0026gt; input_a, B =\u0026gt; input_b, Z =\u0026gt; output_z ); end Behavioural; Om een testbench toe te voegen aan het Vivado project is het belangrijk erop te letten dat je een Simulation source toevoegd. In deze testbench kan je vervolgens bovenstaande code plakken.\nRunnen van een testbench Als alle code beschreven is, kan de bovenstaante simulatie uitgevoerd worden. Er zijn meerdere manieren om een simulatie te starten en deze zul je ontdekken doorheen de labs.\nDe gemakkelijkste manier is om in de Flow Navigator (de verticale balk aan de linkerkant van het scherm) te klikken op: Run simulation. Als alles goed loop zou je (ongeveer) onderstaand scherm moeten krijgen.\nSimulatie van de nand gate met Vivado Je ziet hierin de inputs en de output van de DUT. De tijd verstrijkt over de X-as. Als beide inputs of Ã©Ã©n van beide inputs \u0026lsquo;hoog\u0026rsquo; is, is de uitgang ook \u0026lsquo;hoog\u0026rsquo;. Indien beide ingangen \u0026lsquo;hoog\u0026rsquo; zijn, is de uitgang \u0026rsquo;laag\u0026rsquo;.\nDat is exact wat een NAND poort moet doen !! (gelukkig)\nAls het design gesimuleerd wordt met een open-source simulator krijgen we een identiek resultaat.\nSimulatie van de nand gate met GHDL en GTKWave "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/910_zelfstudie_fsm/030_voorbeeld_timer/",
	"title": "Voorbeeld verkeerslicht timer",
	"tags": [],
	"description": "",
	"content": "Voorbeeld Mealy FSM: verkeerslichten met timer We voegen twee tellers toe om ervoor te zorgen dat de verkeerslichten langer rood en groen blijven dan oranje.\nWe veronderstellen dat de tellers op nul blijven staan zolang het start signaal hoog is. Als het start signaal laag wordt, telt de overeenkomstige teller op totdat een maximum is bereikt. Bij de korte teller is dit maximum (\u0026ldquo;0111\u0026rdquo;) kleiner dan bij de lange teller (\u0026ldquo;1111\u0026rdquo;). Bij het bereiken van het maximum wordt het ready signaal hoog. FSM schematisch: Teller met maximum waarde als parameter library ieee; use ieee.std_logic_1164.all; use ieee.std_logic_unsigned.all; entity teller is generic( max_waarde: std_logic_vector(3 downto 0)); port( clk, start: in std_logic; ready: out std_logic); end teller; architecture arch of teller is signal tel_waarde: std_logic_vector(3 downto 0); begin p_teller: process(clk) begin if clk\u0026#39;event and clk = \u0026#39;1\u0026#39; then if start = \u0026#39;1\u0026#39; then tel_waarde \u0026lt;= \u0026#34;0000\u0026#34;; ready \u0026lt;= \u0026#39;0\u0026#39;; elsif tel_waarde = max_waarde then tel_waarde \u0026lt;= \u0026#34;0000\u0026#34;; ready \u0026lt;= \u0026#39;1\u0026#39;; else tel_waarde \u0026lt;= tel_waarde + 1; ready \u0026lt;= \u0026#39;0\u0026#39;; end if; end if; end process; end arch; Datapad library ieee; use ieee.std_logic_1164.all; entity datapad is port( clk, start_kort, start_lang: in std_logic; ready_kort, ready_lang: out std_logic); end datapad; architecture arch of datapad is component teller is generic(max_waarde: std_logic_vector(3 downto 0)); port( clk, start: in std_logic; ready: out std_logic); end component; begin teller_lang: teller generic map(max_waarde =\u0026gt; \u0026#34;1111\u0026#34;) port map( clk =\u0026gt; clk, start =\u0026gt; start_lang, ready =\u0026gt; ready_lang); teller_kort: teller generic map(max_waarde =\u0026gt; \u0026#34;0111\u0026#34;) port map( clk =\u0026gt; clk, start =\u0026gt; start_kort, ready =\u0026gt; ready_kort); end arch; In het datapad wordt de parameteriseerbare teller twee maal geÃ¯nstantieerd. In de eerste instantiatie wordt de maximale waarde ingesteld op \u0026ldquo;1111\u0026rdquo;. In de tweede instantiatie wordt de maximale waarde ingesteld op \u0026ldquo;0111\u0026rdquo;. next state functie p_next: process(state, rst, ready_lang, ready_kort) begin if rst = \u0026#39;1\u0026#39; then next_state \u0026lt;= rst_state; else case state is when rst_state =\u0026gt; next_state \u0026lt;= green_state; when green_state =\u0026gt; if ready_lang = \u0026#39;1\u0026#39; then next_state \u0026lt;= yellow_state; else next_state \u0026lt;= green_state; end if; when yellow_state =\u0026gt; if ready_kort = \u0026#39;1\u0026#39; then next_state \u0026lt;= red_state; else next_state \u0026lt;= yellow_state; end if; when red_state =\u0026gt; if ready_lang = \u0026#39;1\u0026#39; then next_state \u0026lt;= geen_state; else next_state \u0026lt;= red_state; end if; when others =\u0026gt; next_state \u0026lt;= rst_state; end case; end if; end process; state register p_reg: process(clk) begin if clk\u0026#39;event and clk = \u0026#39;1\u0026#39; then state \u0026lt;= next_state; end if; end process; Output functie p_out: process(state, ready_lang, ready_kort) begin case state is when rst_state =\u0026gt; red \u0026lt;= \u0026#39;0\u0026#39;; yellow \u0026lt;= \u0026#39;0\u0026#39;; green \u0026lt;= \u0026#39;0\u0026#39;; start_lang \u0026lt;= \u0026#39;1\u0026#39;; start_kort \u0026lt;= \u0026#39;0\u0026#39;; when green_state =\u0026gt; red \u0026lt;= \u0026#39;0\u0026#39;; yellow \u0026lt;= \u0026#39;0\u0026#39;; green \u0026lt;= \u0026#39;1\u0026#39;; start_lang \u0026lt;= \u0026#39;0\u0026#39;; if ready_lang = \u0026#39;1\u0026#39; then start_kort \u0026lt;= \u0026#39;1\u0026#39;; else start_kort \u0026lt;= \u0026#39;0\u0026#39;; end if; when yellow_state =\u0026gt; red \u0026lt;= \u0026#39;0\u0026#39;; yellow \u0026lt;= \u0026#39;1\u0026#39;; green \u0026lt;= \u0026#39;0\u0026#39;; start_kort \u0026lt;= \u0026#39;0\u0026#39;; if ready_kort = \u0026#39;1\u0026#39; then start_lang \u0026lt;= \u0026#39;1\u0026#39;; else start_lang \u0026lt;= \u0026#39;0\u0026#39;; end if; when red_state =\u0026gt; red \u0026lt;= \u0026#39;1\u0026#39;; yellow \u0026lt;= \u0026#39;0\u0026#39;; green \u0026lt;= \u0026#39;0\u0026#39;; start_kort \u0026lt;= \u0026#39;0\u0026#39;; if ready_lang = \u0026#39;1\u0026#39; then start_lang \u0026lt;= \u0026#39;1\u0026#39;; else start_lang \u0026lt;= \u0026#39;0\u0026#39;; end if; when others =\u0026gt; red \u0026lt;= \u0026#39;0\u0026#39;; yellow \u0026lt;= \u0026#39;0\u0026#39;; green \u0026lt;= \u0026#39;0\u0026#39;; start_lang \u0026lt;= \u0026#39;0\u0026#39;; start_kort \u0026lt;= \u0026#39;0\u0026#39;; end case; end process; "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/010_intro_vhdl/031_synthesisable/",
	"title": "Synthetiseerbaar",
	"tags": [],
	"description": "",
	"content": "Synthesisable subset Tot hier hebben we gekeken naar de beschrijving van enkele discrete componenten. Deze componenten hebben beschreven in VHDL. Daarnaast hebben we een eerste testbench gemaakt ter verificatie van het ontwerp. Ook deze testbench is beschreven in VHDL. Dit is wellicht een goed moment om even aan te halen dat er ook andere HDL (hardware description languages) bestaan. Wellicht is de meest bekende (en meest gebruikte) taal verilog. De meest recente, wijd-verspreide taal is SystemVerilog, welke (zoals de naam doet vermoeden) gebaseeerd is op verilog. Dan zijn er ook nog HDLs die naar software talen leunen zoals: SystemC (C-like), MyHDL (Python-like) of Lava (Haskell-like).\nHet is belangrijk om te weten dat niet alle (V)HDL code synthesisable is. Wat wordt daarmee bedoeld?\nOf er nu voor FPGA of ASIC ontwikkeld wordt, de eerste stap van de toolchain is Synthesis. Tijdens de synthese wordt de HDL omgezet in een netlist. Dit is feitelijk niets anders dan een lijst van electronische componenten samen met een set van hoe deze verbonden zijn. Dit wilt dus zeggen: er moet een werkelijke component zijn voor (een deel van) de beschrijving.\nAlle keywords en constructies van een HDL waarvoor een fysieke implementatie bestaat wordt synthetiseerbare code genoemd:\nkeyword AND: is een beschrijving voor een logische poort poort richting IN: is een beschrijving voor een richting van een poort Z_i \u0026lt;= x: is het leggen een draadje tussen de draadjes Z_i en x In de testbench hebben we constructie gebruikt zoals wait for 10 ns;. Voor deregelijke instructies bestaat er geen fysieke implementatie. Deze code noemen we (surprise, surprise): niet-synthetiseerbare code.\nQuasi alle hardware beschrijvingstalen hebben zowel de mogelijkheid tot het schrijven van synthetiseerbare en niet-synthetiseerbare code. Dit eerste is voor designs te beschrijven, terwijl het tweede is om designs te testen.\nEnkele voorbeelden van niet-synthetiseerbare code: wait for 10ns; wait until ready = \u0026#39;1\u0026#39;; for i in 1 to 10 loop test_signaal \u0026lt;= NOT test_signaal; wait for 10ns; end loop; ..."
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/010_intro_vhdl/040_opdracht/",
	"title": "Opdracht 1: OR gate",
	"tags": [],
	"description": "",
	"content": "Als eerste opdracht in deze labo\u0026rsquo;s gaan jullie zelf een OR gate maken. In plaats van gebruik te maken van het OR keyword, moÃ©t deze gate gemaakt worden met uitsluitend NAND poorten. Maak hiervoor een nieuw bestand aan waarin je de beschrijving kwijt kan. Om te weten of de implementatie werkt, moet er ook een testbench geschreven worden. Deze kan dan gebruiken om het design te simuleren.\nDe schematic voor de OR poort (voor zij die het vergeten zouden zijn) is:\nOR gate De entity voor de OR poort moÃ©t als volgt zijn:\nentity or_gate is port( A : IN STD_LOGIC; B : IN STD_LOGIC; Z : OUT STD_LOGIC ); end entity or_gate; Opleveren Om deze opdracht op te leveren moeten jullie volgende bestanden indienen via Toledo:\nÃ©Ã©n (of meerdere) bestanden met het design Ã©Ã©n bestand met de testbench [OPTIONEEL] een markdown file met nodige uitleg Deze laatste is misschien nog niet nuttig voor deze opdracht, maar mogelijks wel voor latere opdrachten. Deze file geeft je de mogelijkheid om extra info mee te sturen.\nLaad enkel de bovenvernomende bestanden op in Toledo. Het is NIET de bedoeling om een volledig Vivado project te zippen en in te dienen !!\nDe VHDL broncode van de voorbeelden uit dit hoofdstuk kun je vinden op GitHub.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/200_next_step/",
	"title": "2. Volgende stap",
	"tags": [],
	"description": "",
	"content": "Volgende stap Image courtesy: pexels - Porapak Apichodilok "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/200_next_step/240_vectors/",
	"title": "Vectors",
	"tags": [],
	"description": "",
	"content": "Soms moet of wil je met arrays of groepen van bits werken. Natuurlijk gaat dit ook in VHDL en in VHDL worden dit vectors genoemd. Als we een array van 8 bits willen dan beschrijven we dat in Ã©Ã©n van de twee onderstaande opties.\nsignal result: std_logic_vector(7 downto 0); signal outcome: std_logic_vector(0 to 7); Een vector van 8 bits, Little Endian, met LSB en MSB aanduiding Stel dat we het getal 213 willen voorstellen. Hexadecimaal wordt dit 0xD5 en in binaire notatie is dit 0b11010101. Zoals in de meeste moderne Europese talen, lezen we van links naar rechts. Het cijfer 3 in 213 geeft het aantal eenheden mee. Dit cijfer heeft het minste gewicht en wordt het minst beduidend genoemd. De meest rechtse bit noemen we deze bit de minst-beduidende bit, of least significant bit (LSB), en deze staat rechts. Deze afspraak wordt Little endian genoemd. Indien we de LSB links zetten, spreken we van Big endiann.\nIs het sop de kool waard? Waarom zouden we daar nu moeilijk over doen? Denk eens na over de volgende twee regels C-code.\nunsigned char value_x[3] = {2, 1, 3}; unsigned char value_y = 213; Hieronder is een mooie illustratie van het verschil. Laat u niet ver(r)assen door het Endian-monster! Image courtesy: LinkedIn - ByteByteGo Wat is nu het verschil tussen result en outcome van de hierboven gedeclareerde signalen? De binaire vector 11010101 blijft altijd hetzelfde, bv de voorlaatste bit is een \u0026lsquo;0\u0026rsquo;. Het verschil zit hem in het indexeren. Deze bit is result(1) ofwel outcome(6). De waarde in de vector verandert niet!!\nVoorbeeld Als voorbeeld van het gebruik van vectoren wordt hieronder de code gegeven voor een 4-bit AND poort\n-------------------------------- -- KU Leuven - ESAT/COSIC - ES\u0026amp;S -------------------------------- -- Module Name: 4-bit and_gate - Behavioural -- Project Name: Digitale elektronische schakelingen -- Description: Een voorbeeld van een 4-bit and-gate. -- X geeft een bits-gewijze AND van A en B -- Z geeft een 4-bit and van A -- Revision Date Author Comments -- v0.1 20240118 VlJo Initial version -- -------------------------------- library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity fourbit_and_gate is port( A: IN STD_LOGIC_VECTOR(3 downto 0); B: IN STD_LOGIC_VECTOR(3 downto 0); X: OUT STD_LOGIC_VECTOR(3 downto 0); Z: OUT STD_LOGIC ); end entity fourbit_and_gate; architecture Behavioural of fourbit_and_gate is -- (DE-)LOCALISING IN/OUTPUTS signal A_i : STD_LOGIC_VECTOR(3 downto 0); signal B_i : STD_LOGIC_VECTOR(3 downto 0); signal X_i : STD_LOGIC_VECTOR(3 downto 0); signal Z_i : STD_LOGIC; begin -------------------------------- -- (DE-)LOCALISING IN/OUTPUTS -------------------------------- A_i \u0026lt;= A; B_i \u0026lt;= B; X \u0026lt;= X_i; Z \u0026lt;= Z_i; -------------------------------- -- COMBINATORIAL -------------------------------- Z \u0026lt;= A_i(0) AND A_i(1) AND A_i(2) AND A_i(3); X_i(0) \u0026lt;= A_i(0) AND B_i(0); X_i(1) \u0026lt;= A_i(1) AND B_i(1); X_i(2) \u0026lt;= A_i(2) AND B_i(2); X_i(3) \u0026lt;= A_i(3) AND B_i(3); -- wat ook mag is: --X_i \u0026lt;= A_i AND B_i; end Behavioural; Nog enkele bijkomende opmerkingen: een 4-bit vector moÃ©t niet altijd index 0 bevatten: signal voorbeeld : STD_LOGIC_VECTOR(4 downto 1) is ook geldig indexen worden geselecteerd met gewone haakjes \u0026lsquo;(\u0026rsquo; en \u0026lsquo;)\u0026rsquo; namen (van poorten, signalen, variabelen, entities, \u0026hellip;) moeten aan bepaalde voorwaarden voldoen: beginnen met een letter mogen voor de rest letters of cijfers bevatten mogen gÃ©Ã©n spaties of \u0026lsquo;-\u0026rsquo;-tekens bevatten een underscore (\u0026rsquo;_\u0026rsquo;) is toegestaan, maar niet als laatste karakter twee opeenvolgende underscores is niet toegestaan zijn hoofdletter-ongevoelig mogen geen keyword (signal, begin, procedure, \u0026hellip;) zijn er bestaan verschillende manieren om toekenningen te doen: bv \u0026ldquo;0001\u0026rdquo; aan Q_i Q_i \u0026lt;= \u0026ldquo;0001\u0026rdquo;; \u0026ndash; handig voor hardcoding Q_i \u0026lt;= (0 =\u0026gt; \u0026lsquo;1\u0026rsquo;, others =\u0026gt; \u0026lsquo;0\u0026rsquo;); \u0026ndash; handig voor langere vectoren Q_i(0) \u0026lt;= \u0026lsquo;1\u0026rsquo;; Q_i(1) \u0026lt;= \u0026lsquo;0\u0026rsquo;; Q_i(2) \u0026lt;= \u0026lsquo;0\u0026rsquo;; Q_i(3) \u0026lt;= \u0026lsquo;0\u0026rsquo;; \u0026ndash; handig bij ingewikkeldere designs "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/200_next_step/250_signals/",
	"title": "Signals",
	"tags": [],
	"description": "",
	"content": "Natuurlijk hebben we soms ook tussensignalen nodig in ons project/code. Hiervoor gebruiken we signals. Signals declareer je na de architecture maar voor het begin keyword, zoals in het voorbeeld hieronder.\nlibrary IEEE; use IEEE.STD_LOGIC_1164.ALL; entity signal_example is Port (A_vector: in std_logic_vector(7 downto 0); Y_vector: out std_logic_vector(7 downto 0)); end signal_example; architecture Behavioral of signal_example is signal tussenresultaat: std_logic; begin tussenresultaat \u0026lt;= A_vector(0) AND A_vector(1); Y_vector(7) \u0026lt;= tussenresultaat; Y_vector(6 downto 0) \u0026lt;= A_vector(7 downto 1); end Behavioral; "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/200_next_step/260_processen/",
	"title": "Processen",
	"tags": [],
	"description": "",
	"content": "Een basis component die vaak voorkomt is een multiplexer.\n2-naar-1 multiplexer ... architecture Behavioral of ... ... signal rotate_left : STD_LOGIC_VECTOR(7 downto 0); signal rotate_right : STD_LOGIC_VECTOR(7 downto 0); signal MUX_select : STD_LOGIC; signal transformed : STD_LOGIC_VECTOR(7 downto 0); ... begin ... -- optie 1 transformed \u0026lt;= rotate_left when MUX_select = \u0026#39;0\u0026#39; else rotate_right; -- optie 2 with MUX_select select transformed \u0026lt;= rotate_left when \u0026#39;0\u0026#39;, rotate_right when others; -- optie 3 PMUX: process(rotate_left, rotate_right, MUX_select) begin if MUX_select = \u0026#39;0\u0026#39; then transformed \u0026lt;= rotate_left; else transformed \u0026lt;= rotate_right; end if; end process; ... end Behavioral; In het voorbeeld hierboven zijn er twee signalen rotate_left en rotate_right. EÃ©n van beide wordt doorverbonden met het signaal transformed. Welke van beide mogelijkheden doorgegeven wordt, wordt bepaald door de waarde van het signaal MUX_select (\u0026lsquo;0\u0026rsquo;: rotate_left en \u0026lsquo;1\u0026rsquo;: rotate_right). Note that select is a keyword.\nAlle drie de opties zijn geldige VHDL constructies. Met de netlist (die gegenereerd wordt door de synthese-tool) in achterhoofd, is er geen verschil tussen de drie opties.\nOptie 1 geeft een handige manier handige manier indien er maar 2 opties zijn. Optie 2 geeft een handige manier handige manier indien er meer dan 2 opties zijn. Optie 3 geeft een handige manier handige manier indien er meer complexiteit nodig is. De derde optie vergt nog een extra woordje uitleg. Een process is een set van instructies, tussen begin en end die sequentieel uitgevoerd wordt. De vraag die zich dan stelt is: \u0026ldquo;Wanneer wordt deze lijst van instructies uitgevoerd ?\u0026rdquo;. Om dit te definiÃ«ren is er de sensitiviy list. Dit is een oplijsting van signalen die, wanneer ze veranderen van waarde, het proces triggeren.\nTenslotte dient er nog vermeld te worden dat een process een naam kan hebben. In het voorbeeld is dit: PMUX.\nMerk op dat de regels tussen begin en end van het process eigenlijk niet-synthetiseerbaar zijn. In het geheel van het process, wordt het wel synthetiseerbaar.\nEen tweede opmerking is er (bewust) een mismatch is tussen de schematic en de code, met name: de breedte van de signalen. Als er twee draden zijn die naar 1 draad moeten gaan, volstaat een 2-naar-1 multiplexer. Indien er echter 2 bussen zijn die naar 1 bus moeten gaan, zijn er meerdere multiplexers nodig. In het geval van een 8-bit bus, worden het acht 2-naar-1 multiplexers.\nEen subtiliteitje Q: Wat zijn de mogelijke waardes die MUX_select kan hebben ?\nWelke manier van beschrijven is het beste? Dat is een simpele vraag en het eenvoudige antwoord hierop is: het maakt niet uit. \u0026ldquo;Waarom ?\u0026rdquo;, hoor ik je zeggen?\nLaat ons even teruggaan naar het begin:\nwe willen hardware ontwerpen die een bepaalde functionaliteit bekomt wij, als hardware designers, denken hard na (LOL, sorry) en komen op de proppen met een ontwerp op een of andere manier moeten we dit ontwerp duidelijk maken aan de computer, meer bepaald de design tools om dit te behalen gebruiken we een HDL Zolang de tools weten, in dit geval, dat we een multiplexer bedoelen, maakt de hoeveelheid schrijfwerk NIETS uit "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/200_next_step/280_generate/",
	"title": "Generate",
	"tags": [],
	"description": "",
	"content": "Een generate is handig als je vaak VHDL-code moet herhalen. Meestal kan je dan een generate statement gebruiken om te voorkomen dat je te veel moet kopiÃ«ren en plakken.\nDe generate gaat in dit voorbeeld van 0 tot 6 omdat 6+1 al 7 is, wat het laatste element van de array is.\nlibrary IEEE; use IEEE.STD_LOGIC_1164.ALL; entity generate_example is Port (A_vector: in std_logic_vector(7 downto 0); Y_vector: out std_logic_vector(7 downto 0)); end generate_example; architecture Behavioral of generate_example is begin GEN : for i in 0 to 6 generate Y_vector(i) \u0026lt;= A_vector(i) AND A_vector(i+1); end generate; Y_vector(7) =\u0026gt; \u0026#39;0\u0026#39;; end Behavioral; Schematische voorstelling Vivado kan een schematische voorstelling maken van de hardware beschrijving met RTL analysis elaborate design.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/200_next_step/285_generic/",
	"title": "Generic",
	"tags": [],
	"description": "",
	"content": "Sommige studenten hebben misschien al door dat de componenten tot hiertoe niet goed schaalbaar zijn. Wat als er nu nood is aan een 6-bit XOR poort? Moeten we dan voor iedere mogelijke breedte een nieuwe component maken? Nee! Dit kunnen we oplossen door generics te gebruiken. Als voorbeeld hebben we een 8-bit AND poort die generic is en kan schalen.\nGeneric AND voorstelling Je kan deze AND poort beschrijven met onderstaand code. De variable N wordt gebruikt als het aantal inputs.\n-------------------------------------------------------------------------------- -- KU Leuven - ESAT/COSIC - Emerging technologies, Systems \u0026amp; Security -------------------------------------------------------------------------------- -- Module Name: nbit_and - Behavioural -- Project Name: Digitale eletronische schakelingen -- Description: n-bit AND poort ter illustratie van het gebruik van generics -- -- Revision Date Author Comments -- v0.1 20140119 VlJo Initial version -- -------------------------------------------------------------------------------- library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity nbit_and is Generic( N : integer := 8 ); Port ( A_vector: in std_logic_vector(N-1 downto 0); B_vector: in std_logic_vector(N-1 downto 0); Z_vector: out std_logic_vector(N-1 downto 0) ); end nbit_and; architecture Behavioral of nbit_and is -- (DE-)LOCALISING IN/OUTPUTS signal A_vector_i : std_logic_vector(N-1 downto 0); signal B_vector_i : std_logic_vector(N-1 downto 0); signal Z_vector_i : std_logic_vector(N-1 downto 0) begin -------------------------------- -- (DE-)LOCALISING IN/OUTPUTS -------------------------------- A_vector_i \u0026lt;= A_vector; B_vector_i \u0026lt;= B_vector; Z_vector \u0026lt;= Z_vector_i; -------------------------------- -- COMBINATORIAL -------------------------------- Z_vector_i \u0026lt;= A_vector_i AND B_vector_i; end Behavioral; Voor integers wordt er := gebruikt in VHDL.\nAls we dergelijk beschreven AND poort willen gebruiken, kunnen we de N waarde aanpassen. In dit voorbeeld wordt de nbit_and twee maal geÃ¯nstantieerd: een keer op 4 en een keer op 91.\n... architecture Behavioral of demo is component nbit_and is Generic( N : integer := 8 ); Port ( A_vector: in std_logic_vector(N-1 downto 0); B_vector: in std_logic_vector(N-1 downto 0); Z_vector: out std_logic_vector(N-1 downto 0) ); end component nbit_and; ... begin mijn_4_bit_and_poort: component nbit_and generic map( N =\u0026gt; 4) port map ( A_vector =\u0026gt; een_vier_bit_a, B_vector =\u0026gt; een_vier_bit_b, Z_vector =\u0026gt; een_vier_bit_z); ... mijn_91_bit_and_poort: component nbit_and generic map( N =\u0026gt; 91) port map ( A_vector =\u0026gt; een_eenennegentig_bit_a, B_vector =\u0026gt; een_eenennegentig_bit_b, Z_vector =\u0026gt; een_eenennegentig_bit_z); ... end Behavioral; "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/200_next_step/290_opdracht/",
	"title": "Opdracht 2: Ripple carry adder",
	"tags": [],
	"description": "",
	"content": "In deze opdracht moet je een 16 bit ripple-carry adder te maken. Indien je vergeten bent hoe een full adder en een half adder eruit zien, kan je kijken naar onderstaande schema\u0026rsquo;s. Bij een ripple-carry adder wordt de C out van de eerste adder doorgegeven aan de tweede adder. We werken in little endian.\nHet is niet de bedoeling dat je de + operator gebruikt van \u0026ldquo;std_logic_unsigned\u0026rdquo; of \u0026ldquo;std_logic_signed\u0026rdquo;!\nHalf adder, met S = A \u0026amp;oplus; B Full adder Het is altijd een goed idee om eerst een tekening te maken voordat je begint met typen.\nOpleveren Om deze opdracht op te leveren moeten jullie volgende bestanden indienen via Toledo:\nÃ©Ã©n of meerdere bestanden met het design [OPTIONEEL] een markdown file met nodige uitleg Merk op dat er GEEN testbench mee opgeladen dient te worden.\nTestbench Om een component declaratie te doen, kan je eenvoudig de entity kopiÃ«ren en de keywoorden entity vervangen door component. Het omgekeerde kan uiteraard ook ðŸ˜ƒ\n-------------------------------------------------------------------------------- -- KU Leuven - ESAT/COSIC - Emerging technologies, Systems \u0026amp; Security -------------------------------------------------------------------------------- -- Module Name: rca_tb - Behavioural -- Project Name: Digitale eletronische schakelingen -- Description: Testbench for rca -- -- Revision Date Author Comments -- v0.1 20140119 VlJo Initial version -- -------------------------------------------------------------------------------- library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity rca_tb is generic( WIDTH_as_set_by_the_testbench : natural := 16 ); end entity rca_tb; architecture Behavioural of rca_tb is component rca is generic( WIDTH : natural := 8 ); port( A : IN STD_LOGIC_VECTOR(WIDTH-1 downto 0); B : IN STD_LOGIC_VECTOR(WIDTH-1 downto 0); S : OUT STD_LOGIC_VECTOR(WIDTH-1 downto 0); C : OUT STD_LOGIC ); end component rca; signal A : STD_LOGIC_VECTOR(WIDTH_as_set_by_the_testbench-1 downto 0); signal B : STD_LOGIC_VECTOR(WIDTH_as_set_by_the_testbench-1 downto 0); signal S : STD_LOGIC_VECTOR(WIDTH_as_set_by_the_testbench-1 downto 0); signal C : STD_LOGIC; begin ------------------------------------------------------------------------------- -- STIMULI ------------------------------------------------------------------------------- PSTIM: process begin A \u0026lt;= x\u0026#34;0000\u0026#34;; B \u0026lt;= x\u0026#34;0000\u0026#34;; wait for 3 ns; assert (S = x\u0026#34;0000\u0026#34;) report \u0026#34;Error in sum\u0026#34; severity note; assert (C = \u0026#39;0\u0026#39;) report \u0026#34;Error in carry\u0026#34; severity note; wait for 2 ns; A \u0026lt;= x\u0026#34;0003\u0026#34;; B \u0026lt;= x\u0026#34;0027\u0026#34;; wait for 3 ns; assert (S = x\u0026#34;002A\u0026#34;) report \u0026#34;Error in sum\u0026#34; severity note; assert (C = \u0026#39;0\u0026#39;) report \u0026#34;Error in carry\u0026#34; severity note; wait for 2 ns; A \u0026lt;= x\u0026#34;FFFF\u0026#34;; B \u0026lt;= x\u0026#34;FFFF\u0026#34;; wait for 3 ns; assert (S = x\u0026#34;FFFE\u0026#34;) report \u0026#34;Error in sum\u0026#34; severity note; assert (C = \u0026#39;1\u0026#39;) report \u0026#34;Error in carry\u0026#34; severity note; wait for 2 ns; wait; end process; ------------------------------------------------------------------------------- -- DUT ------------------------------------------------------------------------------- DUT: component rca generic map (WIDTH =\u0026gt; WIDTH_as_set_by_the_testbench) port map( A =\u0026gt; A, B =\u0026gt; B, S =\u0026gt; S, C =\u0026gt; C ); end Behavioural; "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/300_alu/",
	"title": "3. ALU",
	"tags": [],
	"description": "",
	"content": "ALU Image courtesy: pexels - Kindel Media "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/300_alu/310_intro_alu/",
	"title": "Wat is een ALU?",
	"tags": [],
	"description": "",
	"content": "Het doel van dit labo is om uiteindelijk een werkende microprocessor te maken, ook al is het in een simpele vorm. Het doel is om de hack processor te maken van de cursus nand2tetris. In dit OPO gaan we de beschrijving uiteraard wel maken in VHDL.\nEÃ©n van de componenten die in iedere processor zit is een Arithmetic Logic Unit (ALU). Een ALU neemt 2 (of 1) input(s) en voert hier een bepaalde instructie mee uit. Deze instructie kan iets logisch zijn zoals AND, OR, XOR,.. of iets wiskundig zoals plus of min. De ALU die gebruikt wordt in de hack computer biedt de mogelijkheid om 18 verschillende instructies uit te voeren. De operatie die uitgevoerd wordt, wordt omgeschreven als f(x,y).\nAritmetische operaties f(x,y) = Omschrijving \u0026nbsp; \u0026nbsp; x\u0026nbsp; \u0026nbsp; Het resultaat is altijd x \u0026nbsp; \u0026nbsp; y\u0026nbsp; \u0026nbsp; Het resultaat is altijd y \u0026nbsp; \u0026nbsp; x+1\u0026nbsp; \u0026nbsp; Het resultaat is x+1 \u0026nbsp; \u0026nbsp; y+1\u0026nbsp; \u0026nbsp; Het resultaat is y+1 \u0026nbsp; \u0026nbsp; x-1\u0026nbsp; \u0026nbsp; Het resultaat is x-1 \u0026nbsp; \u0026nbsp; y-1\u0026nbsp; \u0026nbsp; Het resultaat is y-1 \u0026nbsp; \u0026nbsp; x+y\u0026nbsp; \u0026nbsp; Het resultaat is de som van x en y \u0026nbsp; \u0026nbsp; x-y\u0026nbsp; \u0026nbsp; Het resultaat is het verschil van x en y \u0026nbsp; \u0026nbsp; y-x\u0026nbsp; \u0026nbsp; Het resultaat is het verschil van y en x Logische operaties f(x,y) = Omschrijving \u0026nbsp; \u0026nbsp; 0\u0026nbsp; \u0026nbsp; Het resultaat is altijd 0 \u0026nbsp; \u0026nbsp; 1\u0026nbsp; \u0026nbsp; Het resultaat is altijd 1 \u0026nbsp; \u0026nbsp; -1\u0026nbsp; \u0026nbsp; Het resultaat is altijd -1 \u0026nbsp; \u0026nbsp; !x\u0026nbsp; \u0026nbsp; Het resultaat is de inverse van x \u0026nbsp; \u0026nbsp; !y\u0026nbsp; \u0026nbsp; Het resultaat is de inverse van y \u0026nbsp; \u0026nbsp; -x\u0026nbsp; \u0026nbsp; Het resultaat is het negatieve van x \u0026nbsp; \u0026nbsp; -y\u0026nbsp; \u0026nbsp; Het resultaat is het negatieve van y \u0026nbsp; \u0026nbsp; x\u0026y\u0026nbsp; \u0026nbsp; Het resultaat is x AND y \u0026nbsp; \u0026nbsp; x|y\u0026nbsp; \u0026nbsp; Het resultaat is x OR y "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/300_alu/315_2scompliment/",
	"title": "2&#39;s Compliment",
	"tags": [],
	"description": "",
	"content": "â„• Gezien je voor een richting electronica gekozen hebt, gaan we er van uit dat je geen schrik hebt van binaire getallen. Hopelijk zie je dat 0b1010 hetzelfde is als 0xA, of tien zoals men in de volksmond zegt. Hieronder vind je nog een overzichtstabel voor de eerste 16 natuurlijke getallen.\nDecBinHexDecBinHexDecBinHexDecBinHex 00b00x0 40b1000x4 80b10000x8 120b11000xC 10b10x1 50b1010x5 90b10010x9 130b11010xD 20b100x2 60b1100x6 100b10100xA 140b11100xE 30b110x3 70b1110x7 110b10110xB 150b11110xF Merk op dat alle 16 mogelijkheden binair te vervatten zijn in 4 tekens (=digits). In het geval dat de voorstelling korter is dan 4 digits, kunnen we altijd 0-en toevegen aan de linkerkant.\nâ„¤ Stel dat we de verzameling van natuurlijke getallen willen uitbreiden naar de gehele getallen, hebben we ook negatieve getallen nodig. De meest gebruikte manier om negatieve getallen weer te geven is met behulp van 2\u0026rsquo;s compliment. De conversie naar 2\u0026rsquo;s complement kan bekomen worden door de binaire voorstelling te inverteren en dan 1 bit op te tellen. Merk op dat de terugomzetting van 2\u0026rsquo;s complement bekomen kan worden met dezelfde conversietechiek.\nDecimaalBinair\u0026nbsp;DecimaalBinair 10b0001\u0026nbsp;-10b1111 20b0010\u0026nbsp;-20b1110 30b0011\u0026nbsp;-30b1101 40b0100\u0026nbsp;-40b1100 50b0101\u0026nbsp;-50b1011 60b0110\u0026nbsp;-60b1010 70b0111\u0026nbsp;-70b1001 In tegenstelling tot bij de natuurlijke getallen, kunnen hier niet de breedte verlengen door links nullen toe voegen. In het kort kan gezegd worden dat je MSB kunt herhalen aan de linkerkant.\nWat is het effect van 2\u0026rsquo;s complement op ? Juist, ja: 0.\nTenslotte dient er nog even gemeld te worden dat de conversie ook op een andere manier kan gebeuren: verminder het getal met 1 en voer dan een bits-gewijze inversie uit.\nAdd/sub EÃ©n van de mogelijke ALU instructies is f(x,y) = x-y. Wiskundig gezien weten wechter dat: x - y = x + (-y). Dus in het kort kan je stellen dat een aftrekking hetzelfde is als een optelling met de negatieve waarde.\nHadden jullie nu net geen Ripple Carry Adder gemaakt? #Chance-ke.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/300_alu/320_status_codes/",
	"title": "Status codes ALU",
	"tags": [],
	"description": "",
	"content": "De ALU gaat dus een arithmetische of logische instructie uitvoeren.\nIn werkelijkheid gaat men niet rechtstreeks instructies aan een ALU geven, maar meer de status wat de ALU moet hebben.\nOnze ALU heeft 2 ingang van 16-bit registers. Onze ALU geeft ook status codes uit die we later in de processor nog gebruiken. "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/300_alu/330_opdracht_alu/",
	"title": "Opdracht 3: ALU",
	"tags": [],
	"description": "",
	"content": "De ALU die je moet maken voor deze opdracht ziet er uit zoals hieronder afgebeeld:\nIngangen x en y zijn 16 bits; De input status bits zijn: zx (zero x) nx (negate x) zy (zero y) ny (negate y) f (function) no (negate output) De output status zijn: zr (zero) ng (negative). Later zetten we de input status code juist op basis van de binnenkomende instructie en optioneel doen we iets met de output status codes.\nDe opdracht is om zelf een ALU te maken die aan onderstaande waarheidstabel voldoet, met de volgende entity.\nBron: nand2tetris entity alu is generic( WIDTH : natural := 16 ); port( X : IN STD_LOGIC_VECTOR(WIDTH-1 downto 0); Y : IN STD_LOGIC_VECTOR(WIDTH-1 downto 0); Z : OUT STD_LOGIC_VECTOR(WIDTH-1 downto 0); zx : IN STD_LOGIC; zy : IN STD_LOGIC; nx : IN STD_LOGIC; ny : IN STD_LOGIC; f : IN STD_LOGIC; no : IN STD_LOGIC; zr : OUT STD_LOGIC; ng : OUT STD_LOGIC ); end entity alu; Een ALU is volledig combinatorisch.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/300_alu/340_testbench_alu/",
	"title": "Oprdracht - testbench ALU",
	"tags": [],
	"description": "",
	"content": "De testbench om te testen of de ALU werkt kan hier gedownload worden. Deze testbench is, zoals je misschien al vermoedde, gegenereerd. Voor de verbetering van de opdracht wordt een soortgelijke testbench gebruikt.\n-------------------------------------------------------------------------------- -- KU Leuven - ESAT/COSIC - Emerging technologies, Systems \u0026amp; Security -------------------------------------------------------------------------------- -- Module Name: alu_tb - Behavioural -- Project Name: Testbench for alu -- Description: -- -- Revision Date Author Comments -- v0.1 20240312 VlJo Initial version -- -------------------------------------------------------------------------------- library IEEE; use IEEE.STD_LOGIC_1164.ALL; -- use IEEE.NUMERIC_STD.ALL; entity alu_tb is generic( WIDTH : natural := 16 ); end entity alu_tb; architecture Behavioural of alu_tb is component alu is generic( WIDTH : natural := 16 ); port( X : IN STD_LOGIC_VECTOR(WIDTH-1 downto 0); Y : IN STD_LOGIC_VECTOR(WIDTH-1 downto 0); Z : OUT STD_LOGIC_VECTOR(WIDTH-1 downto 0); zx : IN STD_LOGIC; zy : IN STD_LOGIC; nx : IN STD_LOGIC; ny : IN STD_LOGIC; f : IN STD_LOGIC; no : IN STD_LOGIC; zr : OUT STD_LOGIC; ng : OUT STD_LOGIC ); end component alu; signal X : STD_LOGIC_VECTOR(WIDTH-1 downto 0); signal Y : STD_LOGIC_VECTOR(WIDTH-1 downto 0); signal Z : STD_LOGIC_VECTOR(WIDTH-1 downto 0); signal zx : STD_LOGIC; signal zy : STD_LOGIC; signal nx : STD_LOGIC; signal ny : STD_LOGIC; signal f : STD_LOGIC; signal no : STD_LOGIC; signal zr : STD_LOGIC; signal ng : STD_LOGIC; begin ------------------------------------------------------------------------------- -- STIMULI ------------------------------------------------------------------------------- PSTIM: process variable v_correct_z : natural; variable v_incorrect_z : natural; variable v_correct_zr : natural; variable v_incorrect_zr : natural; variable v_correct_ng : natural; variable v_incorrect_ng : natural; begin X \u0026lt;= x\u0026#34;0000\u0026#34;; Y \u0026lt;= x\u0026#34;0000\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 10 ns; -- generate addition X \u0026lt;= x\u0026#34;381c\u0026#34;; Y \u0026lt;= x\u0026#34;4a1b\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c7e3\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;329a\u0026#34;; Y \u0026lt;= x\u0026#34;ae51\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;cd65\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2173\u0026#34;; Y \u0026lt;= x\u0026#34;6773\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ba00\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d463\u0026#34;; Y \u0026lt;= x\u0026#34;f724\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6c3f\u0026#34;; Y \u0026lt;= x\u0026#34;f1bd\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f1bd\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c3f8\u0026#34;; Y \u0026lt;= x\u0026#34;2876\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;647e\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7470\u0026#34;; Y \u0026lt;= x\u0026#34;9d25\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2036\u0026#34;; Y \u0026lt;= x\u0026#34;45df\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2037\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;90b6\u0026#34;; Y \u0026lt;= x\u0026#34;0e82\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;0e83\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8a6f\u0026#34;; Y \u0026lt;= x\u0026#34;da4f\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1e25\u0026#34;; Y \u0026lt;= x\u0026#34;fae8\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1e25\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7112\u0026#34;; Y \u0026lt;= x\u0026#34;296e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;9a80\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b575\u0026#34;; Y \u0026lt;= x\u0026#34;07cb\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f834\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f58d\u0026#34;; Y \u0026lt;= x\u0026#34;047c\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f58d\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;17f4\u0026#34;; Y \u0026lt;= x\u0026#34;ddcc\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f5c0\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4ea4\u0026#34;; Y \u0026lt;= x\u0026#34;651d\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;b15c\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3d93\u0026#34;; Y \u0026lt;= x\u0026#34;53fc\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c26d\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;737c\u0026#34;; Y \u0026lt;= x\u0026#34;6d71\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;928f\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;464d\u0026#34;; Y \u0026lt;= x\u0026#34;db58\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f036\u0026#34;; Y \u0026lt;= x\u0026#34;78f8\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f037\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8c13\u0026#34;; Y \u0026lt;= x\u0026#34;2038\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b10e\u0026#34;; Y \u0026lt;= x\u0026#34;741e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;b10e\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6f4c\u0026#34;; Y \u0026lt;= x\u0026#34;b33c\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2288\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;096a\u0026#34;; Y \u0026lt;= x\u0026#34;cd82\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;327d\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d38d\u0026#34;; Y \u0026lt;= x\u0026#34;8bb1\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;47dc\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0706\u0026#34;; Y \u0026lt;= x\u0026#34;9a4c\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;428e\u0026#34;; Y \u0026lt;= x\u0026#34;eb92\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f35e\u0026#34;; Y \u0026lt;= x\u0026#34;ba46\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ada4\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3177\u0026#34;; Y \u0026lt;= x\u0026#34;1d89\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1d88\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ec4f\u0026#34;; Y \u0026lt;= x\u0026#34;12dc\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;12dd\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8336\u0026#34;; Y \u0026lt;= x\u0026#34;a0a1\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;5f5e\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d1a1\u0026#34;; Y \u0026lt;= x\u0026#34;f8dd\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;64eb\u0026#34;; Y \u0026lt;= x\u0026#34;13fd\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4ee6\u0026#34;; Y \u0026lt;= x\u0026#34;9c36\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e2d2\u0026#34;; Y \u0026lt;= x\u0026#34;9175\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e2d3\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;18ba\u0026#34;; Y \u0026lt;= x\u0026#34;c7b6\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;aefc\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a374\u0026#34;; Y \u0026lt;= x\u0026#34;8ea5\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;8ea6\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a460\u0026#34;; Y \u0026lt;= x\u0026#34;45da\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;45da\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2936\u0026#34;; Y \u0026lt;= x\u0026#34;c895\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e9b7\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;015c\u0026#34;; Y \u0026lt;= x\u0026#34;1210\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;edf0\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9bf7\u0026#34;; Y \u0026lt;= x\u0026#34;c099\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;9bf6\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0abb\u0026#34;; Y \u0026lt;= x\u0026#34;de8c\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;debf\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c351\u0026#34;; Y \u0026lt;= x\u0026#34;aa8f\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;aa8f\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4348\u0026#34;; Y \u0026lt;= x\u0026#34;221f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0208\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4fbe\u0026#34;; Y \u0026lt;= x\u0026#34;92b1\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;92b1\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e416\u0026#34;; Y \u0026lt;= x\u0026#34;ce23\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c402\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;dae5\u0026#34;; Y \u0026lt;= x\u0026#34;a0a3\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f807\u0026#34;; Y \u0026lt;= x\u0026#34;3920\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;3920\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e3fd\u0026#34;; Y \u0026lt;= x\u0026#34;a55c\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e3fe\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;44c0\u0026#34;; Y \u0026lt;= x\u0026#34;62a9\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1de9\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6393\u0026#34;; Y \u0026lt;= x\u0026#34;9b79\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4525\u0026#34;; Y \u0026lt;= x\u0026#34;2b41\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;6f65\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d753\u0026#34;; Y \u0026lt;= x\u0026#34;55c6\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8e40\u0026#34;; Y \u0026lt;= x\u0026#34;147b\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0440\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9fd1\u0026#34;; Y \u0026lt;= x\u0026#34;51aa\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ae56\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;bcfe\u0026#34;; Y \u0026lt;= x\u0026#34;3730\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c8d0\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3c94\u0026#34;; Y \u0026lt;= x\u0026#34;86ea\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c1d4\u0026#34;; Y \u0026lt;= x\u0026#34;5fc4\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;dfd4\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e99b\u0026#34;; Y \u0026lt;= x\u0026#34;db31\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e99b\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;dff6\u0026#34;; Y \u0026lt;= x\u0026#34;20ff\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;00f5\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;96ba\u0026#34;; Y \u0026lt;= x\u0026#34;cfcf\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;96bb\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;cf9c\u0026#34;; Y \u0026lt;= x\u0026#34;d4c6\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9ef2\u0026#34;; Y \u0026lt;= x\u0026#34;b376\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;9ef2\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0ef8\u0026#34;; Y \u0026lt;= x\u0026#34;2d3d\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8e28\u0026#34;; Y \u0026lt;= x\u0026#34;9d61\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;71d8\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e297\u0026#34;; Y \u0026lt;= x\u0026#34;6165\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;6005\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6727\u0026#34;; Y \u0026lt;= x\u0026#34;9182\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;da0e\u0026#34;; Y \u0026lt;= x\u0026#34;0b02\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7128\u0026#34;; Y \u0026lt;= x\u0026#34;a5ee\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2128\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;aa44\u0026#34;; Y \u0026lt;= x\u0026#34;cd7e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;dcc6\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e1b6\u0026#34;; Y \u0026lt;= x\u0026#34;c1b5\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c1b4\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7513\u0026#34;; Y \u0026lt;= x\u0026#34;fdca\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7749\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;728b\u0026#34;; Y \u0026lt;= x\u0026#34;e3d8\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e3d8\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e071\u0026#34;; Y \u0026lt;= x\u0026#34;73cd\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0045\u0026#34;; Y \u0026lt;= x\u0026#34;6e39\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;6df4\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a919\u0026#34;; Y \u0026lt;= x\u0026#34;3f65\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a918\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9e2c\u0026#34;; Y \u0026lt;= x\u0026#34;3e88\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;9e2c\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d8b1\u0026#34;; Y \u0026lt;= x\u0026#34;28c9\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;afe8\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;abfb\u0026#34;; Y \u0026lt;= x\u0026#34;0a06\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0a05\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;aa9c\u0026#34;; Y \u0026lt;= x\u0026#34;1a93\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1a92\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8c09\u0026#34;; Y \u0026lt;= x\u0026#34;8fa9\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8c09\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d570\u0026#34;; Y \u0026lt;= x\u0026#34;d19d\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;03d3\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5ff6\u0026#34;; Y \u0026lt;= x\u0026#34;a205\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;5dfa\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4e66\u0026#34;; Y \u0026lt;= x\u0026#34;662a\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;b19a\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;147d\u0026#34;; Y \u0026lt;= x\u0026#34;6b48\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;147d\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;88da\u0026#34;; Y \u0026lt;= x\u0026#34;9ab7\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;88d9\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2ca5\u0026#34;; Y \u0026lt;= x\u0026#34;7193\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;aa5c\u0026#34;; Y \u0026lt;= x\u0026#34;d686\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;fede\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d6b9\u0026#34;; Y \u0026lt;= x\u0026#34;b3fe\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;b3fd\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f549\u0026#34;; Y \u0026lt;= x\u0026#34;9cfa\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0ab6\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ff91\u0026#34;; Y \u0026lt;= x\u0026#34;355c\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;355b\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a1bd\u0026#34;; Y \u0026lt;= x\u0026#34;ec00\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a000\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b2eb\u0026#34;; Y \u0026lt;= x\u0026#34;886c\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;4d15\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b6b5\u0026#34;; Y \u0026lt;= x\u0026#34;476f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f7ff\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2ff1\u0026#34;; Y \u0026lt;= x\u0026#34;2c9e\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;999c\u0026#34;; Y \u0026lt;= x\u0026#34;f39b\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;999b\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2c09\u0026#34;; Y \u0026lt;= x\u0026#34;a82c\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2c09\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1bf7\u0026#34;; Y \u0026lt;= x\u0026#34;3748\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c8b8\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ae31\u0026#34;; Y \u0026lt;= x\u0026#34;740c\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;05b3\u0026#34;; Y \u0026lt;= x\u0026#34;8af0\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8af0\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6be0\u0026#34;; Y \u0026lt;= x\u0026#34;815c\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;aca8\u0026#34;; Y \u0026lt;= x\u0026#34;65a3\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;9a5c\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2b1c\u0026#34;; Y \u0026lt;= x\u0026#34;cbc4\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a0a8\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9460\u0026#34;; Y \u0026lt;= x\u0026#34;576b\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;6b9f\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;cb57\u0026#34;; Y \u0026lt;= x\u0026#34;f1f0\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;34a8\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d8a7\u0026#34;; Y \u0026lt;= x\u0026#34;762b\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c7ff\u0026#34;; Y \u0026lt;= x\u0026#34;7a7a\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c800\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6bce\u0026#34;; Y \u0026lt;= x\u0026#34;44c3\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;44c3\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3ae3\u0026#34;; Y \u0026lt;= x\u0026#34;ad82\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8d61\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;cc3d\u0026#34;; Y \u0026lt;= x\u0026#34;daeb\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;33c3\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e0bc\u0026#34;; Y \u0026lt;= x\u0026#34;8046\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8045\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;79b3\u0026#34;; Y \u0026lt;= x\u0026#34;47e6\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7ff7\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9ec5\u0026#34;; Y \u0026lt;= x\u0026#34;a0a9\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a0a8\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;fae6\u0026#34;; Y \u0026lt;= x\u0026#34;94e2\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;6b1e\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b5b9\u0026#34;; Y \u0026lt;= x\u0026#34;a97e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;bdff\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9151\u0026#34;; Y \u0026lt;= x\u0026#34;a526\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e478\u0026#34;; Y \u0026lt;= x\u0026#34;214a\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;214a\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;40cc\u0026#34;; Y \u0026lt;= x\u0026#34;fce8\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;fce8\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9432\u0026#34;; Y \u0026lt;= x\u0026#34;7f72\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;af16\u0026#34;; Y \u0026lt;= x\u0026#34;b20f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;fd07\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2ac2\u0026#34;; Y \u0026lt;= x\u0026#34;330d\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d53e\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3a14\u0026#34;; Y \u0026lt;= x\u0026#34;89f5\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d073\u0026#34;; Y \u0026lt;= x\u0026#34;6395\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;9322\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5ee6\u0026#34;; Y \u0026lt;= x\u0026#34;ef1f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;4e06\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d98e\u0026#34;; Y \u0026lt;= x\u0026#34;347a\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d98d\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;44d9\u0026#34;; Y \u0026lt;= x\u0026#34;6b1f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2646\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;08f4\u0026#34;; Y \u0026lt;= x\u0026#34;6b0f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;9de5\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;14cd\u0026#34;; Y \u0026lt;= x\u0026#34;0ee5\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;0ee6\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1fa2\u0026#34;; Y \u0026lt;= x\u0026#34;fc17\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1c02\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a858\u0026#34;; Y \u0026lt;= x\u0026#34;74ba\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8b45\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7357\u0026#34;; Y \u0026lt;= x\u0026#34;f0de\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7ec0\u0026#34;; Y \u0026lt;= x\u0026#34;8a12\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9849\u0026#34;; Y \u0026lt;= x\u0026#34;ab29\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4d89\u0026#34;; Y \u0026lt;= x\u0026#34;4ae8\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;fd5f\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6824\u0026#34;; Y \u0026lt;= x\u0026#34;d4bc\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d4bb\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1a18\u0026#34;; Y \u0026lt;= x\u0026#34;eb7e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0a18\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2f4a\u0026#34;; Y \u0026lt;= x\u0026#34;0382\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d438\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7577\u0026#34;; Y \u0026lt;= x\u0026#34;512f\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;96fa\u0026#34;; Y \u0026lt;= x\u0026#34;c033\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;96f9\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5871\u0026#34;; Y \u0026lt;= x\u0026#34;178b\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ec1e\u0026#34;; Y \u0026lt;= x\u0026#34;6a33\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;6a33\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;eac7\u0026#34;; Y \u0026lt;= x\u0026#34;8958\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ebdf\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;fac6\u0026#34;; Y \u0026lt;= x\u0026#34;8d45\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;927f\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f943\u0026#34;; Y \u0026lt;= x\u0026#34;eccc\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;eccd\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2875\u0026#34;; Y \u0026lt;= x\u0026#34;c913\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e977\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4ff9\u0026#34;; Y \u0026lt;= x\u0026#34;2b69\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;4ff8\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1e7c\u0026#34;; Y \u0026lt;= x\u0026#34;0c86\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0c85\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a181\u0026#34;; Y \u0026lt;= x\u0026#34;eb44\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a181\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5e7b\u0026#34;; Y \u0026lt;= x\u0026#34;d052\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a184\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b6a9\u0026#34;; Y \u0026lt;= x\u0026#34;ac05\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;aac8\u0026#34;; Y \u0026lt;= x\u0026#34;b20d\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;5537\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4000\u0026#34;; Y \u0026lt;= x\u0026#34;8984\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;cb5c\u0026#34;; Y \u0026lt;= x\u0026#34;fafd\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d05f\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8b60\u0026#34;; Y \u0026lt;= x\u0026#34;dd8b\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;522b\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b092\u0026#34;; Y \u0026lt;= x\u0026#34;f91e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;4f6e\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f69b\u0026#34;; Y \u0026lt;= x\u0026#34;1e03\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1603\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e0e1\u0026#34;; Y \u0026lt;= x\u0026#34;4242\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e0e2\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;92a5\u0026#34;; Y \u0026lt;= x\u0026#34;3ff0\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d295\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;71ab\u0026#34;; Y \u0026lt;= x\u0026#34;3d2e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;71ac\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e317\u0026#34;; Y \u0026lt;= x\u0026#34;6732\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7be5\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f49a\u0026#34;; Y \u0026lt;= x\u0026#34;635d\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f7df\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;12ab\u0026#34;; Y \u0026lt;= x\u0026#34;aa5d\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;aa5c\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;022e\u0026#34;; Y \u0026lt;= x\u0026#34;7e74\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;022e\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;90c9\u0026#34;; Y \u0026lt;= x\u0026#34;7a05\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;6f36\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c144\u0026#34;; Y \u0026lt;= x\u0026#34;0ad2\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f52d\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a3f8\u0026#34;; Y \u0026lt;= x\u0026#34;37d3\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c82d\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a41a\u0026#34;; Y \u0026lt;= x\u0026#34;f720\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5647\u0026#34;; Y \u0026lt;= x\u0026#34;2296\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;33b1\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e089\u0026#34;; Y \u0026lt;= x\u0026#34;59ce\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;86bb\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9267\u0026#34;; Y \u0026lt;= x\u0026#34;85ed\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ae30\u0026#34;; Y \u0026lt;= x\u0026#34;4219\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e3c9\u0026#34;; Y \u0026lt;= x\u0026#34;1c00\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9081\u0026#34;; Y \u0026lt;= x\u0026#34;d55c\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;44db\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;02f6\u0026#34;; Y \u0026lt;= x\u0026#34;f97f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;fd09\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c626\u0026#34;; Y \u0026lt;= x\u0026#34;8032\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ba0c\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;28d0\u0026#34;; Y \u0026lt;= x\u0026#34;43f2\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;28d0\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9434\u0026#34;; Y \u0026lt;= x\u0026#34;8d40\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8d40\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;16f8\u0026#34;; Y \u0026lt;= x\u0026#34;c460\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d6f8\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2892\u0026#34;; Y \u0026lt;= x\u0026#34;4a2f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d76d\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6124\u0026#34;; Y \u0026lt;= x\u0026#34;acb6\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;9edb\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f741\u0026#34;; Y \u0026lt;= x\u0026#34;c713\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f740\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;30b3\u0026#34;; Y \u0026lt;= x\u0026#34;94b7\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;30b4\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a262\u0026#34;; Y \u0026lt;= x\u0026#34;10e9\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ef16\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9cc6\u0026#34;; Y \u0026lt;= x\u0026#34;3ab2\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;88b2\u0026#34;; Y \u0026lt;= x\u0026#34;c0a4\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c80e\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5fb3\u0026#34;; Y \u0026lt;= x\u0026#34;c613\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;5fb4\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;73b7\u0026#34;; Y \u0026lt;= x\u0026#34;edf7\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1209\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7313\u0026#34;; Y \u0026lt;= x\u0026#34;631c\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8ced\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;eb4a\u0026#34;; Y \u0026lt;= x\u0026#34;1da3\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4b8f\u0026#34;; Y \u0026lt;= x\u0026#34;80cd\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;80ce\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5404\u0026#34;; Y \u0026lt;= x\u0026#34;1c1d\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7021\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f4d7\u0026#34;; Y \u0026lt;= x\u0026#34;e245\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d71c\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d14c\u0026#34;; Y \u0026lt;= x\u0026#34;0c8a\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2eb3\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7b22\u0026#34;; Y \u0026lt;= x\u0026#34;72b2\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8d4d\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a944\u0026#34;; Y \u0026lt;= x\u0026#34;dd41\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;dd42\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1e3e\u0026#34;; Y \u0026lt;= x\u0026#34;760e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1e3e\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d060\u0026#34;; Y \u0026lt;= x\u0026#34;14c7\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a601\u0026#34;; Y \u0026lt;= x\u0026#34;9cd8\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f26c\u0026#34;; Y \u0026lt;= x\u0026#34;b2d8\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0d94\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1310\u0026#34;; Y \u0026lt;= x\u0026#34;b836\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1310\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6103\u0026#34;; Y \u0026lt;= x\u0026#34;9f4f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;9efd\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3941\u0026#34;; Y \u0026lt;= x\u0026#34;32ee\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;3940\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;aa59\u0026#34;; Y \u0026lt;= x\u0026#34;7ca7\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2db2\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;24b6\u0026#34;; Y \u0026lt;= x\u0026#34;2fb1\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ea42\u0026#34;; Y \u0026lt;= x\u0026#34;ebf6\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1409\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3738\u0026#34;; Y \u0026lt;= x\u0026#34;9345\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;3738\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b396\u0026#34;; Y \u0026lt;= x\u0026#34;48ca\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;b396\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;51bd\u0026#34;; Y \u0026lt;= x\u0026#34;202c\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;51bc\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;97c8\u0026#34;; Y \u0026lt;= x\u0026#34;47d0\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;47cf\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ab91\u0026#34;; Y \u0026lt;= x\u0026#34;4629\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;462a\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;28e4\u0026#34;; Y \u0026lt;= x\u0026#34;0942\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;28e4\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3a08\u0026#34;; Y \u0026lt;= x\u0026#34;e2cf\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1cd7\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8289\u0026#34;; Y \u0026lt;= x\u0026#34;ccc7\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;4f50\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ed5c\u0026#34;; Y \u0026lt;= x\u0026#34;b002\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;fd5e\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;810a\u0026#34;; Y \u0026lt;= x\u0026#34;dca2\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;235e\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8f53\u0026#34;; Y \u0026lt;= x\u0026#34;28e1\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7407\u0026#34;; Y \u0026lt;= x\u0026#34;bb6e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8bf8\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;76be\u0026#34;; Y \u0026lt;= x\u0026#34;5217\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;24a7\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;523a\u0026#34;; Y \u0026lt;= x\u0026#34;dff9\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;3233\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;560b\u0026#34;; Y \u0026lt;= x\u0026#34;9f22\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d355\u0026#34;; Y \u0026lt;= x\u0026#34;41a3\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;dfd9\u0026#34;; Y \u0026lt;= x\u0026#34;1d31\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;fd0a\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;feed\u0026#34;; Y \u0026lt;= x\u0026#34;1491\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ea5c\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9395\u0026#34;; Y \u0026lt;= x\u0026#34;f3dd\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;cae6\u0026#34;; Y \u0026lt;= x\u0026#34;064e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;cae6\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f6ba\u0026#34;; Y \u0026lt;= x\u0026#34;329a\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c420\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8434\u0026#34;; Y \u0026lt;= x\u0026#34;229d\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8434\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b712\u0026#34;; Y \u0026lt;= x\u0026#34;c6ae\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;b711\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b29f\u0026#34;; Y \u0026lt;= x\u0026#34;53fc\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;129c\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2d74\u0026#34;; Y \u0026lt;= x\u0026#34;99de\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;99df\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2700\u0026#34;; Y \u0026lt;= x\u0026#34;5083\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b83b\u0026#34;; Y \u0026lt;= x\u0026#34;b83c\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;47c4\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;be5f\u0026#34;; Y \u0026lt;= x\u0026#34;aa61\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;aa61\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3a46\u0026#34;; Y \u0026lt;= x\u0026#34;f91f\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f156\u0026#34;; Y \u0026lt;= x\u0026#34;396f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f155\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ccf4\u0026#34;; Y \u0026lt;= x\u0026#34;3262\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;330b\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b4cf\u0026#34;; Y \u0026lt;= x\u0026#34;74a3\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8b5c\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3c1d\u0026#34;; Y \u0026lt;= x\u0026#34;50f0\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;3c1e\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;cef8\u0026#34;; Y \u0026lt;= x\u0026#34;7788\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8877\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;71ae\u0026#34;; Y \u0026lt;= x\u0026#34;2843\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8e51\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3d43\u0026#34;; Y \u0026lt;= x\u0026#34;af52\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ec95\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e55e\u0026#34;; Y \u0026lt;= x\u0026#34;ddc5\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c544\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4333\u0026#34;; Y \u0026lt;= x\u0026#34;c668\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;bccc\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a5ef\u0026#34;; Y \u0026lt;= x\u0026#34;321a\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a5f0\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;14ad\u0026#34;; Y \u0026lt;= x\u0026#34;5976\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;14ac\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0f58\u0026#34;; Y \u0026lt;= x\u0026#34;7d3f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0f59\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c351\u0026#34;; Y \u0026lt;= x\u0026#34;856a\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7a95\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;dcc4\u0026#34;; Y \u0026lt;= x\u0026#34;6dc6\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e7bd\u0026#34;; Y \u0026lt;= x\u0026#34;49ca\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1842\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e782\u0026#34;; Y \u0026lt;= x\u0026#34;f419\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;28da\u0026#34;; Y \u0026lt;= x\u0026#34;9815\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d725\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b056\u0026#34;; Y \u0026lt;= x\u0026#34;cd61\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;fd77\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;dd0a\u0026#34;; Y \u0026lt;= x\u0026#34;2c10\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;2c11\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9323\u0026#34;; Y \u0026lt;= x\u0026#34;93f5\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;bdc8\u0026#34;; Y \u0026lt;= x\u0026#34;ff0a\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9ef5\u0026#34;; Y \u0026lt;= x\u0026#34;85db\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7a24\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;92a0\u0026#34;; Y \u0026lt;= x\u0026#34;c382\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c382\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4efa\u0026#34;; Y \u0026lt;= x\u0026#34;137b\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;4efb\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b893\u0026#34;; Y \u0026lt;= x\u0026#34;0bcb\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;b893\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7b3b\u0026#34;; Y \u0026lt;= x\u0026#34;3085\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;84c5\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c54b\u0026#34;; Y \u0026lt;= x\u0026#34;77d9\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;3ab4\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b253\u0026#34;; Y \u0026lt;= x\u0026#34;543c\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;b253\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d17b\u0026#34;; Y \u0026lt;= x\u0026#34;05af\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e6a4\u0026#34;; Y \u0026lt;= x\u0026#34;cdca\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;3235\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;49e9\u0026#34;; Y \u0026lt;= x\u0026#34;86ae\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d097\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3856\u0026#34;; Y \u0026lt;= x\u0026#34;caeb\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;3856\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5428\u0026#34;; Y \u0026lt;= x\u0026#34;a687\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e2e0\u0026#34;; Y \u0026lt;= x\u0026#34;880f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1d20\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6249\u0026#34;; Y \u0026lt;= x\u0026#34;7bfa\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;de43\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;afdc\u0026#34;; Y \u0026lt;= x\u0026#34;c3ba\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;effe\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;60f9\u0026#34;; Y \u0026lt;= x\u0026#34;473c\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;67fd\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8bd3\u0026#34;; Y \u0026lt;= x\u0026#34;a61e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8bd4\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1c5b\u0026#34;; Y \u0026lt;= x\u0026#34;e5d3\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;3688\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3212\u0026#34;; Y \u0026lt;= x\u0026#34;9301\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;3212\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4615\u0026#34;; Y \u0026lt;= x\u0026#34;cc51\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1266\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e36c\u0026#34;; Y \u0026lt;= x\u0026#34;23ac\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;bfc0\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a95b\u0026#34;; Y \u0026lt;= x\u0026#34;2696\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;82c5\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b355\u0026#34;; Y \u0026lt;= x\u0026#34;efd4\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c381\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f260\u0026#34;; Y \u0026lt;= x\u0026#34;33a9\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7e6b\u0026#34;; Y \u0026lt;= x\u0026#34;e268\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7e6c\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f73f\u0026#34;; Y \u0026lt;= x\u0026#34;8aca\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;80b8\u0026#34;; Y \u0026lt;= x\u0026#34;462e\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;462d\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;14e7\u0026#34;; Y \u0026lt;= x\u0026#34;e65b\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f86a\u0026#34;; Y \u0026lt;= x\u0026#34;208e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;18f8\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f063\u0026#34;; Y \u0026lt;= x\u0026#34;90b5\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;6f4b\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c4a2\u0026#34;; Y \u0026lt;= x\u0026#34;23fc\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;dc03\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b493\u0026#34;; Y \u0026lt;= x\u0026#34;d7b8\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;b492\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e3fb\u0026#34;; Y \u0026lt;= x\u0026#34;c906\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e3fb\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5153\u0026#34;; Y \u0026lt;= x\u0026#34;bf1a\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ff5b\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f3dd\u0026#34;; Y \u0026lt;= x\u0026#34;d0f3\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f3dc\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3313\u0026#34;; Y \u0026lt;= x\u0026#34;8159\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;b46c\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;344c\u0026#34;; Y \u0026lt;= x\u0026#34;bc62\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;344c\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5817\u0026#34;; Y \u0026lt;= x\u0026#34;e6b3\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e6b3\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7971\u0026#34;; Y \u0026lt;= x\u0026#34;f5a7\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7c36\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;04ac\u0026#34;; Y \u0026lt;= x\u0026#34;e751\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;18af\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;be09\u0026#34;; Y \u0026lt;= x\u0026#34;51b2\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;6c57\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;db7e\u0026#34;; Y \u0026lt;= x\u0026#34;ad1f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2e5f\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0c33\u0026#34;; Y \u0026lt;= x\u0026#34;a8f9\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b4e8\u0026#34;; Y \u0026lt;= x\u0026#34;624e\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e30b\u0026#34;; Y \u0026lt;= x\u0026#34;98a5\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;fbaf\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2b12\u0026#34;; Y \u0026lt;= x\u0026#34;3c17\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d4ed\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;bda5\u0026#34;; Y \u0026lt;= x\u0026#34;d69b\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;bda6\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f2c0\u0026#34;; Y \u0026lt;= x\u0026#34;005e\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffa2\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1873\u0026#34;; Y \u0026lt;= x\u0026#34;01fe\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1873\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2da9\u0026#34;; Y \u0026lt;= x\u0026#34;ff9f\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0060\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6426\u0026#34;; Y \u0026lt;= x\u0026#34;efe9\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;9bd9\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2602\u0026#34;; Y \u0026lt;= x\u0026#34;39be\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c642\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;fad4\u0026#34;; Y \u0026lt;= x\u0026#34;f351\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f87d\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4473\u0026#34;; Y \u0026lt;= x\u0026#34;174e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0442\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8c9f\u0026#34;; Y \u0026lt;= x\u0026#34;2bb4\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d44c\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ea73\u0026#34;; Y \u0026lt;= x\u0026#34;63df\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;9c21\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5fd2\u0026#34;; Y \u0026lt;= x\u0026#34;af23\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0ef5\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5640\u0026#34;; Y \u0026lt;= x\u0026#34;9cc0\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a9c0\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f868\u0026#34;; Y \u0026lt;= x\u0026#34;5173\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;49db\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f462\u0026#34;; Y \u0026lt;= x\u0026#34;d38c\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c7ee\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6233\u0026#34;; Y \u0026lt;= x\u0026#34;545f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;4013\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;cfd5\u0026#34;; Y \u0026lt;= x\u0026#34;5366\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3306\u0026#34;; Y \u0026lt;= x\u0026#34;112a\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;112a\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8e33\u0026#34;; Y \u0026lt;= x\u0026#34;f59d\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffbf\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f015\u0026#34;; Y \u0026lt;= x\u0026#34;2ca1\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f016\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;fde8\u0026#34;; Y \u0026lt;= x\u0026#34;28ad\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d53b\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8980\u0026#34;; Y \u0026lt;= x\u0026#34;c7ef\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8980\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3138\u0026#34;; Y \u0026lt;= x\u0026#34;dbe7\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;3137\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;84a6\u0026#34;; Y \u0026lt;= x\u0026#34;d57a\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;da89\u0026#34;; Y \u0026lt;= x\u0026#34;8767\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7899\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b58c\u0026#34;; Y \u0026lt;= x\u0026#34;6606\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;4a74\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6c65\u0026#34;; Y \u0026lt;= x\u0026#34;9677\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;939a\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;aa9c\u0026#34;; Y \u0026lt;= x\u0026#34;586e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;add2\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;bcf9\u0026#34;; Y \u0026lt;= x\u0026#34;b2a3\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;4307\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;45c1\u0026#34;; Y \u0026lt;= x\u0026#34;f879\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;f87a\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a725\u0026#34;; Y \u0026lt;= x\u0026#34;fdbf\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;58da\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9894\u0026#34;; Y \u0026lt;= x\u0026#34;1378\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d2a4\u0026#34;; Y \u0026lt;= x\u0026#34;38ca\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0864\u0026#34;; Y \u0026lt;= x\u0026#34;84a5\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7b5a\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5bf8\u0026#34;; Y \u0026lt;= x\u0026#34;f778\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;5370\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f1c9\u0026#34;; Y \u0026lt;= x\u0026#34;216e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0e37\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9c73\u0026#34;; Y \u0026lt;= x\u0026#34;809c\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7f64\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9abc\u0026#34;; Y \u0026lt;= x\u0026#34;e360\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7e1c\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a5fa\u0026#34;; Y \u0026lt;= x\u0026#34;dba6\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a5fb\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1ce5\u0026#34;; Y \u0026lt;= x\u0026#34;a7b5\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c49a\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;13c6\u0026#34;; Y \u0026lt;= x\u0026#34;81b8\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;81b7\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4cc1\u0026#34;; Y \u0026lt;= x\u0026#34;d624\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;29dc\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3e6c\u0026#34;; Y \u0026lt;= x\u0026#34;b04f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c194\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f75d\u0026#34;; Y \u0026lt;= x\u0026#34;afe2\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;08a3\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c76f\u0026#34;; Y \u0026lt;= x\u0026#34;d129\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c770\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f635\u0026#34;; Y \u0026lt;= x\u0026#34;818d\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;818c\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a591\u0026#34;; Y \u0026lt;= x\u0026#34;3d06\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c2fa\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c3d6\u0026#34;; Y \u0026lt;= x\u0026#34;97fc\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d426\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;095b\u0026#34;; Y \u0026lt;= x\u0026#34;10dc\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ef24\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;fb20\u0026#34;; Y \u0026lt;= x\u0026#34;78c9\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;fbe9\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7ac8\u0026#34;; Y \u0026lt;= x\u0026#34;ac23\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2800\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8cbc\u0026#34;; Y \u0026lt;= x\u0026#34;ab63\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;549c\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2c62\u0026#34;; Y \u0026lt;= x\u0026#34;9791\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2c63\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;fe6e\u0026#34;; Y \u0026lt;= x\u0026#34;2d7b\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;fe6e\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3d28\u0026#34;; Y \u0026lt;= x\u0026#34;efce\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;fa57\u0026#34;; Y \u0026lt;= x\u0026#34;88c6\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;bb95\u0026#34;; Y \u0026lt;= x\u0026#34;341b\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;341b\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;03df\u0026#34;; Y \u0026lt;= x\u0026#34;2f4a\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2fdf\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;abe4\u0026#34;; Y \u0026lt;= x\u0026#34;31cd\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;abe5\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;98f1\u0026#34;; Y \u0026lt;= x\u0026#34;8196\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1a87\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e593\u0026#34;; Y \u0026lt;= x\u0026#34;7b4c\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1a6d\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a7c0\u0026#34;; Y \u0026lt;= x\u0026#34;a8f7\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a7c0\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1106\u0026#34;; Y \u0026lt;= x\u0026#34;c61c\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;cf4e\u0026#34;; Y \u0026lt;= x\u0026#34;acd6\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8dd1\u0026#34;; Y \u0026lt;= x\u0026#34;70ac\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;70ab\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b519\u0026#34;; Y \u0026lt;= x\u0026#34;98dc\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;6724\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;43ab\u0026#34;; Y \u0026lt;= x\u0026#34;b249\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9c32\u0026#34;; Y \u0026lt;= x\u0026#34;c589\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;63ce\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;94fc\u0026#34;; Y \u0026lt;= x\u0026#34;ad6c\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5c11\u0026#34;; Y \u0026lt;= x\u0026#34;254e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7d5f\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4869\u0026#34;; Y \u0026lt;= x\u0026#34;c3c7\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c3c6\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f67e\u0026#34;; Y \u0026lt;= x\u0026#34;bc31\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;bc30\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;bab6\u0026#34;; Y \u0026lt;= x\u0026#34;1823\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1822\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d60f\u0026#34;; Y \u0026lt;= x\u0026#34;80b6\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;80b7\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;eb57\u0026#34;; Y \u0026lt;= x\u0026#34;1e7e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;eb58\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;cb5f\u0026#34;; Y \u0026lt;= x\u0026#34;32f9\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;34a1\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1487\u0026#34;; Y \u0026lt;= x\u0026#34;42e7\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1475\u0026#34;; Y \u0026lt;= x\u0026#34;b310\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;4cef\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0713\u0026#34;; Y \u0026lt;= x\u0026#34;6fb3\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;6fb3\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;71c0\u0026#34;; Y \u0026lt;= x\u0026#34;ec10\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ec10\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5c60\u0026#34;; Y \u0026lt;= x\u0026#34;42ee\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a39f\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a996\u0026#34;; Y \u0026lt;= x\u0026#34;8673\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ee1f\u0026#34;; Y \u0026lt;= x\u0026#34;5fc7\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a038\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8384\u0026#34;; Y \u0026lt;= x\u0026#34;bf25\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;bf24\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b58f\u0026#34;; Y \u0026lt;= x\u0026#34;912d\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2462\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2df2\u0026#34;; Y \u0026lt;= x\u0026#34;af1d\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;af1d\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b50d\u0026#34;; Y \u0026lt;= x\u0026#34;e74e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;4af2\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4598\u0026#34;; Y \u0026lt;= x\u0026#34;0d36\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0d35\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;93a9\u0026#34;; Y \u0026lt;= x\u0026#34;c6fb\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;6c56\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;37c0\u0026#34;; Y \u0026lt;= x\u0026#34;69b5\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c840\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9da8\u0026#34;; Y \u0026lt;= x\u0026#34;147b\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;76d3\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8de4\u0026#34;; Y \u0026lt;= x\u0026#34;0d64\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7f80\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;91e3\u0026#34;; Y \u0026lt;= x\u0026#34;4aad\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;b553\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3e0f\u0026#34;; Y \u0026lt;= x\u0026#34;7bbd\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;b9cc\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8344\u0026#34;; Y \u0026lt;= x\u0026#34;3437\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;cbc8\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;01d1\u0026#34;; Y \u0026lt;= x\u0026#34;1ab5\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e54b\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e21c\u0026#34;; Y \u0026lt;= x\u0026#34;d24f\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2db1\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c3f3\u0026#34;; Y \u0026lt;= x\u0026#34;3314\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c3e1\u0026#34;; Y \u0026lt;= x\u0026#34;9ec2\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;dfe3\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d301\u0026#34;; Y \u0026lt;= x\u0026#34;82e9\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2cfe\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5e60\u0026#34;; Y \u0026lt;= x\u0026#34;9f2a\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;5e61\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9d73\u0026#34;; Y \u0026lt;= x\u0026#34;9b03\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;628d\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5930\u0026#34;; Y \u0026lt;= x\u0026#34;e646\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;72ea\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;774a\u0026#34;; Y \u0026lt;= x\u0026#34;fd0c\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6267\u0026#34;; Y \u0026lt;= x\u0026#34;eaa5\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;4d0c\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0cb6\u0026#34;; Y \u0026lt;= x\u0026#34;2f50\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;dd66\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f6c9\u0026#34;; Y \u0026lt;= x\u0026#34;45cd\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f6c8\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;807f\u0026#34;; Y \u0026lt;= x\u0026#34;02c1\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;fd3e\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4839\u0026#34;; Y \u0026lt;= x\u0026#34;4d7b\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0542\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9805\u0026#34;; Y \u0026lt;= x\u0026#34;12d3\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;12d2\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b171\u0026#34;; Y \u0026lt;= x\u0026#34;6ce6\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;931a\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f0ef\u0026#34;; Y \u0026lt;= x\u0026#34;0e40\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f0ee\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f791\u0026#34;; Y \u0026lt;= x\u0026#34;3a84\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;086f\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e8d2\u0026#34;; Y \u0026lt;= x\u0026#34;ebbf\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;172d\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;56d1\u0026#34;; Y \u0026lt;= x\u0026#34;51fc\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;57fd\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0d41\u0026#34;; Y \u0026lt;= x\u0026#34;95fe\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0540\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4850\u0026#34;; Y \u0026lt;= x\u0026#34;d82f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;4850\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a6af\u0026#34;; Y \u0026lt;= x\u0026#34;bd4e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a6af\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3a81\u0026#34;; Y \u0026lt;= x\u0026#34;4159\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f928\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4a8d\u0026#34;; Y \u0026lt;= x\u0026#34;d0e9\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;865c\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7283\u0026#34;; Y \u0026lt;= x\u0026#34;b715\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8cf6\u0026#34;; Y \u0026lt;= x\u0026#34;a6b1\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a6b1\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;55ba\u0026#34;; Y \u0026lt;= x\u0026#34;d088\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;5088\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;fab5\u0026#34;; Y \u0026lt;= x\u0026#34;be3b\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8382\u0026#34;; Y \u0026lt;= x\u0026#34;37cd\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3ddf\u0026#34;; Y \u0026lt;= x\u0026#34;f5c2\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c221\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2e94\u0026#34;; Y \u0026lt;= x\u0026#34;b925\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;b924\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ad7f\u0026#34;; Y \u0026lt;= x\u0026#34;233e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;75bf\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3194\u0026#34;; Y \u0026lt;= x\u0026#34;99fa\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;6606\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c302\u0026#34;; Y \u0026lt;= x\u0026#34;1132\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;eece\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;db49\u0026#34;; Y \u0026lt;= x\u0026#34;ba26\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ba26\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4045\u0026#34;; Y \u0026lt;= x\u0026#34;c4f5\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;3b0a\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;809a\u0026#34;; Y \u0026lt;= x\u0026#34;359f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;809a\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7ca4\u0026#34;; Y \u0026lt;= x\u0026#34;abf3\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;28a0\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;02be\u0026#34;; Y \u0026lt;= x\u0026#34;4362\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;228a\u0026#34;; Y \u0026lt;= x\u0026#34;3916\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2002\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c2df\u0026#34;; Y \u0026lt;= x\u0026#34;0fbe\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c2e0\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a127\u0026#34;; Y \u0026lt;= x\u0026#34;9b41\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;5ed8\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2496\u0026#34;; Y \u0026lt;= x\u0026#34;d31d\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;5179\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;26c6\u0026#34;; Y \u0026lt;= x\u0026#34;1cb3\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;3ef7\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;58c5\u0026#34;; Y \u0026lt;= x\u0026#34;4991\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a73b\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;88ed\u0026#34;; Y \u0026lt;= x\u0026#34;7654\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1299\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d753\u0026#34;; Y \u0026lt;= x\u0026#34;7263\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;7264\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0d0a\u0026#34;; Y \u0026lt;= x\u0026#34;b055\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;bd5f\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6135\u0026#34;; Y \u0026lt;= x\u0026#34;9460\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;6135\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;52fe\u0026#34;; Y \u0026lt;= x\u0026#34;6b86\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ad02\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;78dd\u0026#34;; Y \u0026lt;= x\u0026#34;39eb\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8722\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;badf\u0026#34;; Y \u0026lt;= x\u0026#34;d8a4\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1dc5\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9a59\u0026#34;; Y \u0026lt;= x\u0026#34;e196\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;e197\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4a9a\u0026#34;; Y \u0026lt;= x\u0026#34;43bc\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8336\u0026#34;; Y \u0026lt;= x\u0026#34;18f6\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6fd7\u0026#34;; Y \u0026lt;= x\u0026#34;dfe2\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;4fb9\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f854\u0026#34;; Y \u0026lt;= x\u0026#34;b7a9\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;b7a8\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8fae\u0026#34;; Y \u0026lt;= x\u0026#34;a1b7\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2009\u0026#34;; Y \u0026lt;= x\u0026#34;c348\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;c349\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ed60\u0026#34;; Y \u0026lt;= x\u0026#34;9aad\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;12a0\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b2da\u0026#34;; Y \u0026lt;= x\u0026#34;8af3\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;b2db\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0567\u0026#34;; Y \u0026lt;= x\u0026#34;c509\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c509\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9ab0\u0026#34;; Y \u0026lt;= x\u0026#34;aed5\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;aed6\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a9cc\u0026#34;; Y \u0026lt;= x\u0026#34;1222\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;aabf\u0026#34;; Y \u0026lt;= x\u0026#34;1551\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1550\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7474\u0026#34;; Y \u0026lt;= x\u0026#34;e6a3\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e6a3\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0112\u0026#34;; Y \u0026lt;= x\u0026#34;440e\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ae7e\u0026#34;; Y \u0026lt;= x\u0026#34;35f1\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8773\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;07d0\u0026#34;; Y \u0026lt;= x\u0026#34;9bd9\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f830\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f56a\u0026#34;; Y \u0026lt;= x\u0026#34;829f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f569\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;475d\u0026#34;; Y \u0026lt;= x\u0026#34;6ab7\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;235a\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f4f6\u0026#34;; Y \u0026lt;= x\u0026#34;99e3\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0b09\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;fccb\u0026#34;; Y \u0026lt;= x\u0026#34;f722\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0334\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;23c1\u0026#34;; Y \u0026lt;= x\u0026#34;5d2c\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;68e5\u0026#34;; Y \u0026lt;= x\u0026#34;8a1b\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6ee8\u0026#34;; Y \u0026lt;= x\u0026#34;5131\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;67c4\u0026#34;; Y \u0026lt;= x\u0026#34;d4d0\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2b30\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c5d2\u0026#34;; Y \u0026lt;= x\u0026#34;ecaa\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ecaa\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d56d\u0026#34;; Y \u0026lt;= x\u0026#34;063b\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;063c\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a91f\u0026#34;; Y \u0026lt;= x\u0026#34;7162\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;7163\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7b76\u0026#34;; Y \u0026lt;= x\u0026#34;d03a\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;848a\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d480\u0026#34;; Y \u0026lt;= x\u0026#34;f504\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d47f\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;191b\u0026#34;; Y \u0026lt;= x\u0026#34;7121\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a7fa\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;dae3\u0026#34;; Y \u0026lt;= x\u0026#34;7d19\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8342\u0026#34;; Y \u0026lt;= x\u0026#34;a3f8\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8070\u0026#34;; Y \u0026lt;= x\u0026#34;39b7\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ff64\u0026#34;; Y \u0026lt;= x\u0026#34;33a5\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;3309\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3610\u0026#34;; Y \u0026lt;= x\u0026#34;0111\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;34ff\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ecf9\u0026#34;; Y \u0026lt;= x\u0026#34;9976\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;866f\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6b21\u0026#34;; Y \u0026lt;= x\u0026#34;aa62\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;eb63\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;579a\u0026#34;; Y \u0026lt;= x\u0026#34;063a\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;579a\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;36d0\u0026#34;; Y \u0026lt;= x\u0026#34;7809\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ff97\u0026#34;; Y \u0026lt;= x\u0026#34;0d18\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ff9f\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b691\u0026#34;; Y \u0026lt;= x\u0026#34;612d\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;9ed2\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;73f5\u0026#34;; Y \u0026lt;= x\u0026#34;7ac8\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7ac8\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d4d4\u0026#34;; Y \u0026lt;= x\u0026#34;01a0\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0ffc\u0026#34;; Y \u0026lt;= x\u0026#34;4d9b\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7a2a\u0026#34;; Y \u0026lt;= x\u0026#34;7c1f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7e3f\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6dfe\u0026#34;; Y \u0026lt;= x\u0026#34;1bd2\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;add4\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d373\u0026#34;; Y \u0026lt;= x\u0026#34;a679\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d306\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9592\u0026#34;; Y \u0026lt;= x\u0026#34;b5e5\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;b5e4\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c0dc\u0026#34;; Y \u0026lt;= x\u0026#34;3c0a\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c0db\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c79e\u0026#34;; Y \u0026lt;= x\u0026#34;405a\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9cca\u0026#34;; Y \u0026lt;= x\u0026#34;951b\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;07af\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8338\u0026#34;; Y \u0026lt;= x\u0026#34;731f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8339\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4839\u0026#34;; Y \u0026lt;= x\u0026#34;4675\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;fe3c\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e5c8\u0026#34;; Y \u0026lt;= x\u0026#34;bf70\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;bf70\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d4cb\u0026#34;; Y \u0026lt;= x\u0026#34;7fbf\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4b97\u0026#34;; Y \u0026lt;= x\u0026#34;db55\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;4b98\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5349\u0026#34;; Y \u0026lt;= x\u0026#34;cf6e\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;3092\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f9fc\u0026#34;; Y \u0026lt;= x\u0026#34;e3e2\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8ded\u0026#34;; Y \u0026lt;= x\u0026#34;2b22\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0920\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e1ca\u0026#34;; Y \u0026lt;= x\u0026#34;4c99\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;4c98\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;cc99\u0026#34;; Y \u0026lt;= x\u0026#34;a088\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;5f78\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a8b8\u0026#34;; Y \u0026lt;= x\u0026#34;79f9\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a8b9\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e7ac\u0026#34;; Y \u0026lt;= x\u0026#34;6420\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;9bdf\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;841e\u0026#34;; Y \u0026lt;= x\u0026#34;1688\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;841f\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ed03\u0026#34;; Y \u0026lt;= x\u0026#34;ce87\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b112\u0026#34;; Y \u0026lt;= x\u0026#34;2a51\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d5af\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3b37\u0026#34;; Y \u0026lt;= x\u0026#34;1987\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;3b37\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6590\u0026#34;; Y \u0026lt;= x\u0026#34;4a04\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;658f\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7f0b\u0026#34;; Y \u0026lt;= x\u0026#34;5ad8\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d9e3\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c439\u0026#34;; Y \u0026lt;= x\u0026#34;d312\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c43a\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a878\u0026#34;; Y \u0026lt;= x\u0026#34;2c60\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ac78\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e293\u0026#34;; Y \u0026lt;= x\u0026#34;9eb2\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e293\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ff2d\u0026#34;; Y \u0026lt;= x\u0026#34;d149\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d109\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d333\u0026#34;; Y \u0026lt;= x\u0026#34;865c\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d332\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3605\u0026#34;; Y \u0026lt;= x\u0026#34;cdca\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;3604\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f01b\u0026#34;; Y \u0026lt;= x\u0026#34;632e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;5349\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;fd84\u0026#34;; Y \u0026lt;= x\u0026#34;8c58\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;fd83\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1677\u0026#34;; Y \u0026lt;= x\u0026#34;5dc2\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;41da\u0026#34;; Y \u0026lt;= x\u0026#34;3855\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8d0a\u0026#34;; Y \u0026lt;= x\u0026#34;8af7\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;72f5\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;672d\u0026#34;; Y \u0026lt;= x\u0026#34;97a7\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;97a6\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8778\u0026#34;; Y \u0026lt;= x\u0026#34;2255\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8b2b\u0026#34;; Y \u0026lt;= x\u0026#34;3c88\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c7b3\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;82a2\u0026#34;; Y \u0026lt;= x\u0026#34;7905\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7d5d\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c362\u0026#34;; Y \u0026lt;= x\u0026#34;a70b\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1c57\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7029\u0026#34;; Y \u0026lt;= x\u0026#34;0e28\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;702a\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c7dc\u0026#34;; Y \u0026lt;= x\u0026#34;9bba\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;3824\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;980f\u0026#34;; Y \u0026lt;= x\u0026#34;af0c\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;50f3\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6715\u0026#34;; Y \u0026lt;= x\u0026#34;d56b\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f78b\u0026#34;; Y \u0026lt;= x\u0026#34;c0e1\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c081\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;028c\u0026#34;; Y \u0026lt;= x\u0026#34;8587\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8586\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2b9c\u0026#34;; Y \u0026lt;= x\u0026#34;baa8\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;4557\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;73d5\u0026#34;; Y \u0026lt;= x\u0026#34;40d8\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;bf27\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9437\u0026#34;; Y \u0026lt;= x\u0026#34;28f3\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;9436\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2fea\u0026#34;; Y \u0026lt;= x\u0026#34;24e7\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;24e8\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;bb1d\u0026#34;; Y \u0026lt;= x\u0026#34;9318\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;9319\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f898\u0026#34;; Y \u0026lt;= x\u0026#34;ea2a\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;fb3a\u0026#34;; Y \u0026lt;= x\u0026#34;22a2\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;22a3\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7e95\u0026#34;; Y \u0026lt;= x\u0026#34;d518\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ff9d\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3f80\u0026#34;; Y \u0026lt;= x\u0026#34;6d73\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;3f80\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;aac1\u0026#34;; Y \u0026lt;= x\u0026#34;3b0b\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;aac2\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7fd7\u0026#34;; Y \u0026lt;= x\u0026#34;d63f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7fd8\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ef59\u0026#34;; Y \u0026lt;= x\u0026#34;79c3\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8a22\u0026#34;; Y \u0026lt;= x\u0026#34;4413\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;bbec\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0fef\u0026#34;; Y \u0026lt;= x\u0026#34;1cda\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1fff\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;89b1\u0026#34;; Y \u0026lt;= x\u0026#34;236f\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;2370\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8de2\u0026#34;; Y \u0026lt;= x\u0026#34;9729\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8de1\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f6fc\u0026#34;; Y \u0026lt;= x\u0026#34;33de\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f6fc\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e17f\u0026#34;; Y \u0026lt;= x\u0026#34;e17e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e17f\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b8af\u0026#34;; Y \u0026lt;= x\u0026#34;d81f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e090\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d24a\u0026#34;; Y \u0026lt;= x\u0026#34;a1bd\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d24a\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;65d2\u0026#34;; Y \u0026lt;= x\u0026#34;3ce3\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;28ef\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2142\u0026#34;; Y \u0026lt;= x\u0026#34;9c50\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2143\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4877\u0026#34;; Y \u0026lt;= x\u0026#34;9e58\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;9e59\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;37a9\u0026#34;; Y \u0026lt;= x\u0026#34;ae23\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2621\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;61b9\u0026#34;; Y \u0026lt;= x\u0026#34;053a\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a381\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d4b0\u0026#34;; Y \u0026lt;= x\u0026#34;4a19\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d4af\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2adf\u0026#34;; Y \u0026lt;= x\u0026#34;bf5c\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d520\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a891\u0026#34;; Y \u0026lt;= x\u0026#34;f23e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;b653\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c6cc\u0026#34;; Y \u0026lt;= x\u0026#34;1b2a\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0208\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;aa26\u0026#34;; Y \u0026lt;= x\u0026#34;c42b\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c42b\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7d59\u0026#34;; Y \u0026lt;= x\u0026#34;6c7d\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e9d6\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9b6f\u0026#34;; Y \u0026lt;= x\u0026#34;5c13\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;6490\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f1ef\u0026#34;; Y \u0026lt;= x\u0026#34;77dd\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0074\u0026#34;; Y \u0026lt;= x\u0026#34;fe4c\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0075\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;abaf\u0026#34;; Y \u0026lt;= x\u0026#34;7204\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8dfb\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0686\u0026#34;; Y \u0026lt;= x\u0026#34;411c\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3a7d\u0026#34;; Y \u0026lt;= x\u0026#34;ff7b\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;3a79\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;262e\u0026#34;; Y \u0026lt;= x\u0026#34;44d2\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;bb2e\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;215b\u0026#34;; Y \u0026lt;= x\u0026#34;e8a8\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0a03\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8453\u0026#34;; Y \u0026lt;= x\u0026#34;b707\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8403\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;68e9\u0026#34;; Y \u0026lt;= x\u0026#34;6cb7\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;9717\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1b27\u0026#34;; Y \u0026lt;= x\u0026#34;801f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1b27\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;cc75\u0026#34;; Y \u0026lt;= x\u0026#34;14c0\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;14c1\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1cf8\u0026#34;; Y \u0026lt;= x\u0026#34;8eab\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;8eac\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1d07\u0026#34;; Y \u0026lt;= x\u0026#34;18b3\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1db7\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;27fe\u0026#34;; Y \u0026lt;= x\u0026#34;d39f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;27ff\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2d4e\u0026#34;; Y \u0026lt;= x\u0026#34;c373\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2d4e\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4149\u0026#34;; Y \u0026lt;= x\u0026#34;1f7b\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1f7b\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2aec\u0026#34;; Y \u0026lt;= x\u0026#34;2745\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2aed\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8d48\u0026#34;; Y \u0026lt;= x\u0026#34;4120\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;4120\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;93d3\u0026#34;; Y \u0026lt;= x\u0026#34;c9bc\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8190\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d0af\u0026#34;; Y \u0026lt;= x\u0026#34;432f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d0b0\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c473\u0026#34;; Y \u0026lt;= x\u0026#34;4c34\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;3b8c\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2291\u0026#34;; Y \u0026lt;= x\u0026#34;2dff\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2091\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e1f3\u0026#34;; Y \u0026lt;= x\u0026#34;7b09\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e1f4\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;58a1\u0026#34;; Y \u0026lt;= x\u0026#34;4a74\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;b58b\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c461\u0026#34;; Y \u0026lt;= x\u0026#34;f7c6\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0839\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;590a\u0026#34;; Y \u0026lt;= x\u0026#34;66bf\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;400a\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a64f\u0026#34;; Y \u0026lt;= x\u0026#34;0716\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;60c7\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9518\u0026#34;; Y \u0026lt;= x\u0026#34;3d63\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;6ae7\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;81b9\u0026#34;; Y \u0026lt;= x\u0026#34;fee9\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;fee9\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a909\u0026#34;; Y \u0026lt;= x\u0026#34;7cbc\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7cbc\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;72a0\u0026#34;; Y \u0026lt;= x\u0026#34;2ebd\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d143\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e936\u0026#34;; Y \u0026lt;= x\u0026#34;ce00\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;ce01\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a005\u0026#34;; Y \u0026lt;= x\u0026#34;99e7\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a005\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0db5\u0026#34;; Y \u0026lt;= x\u0026#34;6a01\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;6a01\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3f61\u0026#34;; Y \u0026lt;= x\u0026#34;ad3c\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d820\u0026#34;; Y \u0026lt;= x\u0026#34;8c3e\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8c3e\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5fb3\u0026#34;; Y \u0026lt;= x\u0026#34;e3ac\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;435f\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c9f0\u0026#34;; Y \u0026lt;= x\u0026#34;9081\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;6f7e\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;431e\u0026#34;; Y \u0026lt;= x\u0026#34;6b54\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5b2a\u0026#34;; Y \u0026lt;= x\u0026#34;04d6\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a4d5\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;864d\u0026#34;; Y \u0026lt;= x\u0026#34;5490\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d6dd\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1047\u0026#34;; Y \u0026lt;= x\u0026#34;68d9\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1046\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6767\u0026#34;; Y \u0026lt;= x\u0026#34;6edf\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d646\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ca34\u0026#34;; Y \u0026lt;= x\u0026#34;a8fd\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a8fc\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5a60\u0026#34;; Y \u0026lt;= x\u0026#34;c47e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;5a5f\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7128\u0026#34;; Y \u0026lt;= x\u0026#34;76f9\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;76fa\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e543\u0026#34;; Y \u0026lt;= x\u0026#34;86d6\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;499d\u0026#34;; Y \u0026lt;= x\u0026#34;6acf\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;6ace\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;588c\u0026#34;; Y \u0026lt;= x\u0026#34;73ea\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;73e9\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2be7\u0026#34;; Y \u0026lt;= x\u0026#34;a92c\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7d45\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7d6e\u0026#34;; Y \u0026lt;= x\u0026#34;13f1\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;9683\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d416\u0026#34;; Y \u0026lt;= x\u0026#34;4518\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;bae8\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8ac0\u0026#34;; Y \u0026lt;= x\u0026#34;bc64\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;bc63\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;25d8\u0026#34;; Y \u0026lt;= x\u0026#34;b522\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;b521\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;dda0\u0026#34;; Y \u0026lt;= x\u0026#34;e42b\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;068b\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2a1e\u0026#34;; Y \u0026lt;= x\u0026#34;e6de\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;bcc0\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7e5f\u0026#34;; Y \u0026lt;= x\u0026#34;3148\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ceb7\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e652\u0026#34;; Y \u0026lt;= x\u0026#34;718f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;74c3\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b242\u0026#34;; Y \u0026lt;= x\u0026#34;2e93\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;83af\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f619\u0026#34;; Y \u0026lt;= x\u0026#34;4bbc\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f618\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d131\u0026#34;; Y \u0026lt;= x\u0026#34;4ebe\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2ecf\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9745\u0026#34;; Y \u0026lt;= x\u0026#34;342c\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e641\u0026#34;; Y \u0026lt;= x\u0026#34;0fba\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;46bc\u0026#34;; Y \u0026lt;= x\u0026#34;39f5\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4e4d\u0026#34;; Y \u0026lt;= x\u0026#34;50a4\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0257\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4092\u0026#34;; Y \u0026lt;= x\u0026#34;cad0\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e36f\u0026#34;; Y \u0026lt;= x\u0026#34;f2c2\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e36e\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;eddf\u0026#34;; Y \u0026lt;= x\u0026#34;e25e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0b81\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3ac8\u0026#34;; Y \u0026lt;= x\u0026#34;961b\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c538\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9419\u0026#34;; Y \u0026lt;= x\u0026#34;5748\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1408\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d6db\u0026#34;; Y \u0026lt;= x\u0026#34;7ff4\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a919\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;fee0\u0026#34;; Y \u0026lt;= x\u0026#34;632d\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffed\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6a46\u0026#34;; Y \u0026lt;= x\u0026#34;32e4\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;32e5\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7527\u0026#34;; Y \u0026lt;= x\u0026#34;42a4\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;3283\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0cd4\u0026#34;; Y \u0026lt;= x\u0026#34;7bfd\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7bfd\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d5dd\u0026#34;; Y \u0026lt;= x\u0026#34;8732\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;dd61\u0026#34;; Y \u0026lt;= x\u0026#34;896c\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;229e\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;abb2\u0026#34;; Y \u0026lt;= x\u0026#34;a2c1\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a2c0\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3dd3\u0026#34;; Y \u0026lt;= x\u0026#34;7fbf\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8040\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1ff8\u0026#34;; Y \u0026lt;= x\u0026#34;e966\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1ff9\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c3b7\u0026#34;; Y \u0026lt;= x\u0026#34;67ba\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2b71\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;fb31\u0026#34;; Y \u0026lt;= x\u0026#34;cd4b\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2de6\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;383c\u0026#34;; Y \u0026lt;= x\u0026#34;0247\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0246\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;606e\u0026#34;; Y \u0026lt;= x\u0026#34;fead\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;606d\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;76f0\u0026#34;; Y \u0026lt;= x\u0026#34;9528\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;9529\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1c98\u0026#34;; Y \u0026lt;= x\u0026#34;2fa3\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2fa3\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e493\u0026#34;; Y \u0026lt;= x\u0026#34;106a\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f4fb\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6bf6\u0026#34;; Y \u0026lt;= x\u0026#34;cd54\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;6bf6\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c77d\u0026#34;; Y \u0026lt;= x\u0026#34;53d2\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ac2e\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2cb6\u0026#34;; Y \u0026lt;= x\u0026#34;6007\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8054\u0026#34;; Y \u0026lt;= x\u0026#34;979a\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7fac\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;28cd\u0026#34;; Y \u0026lt;= x\u0026#34;b3a6\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d654\u0026#34;; Y \u0026lt;= x\u0026#34;37f9\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;37f8\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f228\u0026#34;; Y \u0026lt;= x\u0026#34;570a\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;4932\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4511\u0026#34;; Y \u0026lt;= x\u0026#34;d532\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;6fdf\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d561\u0026#34;; Y \u0026lt;= x\u0026#34;89f9\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2a9e\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4bf2\u0026#34;; Y \u0026lt;= x\u0026#34;362d\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;362c\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f2a8\u0026#34;; Y \u0026lt;= x\u0026#34;4286\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;bd79\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3587\u0026#34;; Y \u0026lt;= x\u0026#34;1dcc\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e234\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;bd1a\u0026#34;; Y \u0026lt;= x\u0026#34;a721\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;643b\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;72e5\u0026#34;; Y \u0026lt;= x\u0026#34;3043\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8d1b\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1cf6\u0026#34;; Y \u0026lt;= x\u0026#34;ba87\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ba87\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a0fb\u0026#34;; Y \u0026lt;= x\u0026#34;db97\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;5f04\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e7a8\u0026#34;; Y \u0026lt;= x\u0026#34;e40a\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;94b0\u0026#34;; Y \u0026lt;= x\u0026#34;77a1\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0c51\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8556\u0026#34;; Y \u0026lt;= x\u0026#34;aee0\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;aff6\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e20b\u0026#34;; Y \u0026lt;= x\u0026#34;e5a6\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2c11\u0026#34;; Y \u0026lt;= x\u0026#34;972d\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;6b1c\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8300\u0026#34;; Y \u0026lt;= x\u0026#34;6183\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8300\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e3f5\u0026#34;; Y \u0026lt;= x\u0026#34;f196\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;144a\u0026#34;; Y \u0026lt;= x\u0026#34;2a19\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2139\u0026#34;; Y \u0026lt;= x\u0026#34;e367\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e367\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6b75\u0026#34;; Y \u0026lt;= x\u0026#34;5f1a\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ca8f\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;10ac\u0026#34;; Y \u0026lt;= x\u0026#34;4112\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;beed\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6b8d\u0026#34;; Y \u0026lt;= x\u0026#34;f16a\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;9473\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ac8c\u0026#34;; Y \u0026lt;= x\u0026#34;6f32\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;6f32\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1c31\u0026#34;; Y \u0026lt;= x\u0026#34;b0ad\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;04ee\u0026#34;; Y \u0026lt;= x\u0026#34;b27c\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;b27c\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1834\u0026#34;; Y \u0026lt;= x\u0026#34;b138\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;b138\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0e39\u0026#34;; Y \u0026lt;= x\u0026#34;c3ad\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1d4e\u0026#34;; Y \u0026lt;= x\u0026#34;76eb\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e2b2\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9ec9\u0026#34;; Y \u0026lt;= x\u0026#34;d24d\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d24c\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;cba9\u0026#34;; Y \u0026lt;= x\u0026#34;4577\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;cfff\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;fdc4\u0026#34;; Y \u0026lt;= x\u0026#34;4a1d\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2726\u0026#34;; Y \u0026lt;= x\u0026#34;7bc3\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a2e9\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ca06\u0026#34;; Y \u0026lt;= x\u0026#34;e341\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e341\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8f89\u0026#34;; Y \u0026lt;= x\u0026#34;9a13\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;9a12\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;466f\u0026#34;; Y \u0026lt;= x\u0026#34;6831\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;aea0\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;984a\u0026#34;; Y \u0026lt;= x\u0026#34;2f9c\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;68ae\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c6f1\u0026#34;; Y \u0026lt;= x\u0026#34;16cf\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;16cf\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f312\u0026#34;; Y \u0026lt;= x\u0026#34;e707\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f717\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;cc2e\u0026#34;; Y \u0026lt;= x\u0026#34;c1bd\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b21a\u0026#34;; Y \u0026lt;= x\u0026#34;5dd9\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;b21a\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5b25\u0026#34;; Y \u0026lt;= x\u0026#34;5746\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;fc21\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8d24\u0026#34;; Y \u0026lt;= x\u0026#34;9cec\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;9ced\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5de2\u0026#34;; Y \u0026lt;= x\u0026#34;a5f6\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;4814\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9185\u0026#34;; Y \u0026lt;= x\u0026#34;f04e\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;241e\u0026#34;; Y \u0026lt;= x\u0026#34;8f95\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8f95\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4ca5\u0026#34;; Y \u0026lt;= x\u0026#34;e8f0\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;3595\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;bddf\u0026#34;; Y \u0026lt;= x\u0026#34;0f6f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;4220\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ad97\u0026#34;; Y \u0026lt;= x\u0026#34;9996\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;def6\u0026#34;; Y \u0026lt;= x\u0026#34;81c1\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a2cb\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d2a4\u0026#34;; Y \u0026lt;= x\u0026#34;5b10\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;19e1\u0026#34;; Y \u0026lt;= x\u0026#34;b751\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;48af\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;eb9e\u0026#34;; Y \u0026lt;= x\u0026#34;ff9a\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1462\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a3ee\u0026#34;; Y \u0026lt;= x\u0026#34;5521\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;5520\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;dc41\u0026#34;; Y \u0026lt;= x\u0026#34;7aef\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0fad\u0026#34;; Y \u0026lt;= x\u0026#34;3d7c\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0fae\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5235\u0026#34;; Y \u0026lt;= x\u0026#34;79eb\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;79eb\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f4fa\u0026#34;; Y \u0026lt;= x\u0026#34;f44f\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0bb0\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;66b0\u0026#34;; Y \u0026lt;= x\u0026#34;25fd\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;25fc\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6594\u0026#34;; Y \u0026lt;= x\u0026#34;5848\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;5848\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;422d\u0026#34;; Y \u0026lt;= x\u0026#34;828e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c2af\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8add\u0026#34;; Y \u0026lt;= x\u0026#34;5b27\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7523\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;40c4\u0026#34;; Y \u0026lt;= x\u0026#34;4b25\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;4b25\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e922\u0026#34;; Y \u0026lt;= x\u0026#34;122e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e923\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ded9\u0026#34;; Y \u0026lt;= x\u0026#34;971e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ded9\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4d2e\u0026#34;; Y \u0026lt;= x\u0026#34;1d00\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1d00\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4b75\u0026#34;; Y \u0026lt;= x\u0026#34;6385\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;b48a\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d32e\u0026#34;; Y \u0026lt;= x\u0026#34;77bf\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;081e\u0026#34;; Y \u0026lt;= x\u0026#34;2790\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2fae\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e744\u0026#34;; Y \u0026lt;= x\u0026#34;cda3\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;cda3\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;139a\u0026#34;; Y \u0026lt;= x\u0026#34;474a\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f161\u0026#34;; Y \u0026lt;= x\u0026#34;bbf7\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0e9e\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5bb9\u0026#34;; Y \u0026lt;= x\u0026#34;de07\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7db2\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9506\u0026#34;; Y \u0026lt;= x\u0026#34;82c7\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;9505\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4541\u0026#34;; Y \u0026lt;= x\u0026#34;8092\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8a3b\u0026#34;; Y \u0026lt;= x\u0026#34;c7ce\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;3831\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3063\u0026#34;; Y \u0026lt;= x\u0026#34;a7f5\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;cf9c\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;815d\u0026#34;; Y \u0026lt;= x\u0026#34;2081\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2081\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1eb7\u0026#34;; Y \u0026lt;= x\u0026#34;6a79\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1eb6\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a79c\u0026#34;; Y \u0026lt;= x\u0026#34;495e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;5864\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d63e\u0026#34;; Y \u0026lt;= x\u0026#34;eb5b\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4133\u0026#34;; Y \u0026lt;= x\u0026#34;8770\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;19eb\u0026#34;; Y \u0026lt;= x\u0026#34;5ba5\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;5ba4\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d04f\u0026#34;; Y \u0026lt;= x\u0026#34;a32d\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a32c\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c298\u0026#34;; Y \u0026lt;= x\u0026#34;7784\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;7785\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8358\u0026#34;; Y \u0026lt;= x\u0026#34;98b4\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1c0c\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d76e\u0026#34;; Y \u0026lt;= x\u0026#34;252d\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3a9c\u0026#34;; Y \u0026lt;= x\u0026#34;ae57\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;51a9\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e004\u0026#34;; Y \u0026lt;= x\u0026#34;eca0\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e000\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8cde\u0026#34;; Y \u0026lt;= x\u0026#34;a6d2\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;55c3\u0026#34;; Y \u0026lt;= x\u0026#34;c0e8\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;aa3d\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c1f5\u0026#34;; Y \u0026lt;= x\u0026#34;07b5\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c9aa\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;85e3\u0026#34;; Y \u0026lt;= x\u0026#34;5fec\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;da09\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e00d\u0026#34;; Y \u0026lt;= x\u0026#34;594b\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6cd9\u0026#34;; Y \u0026lt;= x\u0026#34;0a81\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0881\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0d08\u0026#34;; Y \u0026lt;= x\u0026#34;8ffe\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8ffe\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5366\u0026#34;; Y \u0026lt;= x\u0026#34;b1e6\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;4e1a\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;cbbd\u0026#34;; Y \u0026lt;= x\u0026#34;6cc8\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a10b\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4a02\u0026#34;; Y \u0026lt;= x\u0026#34;08b3\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;beb1\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;89e6\u0026#34;; Y \u0026lt;= x\u0026#34;5d7c\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a283\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d514\u0026#34;; Y \u0026lt;= x\u0026#34;20dd\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d513\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2525\u0026#34;; Y \u0026lt;= x\u0026#34;d3e0\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2c20\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4593\u0026#34;; Y \u0026lt;= x\u0026#34;0765\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0765\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;eb8b\u0026#34;; Y \u0026lt;= x\u0026#34;2f0d\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;bc7e\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f259\u0026#34;; Y \u0026lt;= x\u0026#34;092a\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0da6\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8607\u0026#34;; Y \u0026lt;= x\u0026#34;869e\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;869f\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;dfeb\u0026#34;; Y \u0026lt;= x\u0026#34;eff0\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;efef\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;78fa\u0026#34;; Y \u0026lt;= x\u0026#34;ce53\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0756\u0026#34;; Y \u0026lt;= x\u0026#34;621c\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;9de4\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6de8\u0026#34;; Y \u0026lt;= x\u0026#34;bfd4\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2dc0\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7483\u0026#34;; Y \u0026lt;= x\u0026#34;7f8d\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f4f6\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f04f\u0026#34;; Y \u0026lt;= x\u0026#34;1ef0\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2ea1\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e90e\u0026#34;; Y \u0026lt;= x\u0026#34;f070\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e90e\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e919\u0026#34;; Y \u0026lt;= x\u0026#34;fec1\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;564f\u0026#34;; Y \u0026lt;= x\u0026#34;3ceb\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;5650\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f82b\u0026#34;; Y \u0026lt;= x\u0026#34;2c4a\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f82a\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7742\u0026#34;; Y \u0026lt;= x\u0026#34;dbee\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7743\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;bc64\u0026#34;; Y \u0026lt;= x\u0026#34;0603\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ed73\u0026#34;; Y \u0026lt;= x\u0026#34;12dd\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ed72\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;59c0\u0026#34;; Y \u0026lt;= x\u0026#34;620a\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a640\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f58e\u0026#34;; Y \u0026lt;= x\u0026#34;b192\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;b193\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5688\u0026#34;; Y \u0026lt;= x\u0026#34;7045\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;5689\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0dc9\u0026#34;; Y \u0026lt;= x\u0026#34;02fd\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0dc9\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5d4a\u0026#34;; Y \u0026lt;= x\u0026#34;16d6\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;5d4b\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4f41\u0026#34;; Y \u0026lt;= x\u0026#34;49e3\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;067d\u0026#34;; Y \u0026lt;= x\u0026#34;86e1\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8d5e\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c490\u0026#34;; Y \u0026lt;= x\u0026#34;5f7c\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;3b6f\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8482\u0026#34;; Y \u0026lt;= x\u0026#34;0fc5\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f03b\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e105\u0026#34;; Y \u0026lt;= x\u0026#34;36c6\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1efa\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;39d5\u0026#34;; Y \u0026lt;= x\u0026#34;144d\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;020d\u0026#34;; Y \u0026lt;= x\u0026#34;75a1\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7394\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b309\u0026#34;; Y \u0026lt;= x\u0026#34;c086\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;3f7a\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8a3c\u0026#34;; Y \u0026lt;= x\u0026#34;5989\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1fd5\u0026#34;; Y \u0026lt;= x\u0026#34;a5fa\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e02a\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;562d\u0026#34;; Y \u0026lt;= x\u0026#34;7344\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7343\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b58b\u0026#34;; Y \u0026lt;= x\u0026#34;5214\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;5214\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;55ab\u0026#34;; Y \u0026lt;= x\u0026#34;a85a\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ad51\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7cce\u0026#34;; Y \u0026lt;= x\u0026#34;bda3\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2f81\u0026#34;; Y \u0026lt;= x\u0026#34;d3e6\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2c19\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;29ac\u0026#34;; Y \u0026lt;= x\u0026#34;e173\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0b1f\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8a47\u0026#34;; Y \u0026lt;= x\u0026#34;eebc\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;75b8\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0be0\u0026#34;; Y \u0026lt;= x\u0026#34;b3d0\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0be1\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3b80\u0026#34;; Y \u0026lt;= x\u0026#34;6e77\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7ff7\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0403\u0026#34;; Y \u0026lt;= x\u0026#34;d926\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;fbfd\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ab08\u0026#34;; Y \u0026lt;= x\u0026#34;0bd8\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ab08\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ef0c\u0026#34;; Y \u0026lt;= x\u0026#34;81f1\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ef0c\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a7e7\u0026#34;; Y \u0026lt;= x\u0026#34;e07f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a7e7\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3707\u0026#34;; Y \u0026lt;= x\u0026#34;2c96\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c8f9\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;acfd\u0026#34;; Y \u0026lt;= x\u0026#34;3f38\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;acfc\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6914\u0026#34;; Y \u0026lt;= x\u0026#34;e1d7\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;6114\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0eba\u0026#34;; Y \u0026lt;= x\u0026#34;d5a2\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d5a1\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b73d\u0026#34;; Y \u0026lt;= x\u0026#34;0ff3\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0731\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a3cf\u0026#34;; Y \u0026lt;= x\u0026#34;25d9\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;dbcb\u0026#34;; Y \u0026lt;= x\u0026#34;c1d5\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c1c1\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9ae4\u0026#34;; Y \u0026lt;= x\u0026#34;7b2b\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;84d4\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e7dd\u0026#34;; Y \u0026lt;= x\u0026#34;6ccf\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e7de\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4519\u0026#34;; Y \u0026lt;= x\u0026#34;fd3e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;451a\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;cfd9\u0026#34;; Y \u0026lt;= x\u0026#34;8a16\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ba3d\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;bdaa\u0026#34;; Y \u0026lt;= x\u0026#34;6b06\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffae\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;063d\u0026#34;; Y \u0026lt;= x\u0026#34;6cf5\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;6cf5\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0df6\u0026#34;; Y \u0026lt;= x\u0026#34;4004\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b587\u0026#34;; Y \u0026lt;= x\u0026#34;97ed\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a497\u0026#34;; Y \u0026lt;= x\u0026#34;73e4\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;5b69\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3315\u0026#34;; Y \u0026lt;= x\u0026#34;1be7\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1be6\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2f2a\u0026#34;; Y \u0026lt;= x\u0026#34;650b\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;9af4\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3c6c\u0026#34;; Y \u0026lt;= x\u0026#34;65bf\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0bb7\u0026#34;; Y \u0026lt;= x\u0026#34;6dc1\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;6ff7\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;446e\u0026#34;; Y \u0026lt;= x\u0026#34;3144\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;3144\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a6f8\u0026#34;; Y \u0026lt;= x\u0026#34;8f72\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;5907\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;bacd\u0026#34;; Y \u0026lt;= x\u0026#34;43dc\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;76f1\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;fdcf\u0026#34;; Y \u0026lt;= x\u0026#34;6d46\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;6d46\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0600\u0026#34;; Y \u0026lt;= x\u0026#34;c152\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;44ae\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e39d\u0026#34;; Y \u0026lt;= x\u0026#34;8897\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1c63\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;217e\u0026#34;; Y \u0026lt;= x\u0026#34;dc64\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;dc63\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6449\u0026#34;; Y \u0026lt;= x\u0026#34;3521\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d0d8\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b3cf\u0026#34;; Y \u0026lt;= x\u0026#34;2b60\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7791\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;afc7\u0026#34;; Y \u0026lt;= x\u0026#34;7c96\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5a5a\u0026#34;; Y \u0026lt;= x\u0026#34;65b7\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;9a48\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c8ec\u0026#34;; Y \u0026lt;= x\u0026#34;7dd6\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;3713\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ce2e\u0026#34;; Y \u0026lt;= x\u0026#34;476a\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ef2c\u0026#34;; Y \u0026lt;= x\u0026#34;fc33\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;fc33\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;555f\u0026#34;; Y \u0026lt;= x\u0026#34;ada0\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;02ff\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;bf58\u0026#34;; Y \u0026lt;= x\u0026#34;ba8e\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ba8d\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d61a\u0026#34;; Y \u0026lt;= x\u0026#34;ef15\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a80b\u0026#34;; Y \u0026lt;= x\u0026#34;277f\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;2780\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;048e\u0026#34;; Y \u0026lt;= x\u0026#34;879e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8310\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6b18\u0026#34;; Y \u0026lt;= x\u0026#34;039c\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0318\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;60d3\u0026#34;; Y \u0026lt;= x\u0026#34;8583\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0b60\u0026#34;; Y \u0026lt;= x\u0026#34;f4e5\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0b61\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4670\u0026#34;; Y \u0026lt;= x\u0026#34;72f9\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;cf4c\u0026#34;; Y \u0026lt;= x\u0026#34;c994\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;fa48\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8f6a\u0026#34;; Y \u0026lt;= x\u0026#34;6235\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;9dca\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4d09\u0026#34;; Y \u0026lt;= x\u0026#34;63e4\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;9c1c\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d8e4\u0026#34;; Y \u0026lt;= x\u0026#34;976f\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;9770\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e400\u0026#34;; Y \u0026lt;= x\u0026#34;ec95\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;136a\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;36f5\u0026#34;; Y \u0026lt;= x\u0026#34;a20f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c90a\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9f8e\u0026#34;; Y \u0026lt;= x\u0026#34;a30f\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b776\u0026#34;; Y \u0026lt;= x\u0026#34;4c35\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0603\u0026#34;; Y \u0026lt;= x\u0026#34;9b81\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;9b82\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e4ac\u0026#34;; Y \u0026lt;= x\u0026#34;1302\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f7ae\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ba3b\u0026#34;; Y \u0026lt;= x\u0026#34;44e2\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;bb1e\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8d37\u0026#34;; Y \u0026lt;= x\u0026#34;34b3\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c1ea\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f0bf\u0026#34;; Y \u0026lt;= x\u0026#34;b2b2\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;4d4d\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2dcf\u0026#34;; Y \u0026lt;= x\u0026#34;aebc\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ac39\u0026#34;; Y \u0026lt;= x\u0026#34;14f8\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ac39\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2618\u0026#34;; Y \u0026lt;= x\u0026#34;acd9\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a800\u0026#34;; Y \u0026lt;= x\u0026#34;d506\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2af9\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d9b4\u0026#34;; Y \u0026lt;= x\u0026#34;bd3d\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;fdbd\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4301\u0026#34;; Y \u0026lt;= x\u0026#34;73b4\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;b6b5\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;947e\u0026#34;; Y \u0026lt;= x\u0026#34;211f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;947d\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;bf25\u0026#34;; Y \u0026lt;= x\u0026#34;b36a\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f445\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4b68\u0026#34;; Y \u0026lt;= x\u0026#34;bd63\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;429c\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1326\u0026#34;; Y \u0026lt;= x\u0026#34;068f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0c97\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1a1b\u0026#34;; Y \u0026lt;= x\u0026#34;51e4\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;6bff\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;20b7\u0026#34;; Y \u0026lt;= x\u0026#34;d369\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;4d4e\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ee07\u0026#34;; Y \u0026lt;= x\u0026#34;955c\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ee08\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;468c\u0026#34;; Y \u0026lt;= x\u0026#34;3128\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ea9c\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;50f8\u0026#34;; Y \u0026lt;= x\u0026#34;e284\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;4080\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5c20\u0026#34;; Y \u0026lt;= x\u0026#34;c245\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;c246\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a47c\u0026#34;; Y \u0026lt;= x\u0026#34;0438\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;5fbc\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9664\u0026#34;; Y \u0026lt;= x\u0026#34;72fa\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1260\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;eab2\u0026#34;; Y \u0026lt;= x\u0026#34;1610\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d4a2\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8be6\u0026#34;; Y \u0026lt;= x\u0026#34;c53e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8be7\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f59d\u0026#34;; Y \u0026lt;= x\u0026#34;1fd2\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f59e\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;da6b\u0026#34;; Y \u0026lt;= x\u0026#34;da2d\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;25fe\u0026#34;; Y \u0026lt;= x\u0026#34;2148\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;04b6\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d064\u0026#34;; Y \u0026lt;= x\u0026#34;8fcf\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8044\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;febc\u0026#34;; Y \u0026lt;= x\u0026#34;5e64\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;5e64\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d615\u0026#34;; Y \u0026lt;= x\u0026#34;1ee9\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e116\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;86d8\u0026#34;; Y \u0026lt;= x\u0026#34;b28d\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;b28e\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;864b\u0026#34;; Y \u0026lt;= x\u0026#34;1f80\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;864a\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;53ab\u0026#34;; Y \u0026lt;= x\u0026#34;1784\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;53aa\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;313d\u0026#34;; Y \u0026lt;= x\u0026#34;98fa\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;313c\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6c7d\u0026#34;; Y \u0026lt;= x\u0026#34;ae21\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;51de\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;22fe\u0026#34;; Y \u0026lt;= x\u0026#34;072c\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;072d\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9687\u0026#34;; Y \u0026lt;= x\u0026#34;edb1\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;edb1\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;dff0\u0026#34;; Y \u0026lt;= x\u0026#34;608b\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;dff0\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d82c\u0026#34;; Y \u0026lt;= x\u0026#34;eab0\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;eaaf\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d4e3\u0026#34;; Y \u0026lt;= x\u0026#34;aa64\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;fee7\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;824a\u0026#34;; Y \u0026lt;= x\u0026#34;63c2\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1931\u0026#34;; Y \u0026lt;= x\u0026#34;ecc1\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;133e\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4eed\u0026#34;; Y \u0026lt;= x\u0026#34;1916\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;b113\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;fef7\u0026#34;; Y \u0026lt;= x\u0026#34;667f\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;feff\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ec42\u0026#34;; Y \u0026lt;= x\u0026#34;d927\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;26d9\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;aecc\u0026#34;; Y \u0026lt;= x\u0026#34;d5c7\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2a39\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;217e\u0026#34;; Y \u0026lt;= x\u0026#34;f7e2\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d664\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;4ab9\u0026#34;; Y \u0026lt;= x\u0026#34;7152\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e598\u0026#34;; Y \u0026lt;= x\u0026#34;9eab\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;9eab\u0026#34;) then report \u0026#34;Error in outcome (y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;12c0\u0026#34;; Y \u0026lt;= x\u0026#34;5c93\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;81b5\u0026#34;; Y \u0026lt;= x\u0026#34;13fc\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;95b1\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7acc\u0026#34;; Y \u0026lt;= x\u0026#34;5edd\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d9a9\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;69a6\u0026#34;; Y \u0026lt;= x\u0026#34;a430\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;a431\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5e63\u0026#34;; Y \u0026lt;= x\u0026#34;c287\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;5e64\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0464\u0026#34;; Y \u0026lt;= x\u0026#34;d92a\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;d92b\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;13b7\u0026#34;; Y \u0026lt;= x\u0026#34;bfa7\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;13b6\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b960\u0026#34;; Y \u0026lt;= x\u0026#34;cd82\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1422\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b472\u0026#34;; Y \u0026lt;= x\u0026#34;ac3b\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;b473\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a24e\u0026#34;; Y \u0026lt;= x\u0026#34;6db2\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;5db2\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;940e\u0026#34;; Y \u0026lt;= x\u0026#34;1c52\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8844\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;edb2\u0026#34;; Y \u0026lt;= x\u0026#34;994b\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;994a\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a6f7\u0026#34;; Y \u0026lt;= x\u0026#34;ea19\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;bcde\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d2b0\u0026#34;; Y \u0026lt;= x\u0026#34;ca2e\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;35d1\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2c03\u0026#34;; Y \u0026lt;= x\u0026#34;99e4\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c5e7\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;876a\u0026#34;; Y \u0026lt;= x\u0026#34;67f9\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;67fa\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b1fa\u0026#34;; Y \u0026lt;= x\u0026#34;e8c5\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e8c4\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;1e9d\u0026#34;; Y \u0026lt;= x\u0026#34;27a8\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d857\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a87d\u0026#34;; Y \u0026lt;= x\u0026#34;2f81\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d7fe\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8ff1\u0026#34;; Y \u0026lt;= x\u0026#34;ab99\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8b91\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;38ba\u0026#34;; Y \u0026lt;= x\u0026#34;646d\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;9d27\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c48a\u0026#34;; Y \u0026lt;= x\u0026#34;0e4b\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0e4a\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;13b1\u0026#34;; Y \u0026lt;= x\u0026#34;bc86\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;437a\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e125\u0026#34;; Y \u0026lt;= x\u0026#34;e131\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e135\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e21f\u0026#34;; Y \u0026lt;= x\u0026#34;9a91\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;b872\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7f24\u0026#34;; Y \u0026lt;= x\u0026#34;b574\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;4a8c\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3eb8\u0026#34;; Y \u0026lt;= x\u0026#34;7680\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c857\u0026#34;; Y \u0026lt;= x\u0026#34;1dd3\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;e62a\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;90f2\u0026#34;; Y \u0026lt;= x\u0026#34;10ea\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;90f2\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;c1b9\u0026#34;; Y \u0026lt;= x\u0026#34;11a1\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;df59\u0026#34;; Y \u0026lt;= x\u0026#34;048d\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2534\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d1d2\u0026#34;; Y \u0026lt;= x\u0026#34;081e\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b953\u0026#34;; Y \u0026lt;= x\u0026#34;1f68\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;83dd\u0026#34;; Y \u0026lt;= x\u0026#34;6c55\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;83dd\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0bac\u0026#34;; Y \u0026lt;= x\u0026#34;3267\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;cd99\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7cde\u0026#34;; Y \u0026lt;= x\u0026#34;04ff\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7cff\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;249a\u0026#34;; Y \u0026lt;= x\u0026#34;0770\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f890\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d0c9\u0026#34;; Y \u0026lt;= x\u0026#34;4763\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;b89c\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0b7d\u0026#34;; Y \u0026lt;= x\u0026#34;c1e8\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;f483\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8f67\u0026#34;; Y \u0026lt;= x\u0026#34;59ea\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5530\u0026#34;; Y \u0026lt;= x\u0026#34;eb35\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;14ca\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f542\u0026#34;; Y \u0026lt;= x\u0026#34;d244\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d243\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7228\u0026#34;; Y \u0026lt;= x\u0026#34;a580\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;934c\u0026#34;; Y \u0026lt;= x\u0026#34;599d\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ece9\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;f602\u0026#34;; Y \u0026lt;= x\u0026#34;a19e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;09fe\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6dcc\u0026#34;; Y \u0026lt;= x\u0026#34;fa1a\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffde\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8bd6\u0026#34;; Y \u0026lt;= x\u0026#34;16e6\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;9ff6\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7a2a\u0026#34;; Y \u0026lt;= x\u0026#34;a3ba\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7a2b\u0026#34;) then report \u0026#34;Error in outcome (inc x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (inc x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;be88\u0026#34;; Y \u0026lt;= x\u0026#34;50b6\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;af49\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;21f6\u0026#34;; Y \u0026lt;= x\u0026#34;8aed\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;8aec\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;87f2\u0026#34;; Y \u0026lt;= x\u0026#34;0568\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0567\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;548d\u0026#34;; Y \u0026lt;= x\u0026#34;b40e\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;089b\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;fe9d\u0026#34;; Y \u0026lt;= x\u0026#34;b1c7\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;4cd6\u0026#34;) then report \u0026#34;Error in outcome (sub x-y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub x-y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub x-y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0bcb\u0026#34;; Y \u0026lt;= x\u0026#34;80a2\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d483\u0026#34;; Y \u0026lt;= x\u0026#34;7a2c\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2b7d\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;9a74\u0026#34;; Y \u0026lt;= x\u0026#34;c0f8\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2684\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;bae6\u0026#34;; Y \u0026lt;= x\u0026#34;576d\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0001\u0026#34;) then report \u0026#34;Error in outcome (one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;dbe5\u0026#34;; Y \u0026lt;= x\u0026#34;d5ea\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; wait for 1 ns; if (Z /= x\u0026#34;d5eb\u0026#34;) then report \u0026#34;Error in outcome (inc y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (inc y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (inc y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8554\u0026#34;; Y \u0026lt;= x\u0026#34;e139\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1ec6\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e494\u0026#34;; Y \u0026lt;= x\u0026#34;f923\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;8009\u0026#34;; Y \u0026lt;= x\u0026#34;bdd8\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;83f2\u0026#34;; Y \u0026lt;= x\u0026#34;2267\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;dd99\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b3fa\u0026#34;; Y \u0026lt;= x\u0026#34;fb43\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;4c06\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;df0f\u0026#34;; Y \u0026lt;= x\u0026#34;0df7\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;df0e\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;db2d\u0026#34;; Y \u0026lt;= x\u0026#34;03d7\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;df04\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ee1d\u0026#34;; Y \u0026lt;= x\u0026#34;0192\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ee1c\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7fe1\u0026#34;; Y \u0026lt;= x\u0026#34;3a8a\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;801f\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5110\u0026#34;; Y \u0026lt;= x\u0026#34;ce21\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;7d11\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;ff18\u0026#34;; Y \u0026lt;= x\u0026#34;9781\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;687f\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;e0e3\u0026#34;; Y \u0026lt;= x\u0026#34;8cff\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;1f1d\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;7c53\u0026#34;; Y \u0026lt;= x\u0026#34;69d5\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;962a\u0026#34;) then report \u0026#34;Error in outcome (not y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;6b6c\u0026#34;; Y \u0026lt;= x\u0026#34;14ff\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;eb01\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;aa46\u0026#34;; Y \u0026lt;= x\u0026#34;67b1\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;67b0\u0026#34;) then report \u0026#34;Error in outcome (dec y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (dec y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;fde0\u0026#34;; Y \u0026lt;= x\u0026#34;0cd9\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0cc0\u0026#34;) then report \u0026#34;Error in outcome (and)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (and)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (and)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;43f1\u0026#34;; Y \u0026lt;= x\u0026#34;0145\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;0000\u0026#34;) then report \u0026#34;Error in outcome (zero)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in zero flag (zero)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (zero)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a2ed\u0026#34;; Y \u0026lt;= x\u0026#34;9763\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;a2ed\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0060\u0026#34;; Y \u0026lt;= x\u0026#34;96cb\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;6935\u0026#34;) then report \u0026#34;Error in outcome (minus y)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus y)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (minus y)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;d11e\u0026#34;; Y \u0026lt;= x\u0026#34;e072\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;d11d\u0026#34;) then report \u0026#34;Error in outcome (dec x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (dec x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (dec x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;0892\u0026#34;; Y \u0026lt;= x\u0026#34;5cd9\u0026#34;; zx \u0026lt;= \u0026#39;1\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;ffff\u0026#34;) then report \u0026#34;Error in outcome (minus one)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minus one)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minus one)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a311\u0026#34;; Y \u0026lt;= x\u0026#34;08b6\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;abb7\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3eb2\u0026#34;; Y \u0026lt;= x\u0026#34;d076\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;c14d\u0026#34;) then report \u0026#34;Error in outcome (not x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (not x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (not x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;95c3\u0026#34;; Y \u0026lt;= x\u0026#34;bd69\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;95c3\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;a527\u0026#34;; Y \u0026lt;= x\u0026#34;d15b\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2c34\u0026#34;) then report \u0026#34;Error in outcome (sub y-x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (sub y-x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (sub y-x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2f9b\u0026#34;; Y \u0026lt;= x\u0026#34;74ae\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;2f9b\u0026#34;) then report \u0026#34;Error in outcome (x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;2939\u0026#34;; Y \u0026lt;= x\u0026#34;0aab\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;0\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;0\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;33e4\u0026#34;) then report \u0026#34;Error in outcome (add)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (add)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (add)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;5589\u0026#34;; Y \u0026lt;= x\u0026#34;914c\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;1\u0026#39;; nx \u0026lt;= \u0026#39;0\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;1\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;aa77\u0026#34;) then report \u0026#34;Error in outcome (minux x)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (minux x)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (minux x)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;b045\u0026#34;; Y \u0026lt;= x\u0026#34;2edd\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;bedd\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;1\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; X \u0026lt;= x\u0026#34;3001\u0026#34;; Y \u0026lt;= x\u0026#34;1bfa\u0026#34;; zx \u0026lt;= \u0026#39;0\u0026#39;; zy \u0026lt;= \u0026#39;0\u0026#39;; nx \u0026lt;= \u0026#39;1\u0026#39;; ny \u0026lt;= \u0026#39;1\u0026#39;; f \u0026lt;= \u0026#39;0\u0026#39;; no \u0026lt;= \u0026#39;1\u0026#39;; wait for 1 ns; if (Z /= x\u0026#34;3bfb\u0026#34;) then report \u0026#34;Error in outcome (or)\u0026#34; severity note; v_incorrect_z := v_incorrect_z + 1; else v_correct_z := v_correct_z + 1; end if; if (zr /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in zero flag (or)\u0026#34; severity note; v_incorrect_zr := v_incorrect_zr + 1; else v_correct_zr := v_correct_zr + 1; end if; if (ng /= \u0026#39;0\u0026#39;) then report \u0026#34;Error in negative flag (or)\u0026#34; severity note; v_incorrect_ng := v_incorrect_ng + 1; else v_correct_ng := v_correct_ng + 1; end if; wait for 1 ns; report \u0026#34;Simulation done (correct / incorrect): \u0026#34;; report \u0026#34; outcome: \u0026#34; \u0026amp; integer\u0026#39;image(v_correct_z) \u0026amp; \u0026#34;/\u0026#34; \u0026amp; integer\u0026#39;image(v_incorrect_z); report \u0026#34; zero flag: \u0026#34; \u0026amp; integer\u0026#39;image(v_correct_zr) \u0026amp; \u0026#34;/\u0026#34; \u0026amp; integer\u0026#39;image(v_incorrect_zr); report \u0026#34; negative flag: \u0026#34; \u0026amp; integer\u0026#39;image(v_correct_ng) \u0026amp; \u0026#34;/\u0026#34; \u0026amp; integer\u0026#39;image(v_incorrect_ng); wait; end process; ------------------------------------------------------------------------------- -- DUT ------------------------------------------------------------------------------- DUT: component alu generic map (WIDTH =\u0026gt; WIDTH) port map( X =\u0026gt; X, Y =\u0026gt; Y, Z =\u0026gt; Z, zx =\u0026gt; zx, zy =\u0026gt; zy, nx =\u0026gt; nx, ny =\u0026gt; ny, f =\u0026gt; f, no =\u0026gt; no, zr =\u0026gt; zr, ng =\u0026gt; ng ); end Behavioural; "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/400_sequentiele_logica/",
	"title": "4. SequentiÃ«le logica",
	"tags": [],
	"description": "",
	"content": "SequentiÃ«le logica Image courtesy: pexels - OanÄƒ Andrei "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/400_sequentiele_logica/410_intro_sequentieel/",
	"title": "Intro SequentiÃ«le logica",
	"tags": [],
	"description": "",
	"content": "Zoals er eerder al aangehaald worden alle componenten tegelijkertijd uitgevoerd. Net zoals op een breadboard, zijn alle componenten en poorten gelijktijdig actief. Wanneer het ontwerp complexer wordt, is het bijna onmogelijk om iets realiseren als er geen orde of volgorde is. Hiervoor is het klok-signaal ontstaan. Dit signaal speelt een soortgelijke rol zoals die van een dirigent bij een concert.\nAls we bij combinatorische logica de ingang veranderen, duurt het een zekere tijd voordat dat de uitgang (mogelijks) verandert. Bij sequentiÃ«le logica gaan we wachten met de ingang in te lezen tot de stijgende flank van de clock. Als de timings van het design goed zijn dan is de ingang van een systeem altijd stabiel op het moment dat er een stijgende flank van een clock is.\nWe gaan beginnen met een simpele D flip-flop te maken. Het enige dat deze flip-flop doet is de ingang onthouden op de uitgang tot de volgende stijgende flank van de clock.\nsymbool D flip flop timing D flip flop Onderstaande vhdl code is een voorbeeld van een flip-flop. Het is hier belangrijk om te zien dat bij het process alleen de clock in de sensitivity list zit.\n-------------------------------- -- Revision Date Author Comments -- v0.1 20240122 VlJo Initial version -------------------------------- library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity D_flipflop is Port ( clock: in std_logic; D: in std_logic; Q: out std_logic) ; end D_flipflop; architecture Behavioral of D_flipflop is signal clock_i : std_logic; signal D_i : std_logic; signal Q_i : std_logic; begin -------------------------------- -- (DE-)LOCALISING IN/OUTPUTS -------------------------------- clock_i \u0026lt;= clock; D_i \u0026lt;= D; Q \u0026lt;= Q_i; -------------------------------- -- SEQUENTIAL -------------------------------- SEQ: process(clock_i) begin if clock_i\u0026#39;event and clock_i = \u0026#39;1\u0026#39; then Q_i \u0026lt;= D_i; end if; end process; end Behavioral; Een alternatief voor if clock_i'event and clock_i = '1' then is ook wel if rising_edge(clock_i) then.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/400_sequentiele_logica/420_registers/",
	"title": "Registers",
	"tags": [],
	"description": "",
	"content": "Een register wordt typisch gebruikt om data op te slaan. Een simpel register is Ã©Ã©n waar je data in kan laden en dan de data kunt uitlezen. Wanneer het load signaal hoog is, wordt op de stijgende flank van de clock de data van de D ingang op de uitgang Q gezet.\nRegister Parallel in, parallel out "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/400_sequentiele_logica/430_shift_registers/",
	"title": "Shift registers",
	"tags": [],
	"description": "",
	"content": "Shift registers Er zijn verschillende types aan shift registers. Er is de keuze om serieel of parallel in te laden en de keuze om serieel of parallel uit te lezen.\nSoorten shift registers Bron: electronics-club "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/400_sequentiele_logica/430_shift_registers/siso/",
	"title": "SISO",
	"tags": [],
	"description": "",
	"content": "SISO Bij een serial in, serial out shift register komt de data erin en iedere clock cyclus wordt het 1 plaats verder geshift. Dus in onderstaand voorbeeld komt de data er na 4 clock cycli terug uit.\nSISO shift register Natuurlijk zijn er verschillende manier op dit te beschrijven in VHDL. Onderstaande beschrijving is een voorbeeld.\nlibrary IEEE; use IEEE.STD_LOGIC_1164.ALL; entity SISO_shift_register is Port (clk: in std_logic; D: in std_logic; Y: out std_logic); end SISO_shift_register; architecture Behavioral of SISO_shift_register is signal buf: std_logic_vector(3 downto 0); begin SEQ: process(clk) begin if clk\u0026#39;event and clk = \u0026#39;1\u0026#39; then buf(0) \u0026lt;= D; buf(3 downto 1) \u0026lt;= buf(2 downto 0); end if; end process; Y \u0026lt;= buf(3); end Behavioral; De volgorde dat we de buffer instellen maakt niet uit, want alles wordt tegelijk uitgevoerd in hardware.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/400_sequentiele_logica/430_shift_registers/piso/",
	"title": "PISO",
	"tags": [],
	"description": "",
	"content": "Een parallel in, serial out shift register wordt gebruikt als ge parallel data hebt en het serieel wil doorsturen. Hier hebben we wel een load signal nodig om de data in te laden en multiplexer om te zorgen dat de data ook in de flip-flops kan geraken.\nPISO shift register library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity PISO_shift_register is Port (clk, load: in std_logic; D_Vector: in std_logic_vector(3 downto 0); Y: out std_logic); end PISO_shift_register; architecture Behavioral of PISO_shift_register is signal buf: std_logic_vector(3 downto 0); begin SEQ: process(clk) begin if clk\u0026#39;event and clk = \u0026#39;1\u0026#39; then if load = \u0026#39;1\u0026#39; then buf \u0026lt;= D_vector; else buf(3 downto 1) \u0026lt;= buf(2 downto 0); buf(0) \u0026lt;= \u0026#39;-\u0026#39;; --in de meeste toepassingen maakt het niet uit welke bit er uit komt als de buffer leeg is end if; end if; end process; Y \u0026lt;= buf(3); end Behavioral; VHDL heeft onderstaande waardes voor std_logic \u0026lsquo;U\u0026rsquo; Uninitialized \u0026lsquo;X\u0026rsquo; Forcing Unknown \u0026lsquo;0\u0026rsquo; Forcing 0 \u0026lsquo;1\u0026rsquo; Forcing 1 \u0026lsquo;Z\u0026rsquo; High Impedance \u0026lsquo;W\u0026rsquo; Weak Unknown \u0026lsquo;L\u0026rsquo; Weak 0 \u0026lsquo;H\u0026rsquo; Weak 1 \u0026lsquo;-\u0026rsquo; Don\u0026rsquo;t Care\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/400_sequentiele_logica/430_shift_registers/pipo/",
	"title": "PIPO",
	"tags": [],
	"description": "",
	"content": "Bij parallel in, parallel out register (PIPO) komt op de ingang op de uitgang met 1 clock cyclus vertraging.\nPIPO shift register Bron: electronics-club "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/400_sequentiele_logica/430_shift_registers/sipo/",
	"title": "SIPO",
	"tags": [],
	"description": "",
	"content": "Serial in, parallel out is een shift register dat gebruikt wordt voor data ontvangst. Meestal komt de data serieel binnen en vaak heeft de volgende stap de data parallel nodig.\nSIPO shift register Je kan zelf proberen de beschrijving te maken in VHDL\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/400_sequentiele_logica/440_reset/",
	"title": "Reset",
	"tags": [],
	"description": "",
	"content": "Typisch is het gewenst om een reset ingang te hebben om alles terug naar een gekende begintoestand te brengen. Er zijn typisch 2 manieren om dit te doen, een synchrone reset of een asynchrone reset.\nAsynchrone reset Onderstaand voorbeeld is van een D flip-flop met asynchrone reset. Je ziet hier dat de reset onderdeel is van de sensitivity list. De reset staat hier als eerste in het process. Synchrone reset Onderstaand voorbeeld is van een D flip-flop met synchrone reset. Je ziet hier dat de reset geen onderdeel is van de sensitivity list. De reset staat hier na de if van de stijgende flank van de clock. library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity asynchronous_reset is Port ( clock: in std_logic; reset: in std_logic; data_in: in std_logic; data_out: out std_logic ); end asynchronous_reset; architecture Behavioral of asynchronous_reset is signal clock_i: std_logic; signal reset_i: std_logic; signal data_in_i: std_logic; signal data_out_i: std_logic; begin clock_i \u0026lt;= clock; reset_i \u0026lt;= reset; data_in_i \u0026lt;= data_in; data_out \u0026lt;= data_out_i; PREG: process(reset_i, clock_i) begin if reset_i = \u0026#39;1\u0026#39; then data_out_i \u0026lt;= \u0026#39;0\u0026#39;; else if clock_i\u0026#39;event and clock_i = \u0026#39;1\u0026#39; then data_out_i \u0026lt;= data_in_i; end if; end if; end process; end Behavioral; library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity asynchronous_reset is Port ( clock: in std_logic; reset: in std_logic; data_in: in std_logic; data_out: out std_logic ); end asynchronous_reset; architecture Behavioral of asynchronous_reset is signal clock_i: std_logic; signal reset_i: std_logic; signal data_in_i: std_logic; signal data_out_i: std_logic; begin clock_i \u0026lt;= clock; reset_i \u0026lt;= reset; data_in_i \u0026lt;= data_in; data_out \u0026lt;= data_out_i; PREG: process(clock_i) begin if clock_i\u0026#39;event and clock_i = \u0026#39;1\u0026#39; then if reset_i = \u0026#39;1\u0026#39; then data_out_i \u0026lt;= \u0026#39;0\u0026#39;; else data_out_i \u0026lt;= data_in_i; end if; end if; end process; end Behavioral; Voor sequentiÃ«le processen zijn er maximaal 2 signalen (clock en eventueel reset) die in de sensitivity list staan. Bij combinatorische processen zijn het alle signalen.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/400_sequentiele_logica/460_opdracht/",
	"title": "Opdracht 4: Program counter",
	"tags": [],
	"description": "",
	"content": "De bedoeling van deze opdracht is om de program counter van de processor te maken. De program counter heeft 5 input signalen. data_in, clock, reset, load en inc(rement). Als output heeft het data_out. Data_in en Data_out zijn beide 16-bit vectoren. Als de reset hoog wordt moet de program counter synchroon resetten naar 0x0. inc zorgt dat de program counter met 1 verhoogd wordt en load zorgt er voor dat de data van data_in synchroon wordt ingeladen. Load heeft voorrang op increment.\nDe program counter moet aan onderandere aan onderstaande specificaties voldoen:\nAls reset 1 is wordt er synchroon gereset Als reset, load en inc 0 zijn blijft de uitgang zijn waarde bewaren Als increment 1 is dan wordt bij de program counter 1 opgeteld Als load 1 wordt de gesampled De load heeft voorang op inc Je kan de ripple carry adder van opdracht 2 gebruiken.\nschema program counter "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/400_sequentiele_logica/470_tb_opdracht/",
	"title": "Opdracht - testbench",
	"tags": [],
	"description": "",
	"content": "Deze testbench wordt gebruikt voor de evaluatie.\nlibrary IEEE; use IEEE.STD_LOGIC_1164.ALL; -- Uncomment the following library declaration if using -- arithmetic functions with Signed or Unsigned values --use IEEE.NUMERIC_STD.ALL; -- Uncomment the following library declaration if instantiating -- any Xilinx leaf cells in this code. --library UNISIM; --use UNISIM.VComponents.all; entity tb_counter is -- Port ( ); end tb_counter; architecture Behavioral of tb_counter is component counter is Port (clock,reset, load, inc: in std_logic; data_in : in std_logic_vector(15 downto 0); data_out : out std_logic_vector(15 downto 0) ); end component; constant clock_period : time := 10 ns; signal clock,reset, load, inc: std_logic; signal data_in : std_logic_vector(15 downto 0); signal data_out : std_logic_vector(15 downto 0); begin DUT: counter port map( data_in =\u0026gt; data_in, data_out =\u0026gt; data_out, clock =\u0026gt; clock, reset =\u0026gt; reset, load =\u0026gt; load, inc =\u0026gt; inc); CLK: process begin clock \u0026lt;= \u0026#39;0\u0026#39;; wait for clock_period/2; clock \u0026lt;= \u0026#39;1\u0026#39;; wait for clock_period/2; end process; PSTIM: process begin data_in \u0026lt;= \u0026#34;0000000000000000\u0026#34;; reset \u0026lt;= \u0026#39;0\u0026#39;; load \u0026lt;= \u0026#39;0\u0026#39;; inc \u0026lt;= \u0026#39;0\u0026#39;; wait for clock_period/8; wait for clock_period*2; data_in \u0026lt;= \u0026#34;0000000000000000\u0026#34;; reset \u0026lt;= \u0026#39;1\u0026#39;; load \u0026lt;= \u0026#39;0\u0026#39;; inc \u0026lt;= \u0026#39;0\u0026#39;; wait for clock_period*2; assert (data_out = \u0026#34;0000000000000000\u0026#34;) report \u0026#34;reset werkt niet\u0026#34; severity failure; data_in \u0026lt;= \u0026#34;0000000000000000\u0026#34;; reset \u0026lt;= \u0026#39;0\u0026#39;; load \u0026lt;= \u0026#39;0\u0026#39;; inc \u0026lt;= \u0026#39;1\u0026#39;; wait for clock_period; assert (data_out = \u0026#34;0000000000000001\u0026#34;) report \u0026#34;increment werkt niet\u0026#34; severity failure; wait for clock_period*10; assert (data_out = \u0026#34;0000000000001011\u0026#34;) report \u0026#34;increment werkt niet\u0026#34; severity failure; data_in \u0026lt;= \u0026#34;0000111000000000\u0026#34;; reset \u0026lt;= \u0026#39;0\u0026#39;; load \u0026lt;= \u0026#39;1\u0026#39;; inc \u0026lt;= \u0026#39;0\u0026#39;; wait for clock_period; assert (data_out = \u0026#34;0000111000000000\u0026#34;) report \u0026#34;load werkt niet\u0026#34; severity failure; data_in \u0026lt;= \u0026#34;0000111000000000\u0026#34;; reset \u0026lt;= \u0026#39;0\u0026#39;; load \u0026lt;= \u0026#39;0\u0026#39;; inc \u0026lt;= \u0026#39;1\u0026#39;; wait for clock_period; assert (data_out = \u0026#34;0000111000000001\u0026#34;) report \u0026#34;inc na load werkt niet\u0026#34; severity failure; data_in \u0026lt;= \u0026#34;1111111111111111\u0026#34;; reset \u0026lt;= \u0026#39;0\u0026#39;; load \u0026lt;= \u0026#39;1\u0026#39;; inc \u0026lt;= \u0026#39;0\u0026#39;; wait for clock_period; assert (data_out = \u0026#34;1111111111111111\u0026#34;) report \u0026#34;load werkt niet\u0026#34; severity failure; data_in \u0026lt;= \u0026#34;1111110011111111\u0026#34;; reset \u0026lt;= \u0026#39;0\u0026#39;; load \u0026lt;= \u0026#39;1\u0026#39;; inc \u0026lt;= \u0026#39;1\u0026#39;; wait for clock_period; assert (data_out = \u0026#34;1111110011111111\u0026#34;) report \u0026#34;load before increment werkt niet\u0026#34; severity failure; data_in \u0026lt;= \u0026#34;1111111111111111\u0026#34;; reset \u0026lt;= \u0026#39;0\u0026#39;; load \u0026lt;= \u0026#39;1\u0026#39;; inc \u0026lt;= \u0026#39;0\u0026#39;; wait for clock_period; assert (data_out = \u0026#34;1111111111111111\u0026#34;) report \u0026#34;load werkt niet\u0026#34; severity failure; data_in \u0026lt;= \u0026#34;1100110011110011\u0026#34;; reset \u0026lt;= \u0026#39;0\u0026#39;; load \u0026lt;= \u0026#39;0\u0026#39;; inc \u0026lt;= \u0026#39;1\u0026#39;; wait for clock_period; assert (data_out = \u0026#34;0000000000000000\u0026#34;) report \u0026#34;overflow werkt niet\u0026#34; severity failure; data_in \u0026lt;= \u0026#34;1100110011111111\u0026#34;; reset \u0026lt;= \u0026#39;1\u0026#39;; load \u0026lt;= \u0026#39;1\u0026#39;; inc \u0026lt;= \u0026#39;1\u0026#39;; wait for clock_period; assert (data_out = \u0026#34;0000000000000000\u0026#34;) report \u0026#34;reset werkt niet\u0026#34; severity failure; data_in \u0026lt;= \u0026#34;1100110011111111\u0026#34;; reset \u0026lt;= \u0026#39;H\u0026#39;; load \u0026lt;= \u0026#39;L\u0026#39;; inc \u0026lt;= \u0026#39;L\u0026#39;; wait for clock_period; assert (data_out = \u0026#34;0000000000000000\u0026#34;) report \u0026#34;reset werkt niet\u0026#34; severity failure; data_in \u0026lt;= \u0026#34;1100110011111111\u0026#34;; reset \u0026lt;= \u0026#39;L\u0026#39;; load \u0026lt;= \u0026#39;0\u0026#39;; inc \u0026lt;= \u0026#39;1\u0026#39;; wait for clock_period; assert (data_out = \u0026#34;0000000000000001\u0026#34;) report \u0026#34;iets werkt niet\u0026#34; severity failure; data_in \u0026lt;= \u0026#34;1100110011111111\u0026#34;; reset \u0026lt;= \u0026#39;X\u0026#39;; load \u0026lt;= \u0026#39;L\u0026#39;; inc \u0026lt;= \u0026#39;H\u0026#39;; wait for clock_period; data_in \u0026lt;= \u0026#34;1100110011111111\u0026#34;; reset \u0026lt;= \u0026#39;1\u0026#39;; load \u0026lt;= \u0026#39;W\u0026#39;; inc \u0026lt;= \u0026#39;Z\u0026#39;; wait for clock_period; assert (data_out = \u0026#34;0000000000000000\u0026#34;) report \u0026#34;reset werkt niet\u0026#34; severity failure; wait; end process; end Behavioral; "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/500_cpu/",
	"title": "5. Hack CPU",
	"tags": [],
	"description": "",
	"content": "CPU Image courtesy: pexels - Shawn Stutzman "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/500_cpu/510_intro_cpu/",
	"title": "Een CPU maken",
	"tags": [],
	"description": "",
	"content": "Zoals in het begin van deze lessenreeks reeds vermeld, is het uiteindelijke doel het maken van een processor. De voorbij labo\u0026rsquo;s hebben de basis hiervoor gelegd. De volgende componenten, die jullie reeds gemaakt hebben, dienen samengebracht te worden:\nregisters multiplexers een ALU een program counter De architectuur van de Central Processing Unit (CPU) die we voor ogen hebben is reeds ontworpen. Deze maakt deel uit van de Hack computer. Deze bevat, naast de cpu, ook 2 geheugens (1 voor instructies en 1 voor data), een toetsenbord en scherm (voor in- en output, resptievelijk) en (uiteraard) een clock. Het blok-diagram van de CPU staat hieronder ook weergegeven.\nBij de ingang van de ALU, de bovenkant (register D) is ALU ingang x en de onderkant is ALU ingang Y.\nHack computer Hack CPU Image courtesy: Wikipedia - Rleininger De nooit-eindigende lus Een computer is eigenlijk een dom beest. Hij draait rondjes, zolang hij aan staat. Het rondje dat de computer (in dit geval de Hack computer) maakt is het volgende:\nHaal de instructie op Voer de instructie uit Bepaal de volgende instructie Zoals we in het voorgaande hoofdstuk gezien hebben, is er Ã©Ã©n signaal dat ervoor zorgt dat alles in goede banen geleid wordt: de klok. Alles gebeurt synchroon ten opzicht van deze klok.\nDe instructie wordt opgehaald uit het instructie geheugen (ROM). Om te bepalen welke instructie opgehaald dient worden, fungeert de program counter als pointer. De program counter die jullie in het vorige hoofdstuk gemaakt hebben voldoet hiervoor, met deze uitzondering dat het ROM geheugen maar 32'768 instructies diep is (en dus maar 15 bits breed is).\nOm de instructie uit te voeren, wordt er gebruik gemaakt van de ALU. Deze hebben jullie reeds 2 hoofdstukken geleden gemaakt.\nOmdat er soms meer geheugen nodig is om bewerkingen te kunnen doen en omdat er randapparatuur aanwezig is, is er nog een data geheugen (RAM) aanwezig. Instructies die uitgevoerd worden kunnen hun inputs hieruit halen en/of hun resultaat hiernaar schrijven. De breedte van deze RAM is dan ook 16 bits. Een eenvoudige manier om de randapparatuur te gebruiken is om deze een sectie uit het RAM geheugen toe te kennen. Aangezien er 2 toestellen zijn, zijn er ook 2 vast-gedefinieerde regio\u0026rsquo;s hiervoor:\n0x4000-0x5FFF Deze ruimte in de RAM (of \u0026ldquo;werkgeheugen\u0026rdquo;) is gereserveerd voor het scherm; 0x6000 Dit adres is gereserveerd voor het toetsenbord. Tenslotte, na het ophalen en uitvoeren van een instructie, dient de program counter aangepast te worden naar de volgende instructie.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/500_cpu/520_isa/",
	"title": "ISA",
	"tags": [],
	"description": "",
	"content": "ISA staat voor Instruction set architecture en beschrijft hoe instructies opgebouwd moeten worden zodat de CPU deze kan uitvoeren.\nAlle instructies zijn 16 bit breed. Er is de mogelijkheid om A instructies en C instructies te doen. A instructies dienen om een waarde in register A in te laden. C instructies doen het meeste andere werk. Alle informatie kan je ook terugvinden op de site van nand2tetris.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/500_cpu/521_a_instructie/",
	"title": "A instructie",
	"tags": [],
	"description": "",
	"content": "Indien de MSB van een 16-bit instructie \u0026lsquo;0\u0026rsquo; is, dan wilt dit zeggen dat dit een A-instructie is. De overige 15 bits dienen vervolgens in het A register geladen te worden.\nImage courtesy: The Elements of Computing Systems - N. Nisan and S. Schocken In de screenshot hieronder wordt er ingezoomd op een klein stukje in de simulatie van een programma. Op iedere rising edge van de klok wordt er gekeken of de MSB een \u0026lsquo;0\u0026rsquo; is. Indien dit het geval is, wordt de inhoud van regA aangepast.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/500_cpu/522_c_instructie/",
	"title": "C instructie",
	"tags": [],
	"description": "",
	"content": "Indien de MSB van een 16-bit instructie \u0026lsquo;1\u0026rsquo; is, dan wilt dit zeggen dat dit een C-instructie is. De overige 15 bits dienen als volgt geÃ¯nterpreteerd te worden: er zijn 3 velden die gekozen worden:\neen berekening (comp) welke aanduidt welke berekening gedaan dient te worden; een bestemming (dest) welke aanduidt waar het resultaat van de berekening opgeslagen dient te worden; een wat-hierna (jump) welke aanduidt naar waar de program counter moet veranderen, na de uitvoering van deze instuctie. dest := comp; jump Image courtesy: The Elements of Computing Systems - N. Nisan and S. Schocken "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/500_cpu/523_c_instructie_comp/",
	"title": "C instructie - compute",
	"tags": [],
	"description": "",
	"content": "Indien de MSB van een 16-bit instructie \u0026lsquo;1\u0026rsquo; is, dan wilt dit zeggen dat dit een C-instructie is. De overige 15 bits dienen als volgt geÃ¯nterpreteerd te worden: er zijn 3 velden die gekozen worden:\neen berekening (comp) welke aanduidt welke berekening gedaan dient te worden; een bestemming (dest) welke aanduidt waar het resultaat van de berekening opgeslagen dient te worden; een wat-hierna (jump) welke aanduidt naar waar de program counter moet veranderen, na de uitvoering van deze instuctie. dest := comp; jump Image courtesy: The Elements of Computing Systems - N. Nisan and S. Schocken Compute Van de 7 bits in de het comp-veld, zullen de 6 minst beduidende wel een belletje doen rinkelen. Dit zijn namelijk de 6 bits die voorheen gebruikt werden om de functie aan te duiden die de ALU moet uitvoeren.\nDe X-operand van de ALU ligt vast en is altijd de waarde uit het register D.\nDe Y-operand van de ALU wordt bepaald door een multiplexer en wordt dus ofwel de waarde uit het register A (bij een \u0026lsquo;0\u0026rsquo; als selectie-bit) ofwel de waarde die uit het geheugen komt (bij een \u0026lsquo;1\u0026rsquo; als selectie-bit). De MSB van het 7-bit comp-veld (de a-bit) geeft de selectie aan voor deze multiplexer.\nDe waarheidstabel hieronder vat dit veld samen.\nImage courtesy: The Elements of Computing Systems - N. Nisan and S. Schocken "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/500_cpu/524_c_instructie_destination/",
	"title": "C instructie - destination",
	"tags": [],
	"description": "",
	"content": "Indien de MSB van een 16-bit instructie \u0026lsquo;1\u0026rsquo; is, dan wilt dit zeggen dat dit een C-instructie is. De overige 15 bits dienen als volgt geÃ¯nterpreteerd te worden: er zijn 3 velden die gekozen worden:\neen berekening (comp) welke aanduidt welke berekening gedaan dient te worden; een bestemming (dest) welke aanduidt waar het resultaat van de berekening opgeslagen dient te worden; een wat-hierna (jump) welke aanduidt naar waar de program counter moet veranderen, na de uitvoering van deze instuctie. dest := comp; jump Image courtesy: The Elements of Computing Systems - N. Nisan and S. Schocken Destination In het totaal zijn er 3 verschillend bestemmingen waarin het resultaat opgeslagen kan worden:\nhet D-register het A-register het werk geheugen (RAM) (ook wel M genoemd) Als er aangenomen wordt dat een resultaat op meerdere plaatsen opgeslagen kan worden, of helemaal niet opgeslagen dient te worden zijn er 23 = 8 verschillende mogelijkheden. De tabel hiernaast beschijft welke code overeenkomt met de keuze van de \u0026rsquo;te-laden-registers'.\nImage courtesy: The Elements of Computing Systems - N. Nisan and S. Schocken "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/500_cpu/525_c_instructie_jmp/",
	"title": "C instructie jump",
	"tags": [],
	"description": "",
	"content": "Indien de MSB van een 16-bit instructie \u0026lsquo;1\u0026rsquo; is, dan wilt dit zeggen dat dit een C-instructie is. De overige 15 bits dienen als volgt geÃ¯nterpreteerd te worden: er zijn 3 velden die gekozen worden:\neen berekening (comp) welke aanduidt welke berekening gedaan dient te worden; een bestemming (dest) welke aanduidt waar het resultaat van de berekening opgeslagen dient te worden; een wat-hierna (jump) welke aanduidt naar waar de program counter moet veranderen, na de uitvoering van deze instuctie. dest := comp; jump Image courtesy: The Elements of Computing Systems - N. Nisan and S. Schocken Jump Na het uitvoeren van de instructie, moet er naar de volgende instructie gegaan worden. Dit kan gemakkelijk geÃ¯mplementeerd worden door de program counter te verhogen met 1. Het kan echter ook handig zijn om een jump te doen naar een ander adres in de ROM.\nNaast de (standaard) verhoging met 1, of de jump, kan het ook zijn dat er een jump moet gedaan worden onder bepaalde voorwaarden. Deze voorwaarden (voor de Hack CPU) zijn de vergelijking met 0 van het resultaat van de bewerking. De tabel hiernaast beschijft welke voorwaarde overeenkomt met de keuze van de conditional jump.\nImage courtesy: The Elements of Computing Systems - N. Nisan and S. Schocken "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/500_cpu/550_opdracht/",
	"title": "Opdracht 5: CPU",
	"tags": [],
	"description": "",
	"content": "Voor deze opdracht hebben jullie tijd tot-en-met de laatste zitting. De bedoeling is om zelf de Hack CPU te maken. Je mag, maar dit is niet verplicht, eerder gebruikte code (voor ALU, program counter, \u0026hellip;) hergebruiken.\nImage courtesy: The Elements of Computing Systems - N. Nisan and S. Schocken "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/500_cpu/560_testbench/",
	"title": "Opdracht - testbench",
	"tags": [],
	"description": "",
	"content": "Zoals bij voorgaande opdrachten, wordt ook bij deze opdracht een testbench voorzien. Aangezien de DUT (device-under-test) iets complexer is, is de gebruikte testbench ook iets complexer.\nDe gewoonlijke structuur is natuurlijk wel behouden: 1) libraries, 2) entity (zonder poorten), en 3) de architecture. Tussen de architecture en de begin staan de declaraties van signalen en componenten. Tussen de begin en end staat het ontwerp. Dit ontwerp staat hiernaast weergegeven. Er is een klein stukje code dat een clock genereert en een klein stukje code dat een reset genereert.\nTer herinnering \u0026hellip; alles wordt in parallel uitgevoerd. Beide stukjes code (voor clock en reset) zijn tegelijk actief.\nUiteraard is er de instantiatie van de DUT. Tenslotte zijn er nog twee instantiaties van mem_model. Iets wat vaker gebeurt voor complexere blokken is dat er een model beschreven wordt. Dit model probeert de functionaliteit na te bootsen van een effectief hardware-blokje. In dit geval wordt er gebruikt gemaakt van een model voor het geheugen. Een geheugen heeft typisch de volgende poorten:\n(clock \u0026amp; reset) binnenkomend adres binnenkomende data binnenkomend signaal dat aanduidt of het om een lees/schrijf operatie gaat buitengaande data Dit model van een geheugen is zÃ³ beschreven dat het, tijdens reset, zichzelf initialiseert met de inhoud van een bestand. Om dit te kunnen maken, wordt er gebruik gemaakt van een speciale set van instructies uit VHDL. Dit is niet-synthetiseerbare code!! Bekijk deze code zeker eens in detail.\nEen ander stukje niet-synthetiseerbare code is het volgende:\nsignal addr_int : integer range 0 to ((2**DATA_DEPTH_LOG2)-1); Dit gebruikt de operatie \u0026ldquo;machtsverheffing\u0026rdquo;. De maximale waarde van de integer addr_int is (2DATA_DEPTH_LOG2-1). Dit is perfect acceptabel om te gebruiken in deze situatie, maar is geen alternatief voor de implementatie van een machtsverheffing in hardware!!\n-------------------------------------------------------------------------------- -- KU Leuven - ESAT/COSIC - Emerging technologies, Systems \u0026amp; Security -------------------------------------------------------------------------------- -- Module Name: cpu_tb - Behavioural -- Project Name: Testbench for cpu -- Description: -- -- Revision Date Author Comments -- v0.1 20240314 VlJo Initial version -- -------------------------------------------------------------------------------- library IEEE; use IEEE.STD_LOGIC_1164.ALL; -- use IEEE.NUMERIC_STD.ALL; entity cpu_tb is end entity cpu_tb; architecture Behavioural of cpu_tb is component cpu is port( clock : IN STD_LOGIC; reset : IN STD_LOGIC; instruction : IN STD_LOGIC_VECTOR(15 downto 0); inM : IN STD_LOGIC_VECTOR(15 downto 0); outM : OUT STD_LOGIC_VECTOR(15 downto 0); PC : OUT STD_LOGIC_VECTOR(15 downto 0); addressM : OUT STD_LOGIC_VECTOR(15 downto 0); writeM : OUT STD_LOGIC ); end component; component mem_model is generic ( DATA_WIDTH : natural := 16; DATA_DEPTH_LOG2 : natural := 10; FNAME : string := \u0026#34;data.dat\u0026#34; ); port ( reset : IN STD_LOGIC; clock : IN STD_LOGIC; ADDR : IN STD_LOGIC_VECTOR(DATA_DEPTH_LOG2-1 downto 0); WE : IN STD_LOGIC; WDATA : IN STD_LOGIC_VECTOR(DATA_WIDTH-1 downto 0); RDATA : OUT STD_LOGIC_VECTOR(DATA_WIDTH-1 downto 0) ); end component; signal clock : STD_LOGIC; signal reset : STD_LOGIC; signal instruction : STD_LOGIC_VECTOR(15 downto 0); signal inM : STD_LOGIC_VECTOR(15 downto 0); signal outM : STD_LOGIC_VECTOR(15 downto 0); signal PC : STD_LOGIC_VECTOR(15 downto 0); signal addressM : STD_LOGIC_VECTOR(15 downto 0); signal writeM : STD_LOGIC; constant zeroes : STD_LOGIC_VECTOR(15 downto 0) := x\u0026#34;0000\u0026#34;; constant clock_period : time := 10 ns; begin ------------------------------------------------------------------------------- -- DUT ------------------------------------------------------------------------------- DUT: component cpu port map( clock =\u0026gt; clock, reset =\u0026gt; reset, instruction =\u0026gt; instruction, inM =\u0026gt; inM, outM =\u0026gt; outM, PC =\u0026gt; PC, addressM =\u0026gt; addressM, writeM =\u0026gt; writeM ); ------------------------------------------------------------------------------- -- SIMULATION MODELS ------------------------------------------------------------------------------- dmem: component mem_model generic map( FNAME =\u0026gt; \u0026#34;/home/jvliegen/vc/github/KULeuven-Diepenbeek/course_disch_internal/cpu/firmware/empty.dat\u0026#34; ) port map( reset =\u0026gt; reset, clock =\u0026gt; clock, ADDR =\u0026gt; addressM(9 downto 0), WE =\u0026gt; writeM, WDATA =\u0026gt; outM, RDATA =\u0026gt; inM ); imem: component mem_model generic map( FNAME =\u0026gt; \u0026#34;/home/jvliegen/vc/github/KULeuven-Diepenbeek/course_disch_internal/cpu/firmware/firmware.dat\u0026#34; ) port map( reset =\u0026gt; reset, clock =\u0026gt; clock, ADDR =\u0026gt; PC(9 downto 0), WE =\u0026gt; zeroes(0), WDATA =\u0026gt; zeroes, RDATA =\u0026gt; instruction ); ------------------------------------------------------------------------------- -- CLOCK ------------------------------------------------------------------------------- PCLK: process begin clock \u0026lt;= \u0026#39;1\u0026#39;; wait for clock_period/2; clock \u0026lt;= \u0026#39;0\u0026#39;; wait for clock_period/2; end process PCLK; ------------------------------------------------------------------------------- -- RESET ------------------------------------------------------------------------------- PRESET: process begin reset \u0026lt;= \u0026#39;1\u0026#39;; wait for clock_period*9; wait for clock_period/2; reset \u0026lt;= \u0026#39;0\u0026#39;; wait; end process PRESET; end Behavioural; ------------------------------------------------------------------------------- ------------------------------------------------------------------------------- -- MEM MODEL ------------------------------------------------------------------------------- ------------------------------------------------------------------------------- library IEEE; use IEEE.STD_LOGIC_1164.ALL; use IEEE.NUMERIC_STD.ALL; use IEEE.STD_LOGIC_MISC.or_reduce; use STD.textio.all; use ieee.std_logic_textio.all; entity mem_model is generic ( DATA_WIDTH : natural := 16; DATA_DEPTH_LOG2 : natural := 10; FNAME : string := \u0026#34;data.dat\u0026#34; ); port ( reset : IN STD_LOGIC; clock : IN STD_LOGIC; ADDR : IN STD_LOGIC_VECTOR(DATA_DEPTH_LOG2-1 downto 0); WE : IN STD_LOGIC; WDATA : IN STD_LOGIC_VECTOR(DATA_WIDTH-1 downto 0); RDATA : OUT STD_LOGIC_VECTOR(DATA_WIDTH-1 downto 0) ); end entity mem_model; architecture Behavioural of mem_model is -- localised inputs signal reset_i : STD_LOGIC; signal clock_i : STD_LOGIC; signal ADDR_i : STD_LOGIC_VECTOR(DATA_DEPTH_LOG2-1 downto 0); signal WE_i : STD_LOGIC; signal WDATA_i : STD_LOGIC_VECTOR(DATA_WIDTH-1 downto 0); signal RDATA_i : STD_LOGIC_VECTOR(DATA_WIDTH-1 downto 0); file fh : text; type T_memory is array(0 to (2**DATA_DEPTH_LOG2)-1) of STD_LOGIC_VECTOR(DATA_WIDTH-1 downto 0); signal mem : T_memory; signal outgoing_data : STD_LOGIC_VECTOR(DATA_WIDTH-1 downto 0); signal addr_int : integer range 0 to ((2**DATA_DEPTH_LOG2)-1); begin ------------------------------------------------------------------------------- -- (DE-)LOCALISING IN/OUTPUTS ------------------------------------------------------------------------------- reset_i \u0026lt;= reset; clock_i \u0026lt;= clock; ADDR_i \u0026lt;= ADDR after 1 ns; WE_i \u0026lt;= WE after 1 ns; WDATA_i \u0026lt;= WDATA after 1 ns; RDATA \u0026lt;= RDATA_i; ------------------------------------------------------------------------------- -- COMBINATORIAL ------------------------------------------------------------------------------- -- RDATA_i \u0026lt;= outgoing_data; RDATA_i \u0026lt;= mem(addr_int); addr_int \u0026lt;= to_integer(unsigned(ADDR_i)); ------------------------------------------------------------------------------- -- MEMORY ------------------------------------------------------------------------------- PMEM: process(reset_i, clock_i) variable v_line : line; variable v_temp : STD_LOGIC_VECTOR(DATA_WIDTH-1 downto 0); variable v_pointer : integer; begin if reset_i = \u0026#39;1\u0026#39; then outgoing_data \u0026lt;= (others =\u0026gt; \u0026#39;0\u0026#39;); mem \u0026lt;= (others =\u0026gt; (others =\u0026gt; \u0026#39;0\u0026#39;)); -- init the firmware v_pointer := 0; file_open(fh, FNAME, read_mode); while not endfile(fh) loop readline(fh, v_line); -- hread(v_line, v_temp); read(v_line, v_temp); mem(v_pointer) \u0026lt;= v_temp; v_pointer := v_pointer + 1; end loop; file_close(fh); elsif rising_edge(clock_i) then -- write to memory if WE_i = \u0026#39;1\u0026#39; then mem(addr_int) \u0026lt;= WDATA_i; outgoing_data \u0026lt;= (others =\u0026gt; \u0026#39;0\u0026#39;); else -- read from memory outgoing_data \u0026lt;= mem(addr_int); end if; end if; end process; end Behavioural; "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/500_cpu/570_firmware/",
	"title": "Opdracht - firmware",
	"tags": [],
	"description": "",
	"content": "Ten slotte zijn hier nog enkele voorbeelden waarmee het instructie geheugen geÃ¯nitialiseerd kan worden. Let er op dat je de generic map zo aanpast dat de simulator een geldig pad heeft naar deze files op jouw computer/laptop.\n// predefined symbols // A: Address Register. // D: Data Register. // M: Refers to the register in Main Memory whose address is currently stored in A. // SP: RAM address 0. // LCL: RAM address 1. // ARG: RAM address 2. // THIS: RAM address 3. // THAT: RAM address 4. // R0-R15: Addresses of 16 RAM Registers, mapped from 0 to 15. // SCREEN: Base address of the Screen Map in Main Memory, which is equal to 16384. // KBD: Keyboard Register address in Main Memory, which is equal to 24576. // // set the maximum value to which the sequence has to go @10000 D=A @R15 M=D // init @R1 M=0 @R2 M=1 (START_L) // start loop phase 1 D=0 @R1 D=D+M @R2 D=D+M @R3 M=D // check if MAX is reached @R15 D=D-M @INFINITE_LOOP D;JGE // start loop phase 2 D=0 @R2 D=D+M @R3 D=D+M @R1 M=D // check if MAX is reached @R15 D=D-M @INFINITE_LOOP D;JGE // start loop phase 3 D=0 @R3 D=D+M @R1 D=D+M @R2 M=D // check if MAX is reached @R15 D=D-M @INFINITE_LOOP D;JGE @START_L 0;JMP // infinite loop to catch end (INFINITE_LOOP) @INFINITE_LOOP 0;JMP 0010011100010000 - 0x2710 1110110000010000 - 0xEC10 0000000000001111 - 0x000F 1110001100001000 - 0xE308 0000000000000001 - 0x0001 1110101010001000 - 0xEA88 0000000000000010 - 0x0002 1110111111001000 - 0xEFC8 1110101010010000 - 0xEA90 0000000000000001 - 0x0001 1111000010010000 - 0xF090 0000000000000010 - 0x0002 1111000010010000 - 0xF090 0000000000000011 - 0x0003 1110001100001000 - 0xE308 0000000000001111 - 0x000F 1111010011010000 - 0xF4D0 0000000000101011 - 0x002B 1110001100000011 - 0xE303 1110101010010000 - 0xEA90 0000000000000010 - 0x0002 1111000010010000 - 0xF090 0000000000000011 - 0x0003 1111000010010000 - 0xF090 0000000000000001 - 0x0001 1110001100001000 - 0xE308 0000000000001111 - 0x000F 1111010011010000 - 0xF4D0 0000000000101011 - 0x002B 1110001100000011 - 0xE303 1110101010010000 - 0xEA90 0000000000000011 - 0x0003 1111000010010000 - 0xF090 0000000000000001 - 0x0001 1111000010010000 - 0xF090 0000000000000010 - 0x0002 1110001100001000 - 0xE308 0000000000001111 - 0x000F 1111010011010000 - 0xF4D0 0000000000101011 - 0x002B 1110001100000011 - 0xE303 0000000000001000 - 0x0008 1110101010000111 - 0xEA87 0000000000101011 - 0x002B 1110101010000111 - 0xEA87 "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/900_zelfstudie_vhdl/",
	"title": "Zelfstudie VHDL",
	"tags": [],
	"description": "",
	"content": "Zelfstudie VHDL Onderdelen van dit hoofdstuk kunnen gevraagd worden in het theorie examen.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/900_zelfstudie_vhdl/910_hw_vs_sw/",
	"title": "Hardware vs software",
	"tags": [],
	"description": "",
	"content": "Hardware vs software beschrijvingstaal voor hardware \u0026ne; programmeertaal programmeertaal (bv. C): hardware = processor hardware is reeds ontworpen code: beschrijft hoe hardware gebruikt moet worden code wordt gecompileerd voor een specifieke processor hardware beschrijvingstaal (bv. VHDL) hardware = ontwerp op FPGA of ASIC hardware moet ontworpen worden code: beschrijft welke hardware ontworpen moet worden code wordt gesynthetiseerd voor een specifieke FPGA of ASIC technologie Voorbeeld hardware c \u0026lt;= a and b; e \u0026lt;= c or d; betekent hetzelfde als\ne \u0026lt;= c or d; c \u0026lt;= a and b; schematische voorstelling "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/910_zelfstudie_fsm/",
	"title": "Zelfstudie FSM",
	"tags": [],
	"description": "",
	"content": "Zelfstudie FSM Onderdelen van dit hoofdstuk kunnen gevraagd worden in het theorie examen.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/900_zelfstudie_vhdl/920_ent_arch/",
	"title": "Entiteiten en architecturen",
	"tags": [],
	"description": "",
	"content": "De VHDL code van elk bouwblok bevat een\neen lijst van de gebruikte bibliotheken, interface beschrijving: entity, functie beschrijving: architecture. Voorbeeld library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity and_or_poort is port( A: IN STD_LOGIC; B: IN STD_LOGIC; D: IN STD_LOGIC; E: OUT STD_LOGIC ); end entity and_or_poort; architecture Behavioural of and_gate is signal c: STD_LOGIC; begin c \u0026lt;= a and b; e \u0026lt;= c or d; end Behavioural; Entity De entity bevat de beschrijving van de interface.\nentity and_or_poort is port( a, b, d: in STD_LOGIC; e: out STD_LOGIC); end and_or_poort; De entity Entity ports Elke poort heeft:\neen naam in dit voorbeeld: a,b,d,e een mode in dit voorbeeld: in, out een type in dit voorbeeld: STD_LOGIC Namen in VHDL Namen voldoen aan de volgende eisen:\nbestaan uit letters, cijfers en _ beginnen met een letter niet eindigen met een _ geen twee _ na elkaar geen gereserveerde woorden zoals bv. \u0026ldquo;entity\u0026rdquo; Namen zijn niet case sensitive.\nModes van ports Belangrijkste modes, of richtingen:\nin: ingang out: uitgang inout: in- en uitgang buffer: uitgang die intern ook gebruikt wordt voorbeeld: and_or_poort waarbij we c ook als uitgang willen entity and_or_poort is port( a, b, d: in STD_LOGIC; c: buffer STD_LOGIC; e: out STD_LOGIC); end and_or_poort; architecture arch of and_or_poort is begin c \u0026lt;= a and b; e \u0026lt;= c or d; end arch; Gebruik van buffer Het gebruik van de mode buffer kan vermeden worden door een intern signaal aan te maken en dit te verbinden met de uitgang.\nVolgende twee codes zijn identiek:\nentity and_or_poort is port( a, b, d: in STD_LOGIC; c: buffer STD_LOGIC; e: out STD_LOGIC); end and_or_poort; architecture arch of and_or_poort is begin c \u0026lt;= a and b; e \u0026lt;= c or d; end arch; entity and_or_poort is port( a, b, d: in STD_LOGIC; c, e: out STD_LOGIC); end and_or_poort; architecture arch of and_or_poort is signal c_intern: STD_LOGIC; begin c_intern \u0026lt;= a and b; e \u0026lt;= c_intern or d; c \u0026lt;= c_intern; end arch; Architecture De architecture beschrijft het gedrag. Een architecture moet verbonden zijn met een specifieke entity. Een entity kan meerdere architectures hebbben. architecture arch of and_or_poort is signal c: STD_LOGIC; begin c \u0026lt;= a and b; e \u0026lt;= c or d; end arch; Signals Om interne data voor te stellen, worden signals gebruikt. Een signal is van een bepaald type maar heeft geen mode. Namen van signalen: zelfde voorwaarden als namen van entity ports. Voorbeeld: signal c: STD_LOGIC architecture arch of and_or_poort is signal c: STD_LOGIC; begin c \u0026lt;= a and b; e \u0026lt;= c or d; end arch; Commentaar in VHDL Je kan iets in commentaar zetten door er 2 keer een - voor te zetten.\n-- dit is een regel commentaar z \u0026lt;= a -- dit kan ook op het einde van de regel "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/920_tuning/",
	"title": "Tuning",
	"tags": [],
	"description": "",
	"content": "Tuning "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/920_tuning/921_tuning/",
	"title": "Tuning",
	"tags": [],
	"description": "",
	"content": "De latency is de tijd die er nodig is tussen het starten van een operatie en het verkrijgen van het resultaat.\nDe throughput is de hoeveelheid bits die een operatie verwerkt in een gegeven tijdseenheid.\nDe cost is de kost van een ontwerp. Hoe meer componenten, hoe meer oppervlakte er ingenomen wordt op chip, en hoe duurder het ontwerp wordt.\nHet kritische pad is het langste combinatorische pad tussen 2 registers/flip-flops.\nDesign in de Hack Processor De latency is 1 clock cycle. Als we aannemen dat het kritische pad de ripple carry is en dat de minimale klok periode 2 ns is, dan is de latency = 2ns.\nAangezien er iedere clock cycle een optelling gedaan kan worden, is de througput = 8 Gbps (= 16 bits / 1CC = 16 bits / 2 ns = 16 / (2 * 10-9) bits/s = 8 x 109 bits / s )\nHalvering van de breedte De latency is 1 clock cycle. Als we aannemen dat het kritische pad de ripple carry lineair mee krimpt, wordt de minimale klok periode 1 ns is en dan is de latency = 1ns.\nAangezien er iedere clock cycle een optelling gedaan kan worden, is de througput = 8 Gbps (= 8 bits / 1CC = 8 bits / 1 ns = 8 x 109 bits / s )\nUnrolled De latency is 1 clock cycle. Als we aannemen dat het kritische pad de ripple carry niet wijzigt, dan is de latency = 2ns.\nAangezien er iedere clock cycle een optelling gedaan kan worden, is de througput = 8 Gbps (= 16 bits / 1CC = 16 bits / 2 ns = 16 / (2 * 10-9) bits/s = 8 x 109 bits / s )\nPipelined De latency is 2 clock cycles. Als we aannemen dat het kritische pad de ripple carry lineair mee krimpt, wordt de minimale klok periode 1 ns is en dan is de latency = 2ns.\nAangezien er, bij een volled pipeline, iedere clock cycle een optelling gedaan kan worden, is de througput = 16 Gbps (= 16 bits / 1CC = 16 bits / 1 ns = 16 / (1 * 10-9) bits/s)\nSequential De latency is 2 clock cycles. Als we aannemen dat het kritische pad de ripple carry lineair mee krimpt, wordt de minimale klok periode 1 ns is en dan is de latency = 2ns.\nAangezien er iedere 2 clock cycles een optelling gedaan kan worden, is de througput = 8 Gbps (= 16 bits / 2CC = 16 bits / 2 ns = 16 / (2 * 10-9) bits/s = 8 x 109 bits / s )\nSamenvatting 16-bit 8-bit Unrolled Pipelined Sequential Tmin [ns] 2 1 2 1 1 Latency [CC] 1 1 1 2 2 Latency [ns] 2 1 2 2 2 Throughput [Gbps] 8 8 8 16 8 Aantal FF 3x16 + 2x1 = 50 3x8 + 2x1 = 26 3x16 + 2x1 = 50 (3x16 + 2x1) + (3x8 + 1x1) = 75 2x16 + 2x1 + 2x8 = 50 Kan 16-bit optelling âœ“ âœ— âœ“ âœ“ âœ“ Extra controle pad âœ— âœ— âœ— âœ“ âœ“ Fmax [MHz] 500 1000 500 1000 1000 De resultaten van de 8-bit versie zijn louter voor de volledigheid; Unrolled geeft geen meerwaarde in dit geval Pipelined geeft betere throughput en klok snelheid, ten kosten van extra oppervlakte Sequential geeft betere klok snelheid, ten kosten van extra controle-logica Functionaliteit, kost, performantie \u0026hellip; Je kan voor maximaal 2 prioriteiten optimaliseren, maar niet voor alle prioriteiten.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/900_zelfstudie_vhdl/930_hierachie/",
	"title": "HiÃ«rarchie",
	"tags": [],
	"description": "",
	"content": "het is mogelijk om een hiÃ«rarchie in te bouwen. Een bouwblok kan een instantie van een andere bouwblok bevatten.\nlibrary IEEE; use IEEE.STD_LOGIC_1164.ALL; entity and_or_xor_poort is port( a, b, c, d: in STD_LOGIC; e: out STD_LOGIC); end and_or_xor_poort; architecture arch of and_or_xor_poort is -- declaratie van and_or poort component and_or_poort is port( a, b, d: in STD_LOGIC; e: out STD_LOGIC); end component; signal f: STD_LOGIC; begin -- instantie van and_or poort inst_and_or_poort: component and_or_poort port map( a =\u0026gt; b, b =\u0026gt; a, d =\u0026gt; c, e =\u0026gt; f); e \u0026lt;= d xor f; end arch; Een component moet eerst gedeclareerd zijn alvorens hem te instantiÃ«ren. De component declaratie heeft dezelfde ports als de entity declaratie van het bijhorend bouwblok.\nAls alternatief, kan de instantiatie ook beschreven worden als volgt:\ninst_and_or_poort: component and_or_poort port map(b, a, c, f); In het voorbeeld hieboven, worden signalen toegekend op volgorde, bv: het eerste signaal tussen de ( ) aan de eerste port van de declaratie, enz.\nAls oefening kan je zelf eens de volgende componenten maken â€¢ and-poort â€¢ or-poort â€¢ invertor â€¢ een multiplexer die gebruikt maakt van bovenstaande componenten Dit kan je dan zelf eens simuleren in Vivado\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/900_zelfstudie_vhdl/940_libraries/",
	"title": "Libraries",
	"tags": [],
	"description": "",
	"content": " Een library kan meerdere packages bevatten.\nEen package bevat 1 of meer van onderstaande middelen.\ntypes constanten functies procedures component declaraties Een VHDL module kan gebruik maken van 1 of meerdere packages Voorbeeld:\nlibrary library1; use library1.pack2.all; library library2; use library2.pack4.all; entity ... architecture... \u0026ldquo;std\u0026rdquo; library Een verwijzing naar de package \u0026ldquo;standard\u0026rdquo; in de library \u0026ldquo;std\u0026rdquo; is steeds impliciet aanwezig. Volgende twee codes zijn identiek.\nentity and_or_poort is port( a, b, d: in bit; e: out bit); end and_or_poort; architecture arch of and_or_poort is signal c: bit; begin c \u0026lt;= a and b; e \u0026lt;= c or d; end arch; library std; use std.standard.all; -- geeft aan wat we precies willen gebruiken van deze package entity and_or_poort is port( a, b, d: in bit; e: out bit); end and_or_poort; architecture arch of and_or_poort is signal c: bit; begin c \u0026lt;= a and b; e \u0026lt;= c or d; end arch; Een stuk code van de standard package.\npackage STANDARD is --opsomming types type BOOLEAN is (FALSE, TRUE); type BIT is (\u0026#39;0\u0026#39;, \u0026#39;1\u0026#39;); type CHARACTER is ( -- opsomming ASCII characters); type INTEGER is range -- implementation defined; --arrays: samengestelde types waarvan de range moet ingesteld worden type STRING is array (POSITIVE range \u0026lt;\u0026gt;) of CHARACTER; type BIT_VECTOR is array (NATURAL range \u0026lt;\u0026gt;) of BIT; ... end STANDARD;"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/900_zelfstudie_vhdl/950_arrays/",
	"title": "Arrays",
	"tags": [],
	"description": "",
	"content": "Een range kan stijgend of dalend gekozen worden:\nx(2 to 6) y(7 downto 0) We kunnen verwijzen naar individuele elementen door een index te gebruiken:\nx(4) y(7) Voorbeeld:\nentity and_or_poort is port( a_vec: in bit_vector(2 downto 0); c_vec: out bit_vector(0 to 1)); end and_or_poort; architecture arch of and_or_poort is signal c_intern: bit; begin c_intern \u0026lt;= a_vec(2) and a_vec(1); c_vec(1) \u0026lt;= c_intern or a_vec(0); c_vec(0) \u0026lt;= c_intern: end arch; Toekenning van arrays Toekenning gebeurt op basis van positie, niet op basis van index. Voorbeeld:\nsignal x: bit_vector(2 to 6); signal y: bit_vector(7 downto 3); ... x \u0026lt;= y; Voorbeelden van de toekenning van de individuele elementen van een samengesteld type: signal y, z: bit_vector(3 downto 0); signal a, b: bit; signal byte: bit_vector(7 downto 0); Op basis van positie: z \u0026lt;= (a, \u0026#39;1\u0026#39;, b, \u0026#39;0\u0026#39;); -- z wordt dan a1b0 met a en b een waarde 0 of 1 op basis van index: byte \u0026lt;= (7 =\u0026gt; \u0026#39;1\u0026#39;, 4 downto 2 =\u0026gt; a, 6 =\u0026gt; b, others =\u0026gt; \u0026#39;0\u0026#39;); -- byte wordt dan 1b0aaa00 Voorbeeld van de toekenning van een waarde: z \u0026lt;= \u0026#34; 1010\u0026#34; ; Voorbeelden van samenvoeginstructies: z \u0026lt;= a \u0026amp; \u0026#39;1\u0026#39; \u0026amp; b \u0026amp; \u0026#39;0\u0026#39;; byte \u0026lt;= y \u0026amp; z; Voorbeelden van de gedeeltelijke toekenning van een array: signal a, z: bit_vector(3 downto 0); signal b: bit; signal byte: bit_vector(7 downto 0); ... byte(5 downto 2) \u0026lt;= a; z(1 downto 0) \u0026lt;= \u0026#39;0\u0026#39; \u0026amp; b; De richting van de deeltoekenning moet dezelfde zijn als de richting van de declaratie. Correct voorbeeld: signal a: bit_vector(3 downto 0); signal byte: bit_vector(7 downto 0); ... byte(5 downto 2) \u0026lt;= a; Foutief voorbeeld: signal z: bit_vector(3 downto 0); signal b: bit; ... z(0 to 1) \u0026lt;= \u0026#39;0\u0026#39; \u0026amp; b; -- dit geeft een error! Aliases Aliases zijn verwijzingen naar reeds gedefinieerde signals, die de code beter begrijpbaar maken.\nsignal adres: bit_vector(31 downto 0); alias top_adres: bit_vector(3 downto 0) is adres(31 downto 28); alias adres_bank: bit_vector(3 downto 0) is adres(27 downto 24); alias rij_adres: bit_vector(11 downto 0) is adres(24 downto 12); "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/900_zelfstudie_vhdl/960_packages/",
	"title": "Packages",
	"tags": [],
	"description": "",
	"content": "Zelf-gedefinieerde packages Per default worden zelfgemaakte bouwblokken opgeslagen in de library work. In deze library kunnen we zelf packages definiÃ«ren.\nVoorbeeld van een zelf-gedefinieerde package: package and_or_xor_pack is component and_or_poort is port( a, b, d: in bit; e: out bit); end component; end package; Als we deze package toevoegen, hoeven we de component declaratie niet meer te doen.\nlibrary work; use work.and_or_xor_pack.all; entity and_or_xor_poort ... architecture ... -- zonder component declaratie \u0026ldquo;std_logic_1164\u0026rdquo; package De package \u0026quot; std_logic_1164\u0026quot; in library \u0026quot; ieee\u0026quot; bevat o.a. de types \u0026quot; std_ulogic\u0026quot; en \u0026quot; std_logic\u0026quot; .\npackage std_logic_1164 is type std_ulogic is ( \u0026#39;U\u0026#39;, -- Uninitialized : flipflop waar nog nooit in is geschreven \u0026#39;X\u0026#39;, -- Forcing Unknown \u0026#39;0\u0026#39;, -- Forcing 0 : rechtstreeks aan grond \u0026#39;1\u0026#39;, -- Forcing 1 : rechtstreeks aan voeding \u0026#39;Z\u0026#39;, -- High Impedance \u0026#39;W\u0026#39;, -- Weak Unknown \u0026#39;L\u0026#39;, -- Weak 0 : via weerstand aan grond \u0026#39;H\u0026#39;, -- Weak 1 : via weerstand aan voeding \u0026#39;-\u0026#39;, -- Don\u0026#39;t Care ); subtype std_logic is resolved std_ulogic; type std_ulogic_vector is array (NATURAL range \u0026lt;\u0026gt;) of std_ulogic; type std_logic_vector is array (NATURAL range \u0026lt;\u0026gt;) of std_logic; ... We gebruiken altijd \u0026ldquo;std_logic\u0026rdquo; in de plaats van \u0026ldquo;bit\u0026rdquo;.\n\u0026ldquo;std_logic_unsigned\u0026rdquo; en \u0026ldquo;std_logic_signed\u0026rdquo; In de package std_logic_unsigned (uit library ieee) worden std_logic_vectors beschouwd als positieve binaire getallen zonder tekenbit .\nIn de package std_logic_signed (uit library ieee) worden std_logic_vectors beschouwd als getallen in 2\u0026rsquo;s complement notatie.\nDe volgende functies staan o.a. beschreven in de packages: +, -, *, \u0026lt;, \u0026lt;=, \u0026gt;, \u0026gt;=, =, /=, shl, shr, conv_integer\nOpteller We zouden een opteller kunnen bouwen a.d.h.v. half/full adders. Het voordeel van VHDL is dat we het hardware-ontwerp ook op een hoger niveau kunnen beschrijven. In het geval van de opteller kunnen we gewoon \u0026lsquo;+\u0026rsquo; gebruiken. Daarvoor moeten we eerst verwijzen naar de juiste \u0026lsquo;package\u0026rsquo; in de juiste \u0026rsquo;library\u0026rsquo; en moeten we groepjes van bits zien als \u0026lsquo;arrays\u0026rsquo;.\nDe onderstaande manier beschijft een 4-bit opteller maken in VHDL:\nlibrary ieee; use ieee.std_logic_1164.all; use ieee.std_logic_unsigned.all; entity opteller is port( a, b: in std_logic_vector(3 downto 0); c: out std_logic_vector(3 downto 0)); end opteller; architecture arch of opteller is begin c \u0026lt;= a + b; end arch; De lengtes van a, b en c moeten hetzelfde zijn, dus de carry-out wordt niet berekend!\nAls we de carry-out ook willen berekenen, kunnen we de lengte van c met 1 bit vergroten, maar dan moeten we intern de lengte van a en b ook vergroten, want per syntax geldt dat de som van 2 n-bit vectoren, terug een n-bit verctor is:\nlibrary ieee; use ieee.std_logic_1164.all; use ieee.std_logic_unsigned.all; entity opteller is port( a, b: in std_logic_vector(3 downto 0); c: out std_logic_vector(4 downto 0)); end opteller; architecture arch of opteller is signal a_long, b_long: std_logic_vector(4 downto 0); begin a_long \u0026lt;= \u0026#39;0\u0026#39; \u0026amp; a; b_long \u0026lt;= \u0026#39;0\u0026#39; \u0026amp; b; c \u0026lt;= a_long + b_long; end arch; Aftrekker Met behulp van de package std_logic_unsigned kunnen we ook aftrekkingen uitvoeren. De ingangen worden dan beschouwd als positieve binaire getallen zonder tekenbit. Indien het resultaat kleiner wordt dan nul, wordt er terug vanaf het maximum naar beneden geteld, alsof alle getallen zich op een cirkel bevinden. Dat komt overeen met 2\u0026rsquo;s complement notatie. Voor optelling en aftrekking maakt het niet uit of we std_logic_unsigned of std_logic_signed gebruiken. Voor \u0026gt;, \u0026gt;=, \u0026lt;, \u0026lt;= maakt het wel uit.\nuse ieee.std_logic_1164.all; use ieee.std_logic_unsigned.all; entity opteller is port( a, b: in std_logic_vector(3 downto 0); c: out std_logic_vector(3 downto 0)); end opteller; architecture arch of opteller is begin c \u0026lt;= a - b; end arch; Opteller/aftrekker We gebruiken de ingang \u0026ldquo;op_af\u0026rdquo; om te bepalen of we gaan optellen of aftrekken. Als de bit gelijk is aan 0, tellen we op. Als de bit gelijk is aan 1, trekken we af. Voor de beschrijving van een MUX hebben we een process nodig. Daar komen we in de les nog op terug.\nlibrary ieee; use ieee.std_logic_1164.all; use ieee.std_logic_signed.all; entity opteller_aftrekker is port( a, b: in std_logic_vector(3 downto 0); c: out std_logic_vector(3 downto 0); op_af: in std_logic); end opteller_aftrekker; architecture arch of opteller_aftrekker is begin p: process(a, b, op_af) begin if op_af = \u0026#39;0\u0026#39; then c \u0026lt;= a + b; else c \u0026lt;= a - b; end if; end process; end arch; "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/900_zelfstudie_vhdl/970_processen/",
	"title": "Processen",
	"tags": [],
	"description": "",
	"content": "Structuur van een proces Een proces wordt uitgevoerd wanneer een signaal in de sensitivity lijst van waarde verandert. Signalen worden geupdated aan het einde van het proces.\nVoorbeeld van een proces met een if-then-else statement: multiplexer.\nlibrary ieee; use ieee.std_logic_1164.all; entity mux is port( a, b, s: in std_logic; z: out std_logic); end mux; architecture arch of mux is begin p1: process(a, b, s) -- a, b, s is de sensitiviy lijst begin if s = \u0026#39;1\u0026#39; then z \u0026lt;= a; else z \u0026lt;= b; end if; end process; end arch; Toekenningen in processen Volgende processen leiden tot dezelfde implementatie:\np1: process(a, b) begin y \u0026lt;= a; y \u0026lt;= b; end process; p2: process(b) begin y \u0026lt;= b; end process; Wanneer Ã©Ã©n van de signalen in de sensitivity list van het proces verandert, wordt het proces van begin tot einde doorlopen. Wanneer het proces helemaal doorlopen is, wacht het op een nieuwe verandering van de signalen in de sensitity list. Pas wanneer het proces in deze wachtfase terechtkomt, gebeurt de eigenlijke toekenning van de signalen. Daarom overschrijft de tweede uitdrukking de eerste in process p1.\nVolgende processen leiden niet tot dezelfde implementatie:\np1: process(b) begin a \u0026lt;= b; c \u0026lt;= a; end process; p2: process(a, b) begin a \u0026lt;= b; c \u0026lt;= a; end process; Wat gebeurt er wanneer b van waarde verandert?\nIn p1: Het proces wordt doorlopen. Daarna gebeuren alle toekenningen. In dit geval wordt b toegekend aan a en op hetzelfde moment wordt de oude waarde van a toegekend aan c. Er wordt dus een geheugenwerking gecreÃ«erd.\nIn p2: Het proces wordt doorlopen. Daarna gebeuren alle toekenningen. In dit geval wordt b toegekend aan a en op hetzelfde moment wordt de oude waarde van a toegekend aan c. Omdat a in de sensitivity list staat, wordt het proces opnieuw doorlopen en wordt daarna b opnieuw toegekend aan a en wordt de nieuwe waarde van a toegekend aan c. Deze werking is zuiver combinatorisch.\nModelleren van combinatorische processen Volgende processen leiden to dezelfde implementatie:\np1: process(a, b) begin c \u0026lt;= \u0026#34;00\u0026#34;; if a = \u0026#39;1\u0026#39; then c \u0026lt;= \u0026#34;01\u0026#34;; elsif b = \u0026#39;1\u0026#39; then c \u0026lt;= \u0026#34;11\u0026#34;; end if; end process; p2: process(a, b) begin if a = \u0026#39;1\u0026#39; then c \u0026lt;= \u0026#34;01\u0026#34;; elsif b = \u0026#39;1\u0026#39; then c \u0026lt;= \u0026#34;11\u0026#34;; else c \u0026lt;= \u0026#34;00\u0026#34;; end if; end process; Meerdere processen binnen een ontwerp architecture arch_example of example is begin p1: process(-- sensitivity list) begin -- sequentiÃ«le statements end process; p2: process(-- sensitivity list) begin -- sequentiÃ«le statements end process; p3: process(-- sensitivity list) begin -- sequentiÃ«le statements end process; end arch_example; Een ingang van een proces kan een uitgang van een ander proces zijn.\nVoorbeeld if statement library ieee; use ieee.std_logic_1164.all; entity if_example is port( a, b, c, x: in std_logic_vector(3 downto 0); z: out std_logic_vector(3 downto 0)); end if_example; architecture arch_if_example of if_example is begin p_if: process(a, b, c, x) begin if x = \u0026#34; 0000\u0026#34; then z \u0026lt;= a; elsif x = \u0026#34; 0101\u0026#34; then z \u0026lt;= b; else z \u0026lt;= c; end if; end process; end arch_if_example; Case statement Structuur case statement case expression is when value_1 =\u0026gt; -- toekenning when value_2 | value_3 =\u0026gt; -- toekenning when value_M to value_N =\u0026gt; -- toekenning when others =\u0026gt; -- toekenning end case; Voorbeeld case statement library ieee; use ieee.std_logic_1164.all; entity case_example is port( a, b, c, x: in integer range 0 to 15; z: out integer range 0 to 15); end case_example; architecture arch_case_example of case_example is begin p_case: process(a, b, c, x) begin case x is when 0 to 4 =\u0026gt; z \u0026lt;= b; when 5 =\u0026gt; z \u0026lt;= c; when 7|9 =\u0026gt; z \u0026lt;= a; when others =\u0026gt; z \u0026lt;= 0; end case; end process; end arch_case_example; Concurrente, selectieve signaaltoekenning Een with-select statement: concurrente versie van de case statement. Verschil: slechts Ã©Ã©n bestemming mogelijk. Zelfde regels als bij de case statement\nentity example is port( a, b, c, x: in integer range 0 to 7; z: out integer range 0 to 7); end example; architecture arch_example of example is begin p: process(a, b, c, x) begin case x is -- case in process when 0 to 4 =\u0026gt; z \u0026lt;= b; when 5 =\u0026gt; z \u0026lt;= c; when others =\u0026gt; z \u0026lt;= a; end case; end process; end arch_example; architecture arch_example of example is begin with x select -- with-select buiten process z \u0026lt;= b when 0 to 4, c when 5, a when others; end arch_example; Concurrente statements Concurrente statements komen voor buiten een proces.\nVoorbeelden van concurrente statements:\nconcurrente signaaltoekenning (bv. a \u0026lt;= b), conditionele signaaltoekenning (when-else), geselectioneerde signaaltoekenning (with-select), proces, generate statement, component instantiatie. SequentiÃ«le statements SequentiÃ«le statements komen steeds voor binnen een proces.\nVoorbeelden van sequentiÃ«le statements:\ncase, if, for loop, toekenning van een variabele, wait statement. Verschil tussen sensitivity list en wait Een proces met een sensitivity list mag geen wait opdracht hebben. Een proces met een wait opdracht mag geen sensitivity list hebben. Een wait statement is niet synthetiseerbaar en kan dus niet behoren tot VHDL-code die op een FPGA geÃ¯mplementeerd wordt. Een wait statement mag bijvoorbeeld wel in een testbench gebruikt worden. p_optelling: process(a, b, cin) -- sensitivity list begin som \u0026lt;= a xor b xor cin; end process; p_optelling: process begin som \u0026lt;= a xor b xor cin; wait on a, b, cin; -- wait opdracht end process; Wait statements p: process begin wait on a; b \u0026lt;= \u0026#39;1\u0026#39;; wait for 10 ns; b \u0026lt;= \u0026#39;0\u0026#39;; wait until (a = \u0026#39;1\u0026#39;); b \u0026lt;= \u0026#39;1\u0026#39;; end process; "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/900_zelfstudie_vhdl/980_signalen_variablen/",
	"title": "Signalen vs. variabelen",
	"tags": [],
	"description": "",
	"content": " Signalen:\nnemen de nieuwe waarde aan na een vertraging, hebben een hardware equivalent, worden toegekend met \u0026quot; \u0026lt;=\u0026quot; . Variabelen:\nnemen de nieuwe waarde onmiddellijk aan, hebben gÃ©Ã©n hardware equivalent, worden toegekend met \u0026quot; :=\u0026quot; , komen enkel voor in een proces. Signalen Volgende beschrijvingen leiden tot dezelfde implementatie:\narchitecture arch of vb1 is signal o1, o2, o3: std_logic; begin p: process(a, b, c, d, o1, o2, o3) begin q \u0026lt;= not o3; o1 \u0026lt;= a and b; o2 \u0026lt;= c and d; o3 \u0026lt;= o1 or o2; end process; end arch; architecture arch of vb2 is signal o1, o2, o3: std_logic; begin q \u0026lt;= not o3; o1 \u0026lt;= a and b; o2 \u0026lt;= c and d; o3 \u0026lt;= o1 or o2; end arch; architecture arch of vb3 is begin q \u0026lt;= not ((a and b) or (c and d)); end arch; Als we de tussenliggende signalen o1, o2 en o3 vergeten in de sensitivity list, is het gedrag niet meer zuiver combinatorisch. Volgend proces leidt dus niet tot dezelfde implementatie als de vorige voorbeelden:\narchitecture arch of vb4 is signal o1, o2, o3: std_logic; begin p: process(a, b, c, d) begin q \u0026lt;= not o3; o1 \u0026lt;= a and b; o2 \u0026lt;= c and d; o3 \u0026lt;= o1 or o2; end process; end arch; Resolutie-functie In het volgende voorbeeld worden er twee toekenningen gedaan aan hetzelfde signaal: signal a, b, z: std_logic; ... z \u0026lt;= a; z \u0026lt;= b; De resolutie functie die voorzien is in het type std_logic maakt een keuze tussen a en b op basis van de waarde van a en b. De resolutie-functie sluit niet uit dat de synthesetool (die de code omzet in hardware) een foutmelding kan geven.\nVariabelen Als we variabelen gebruiken in plaats van signalen, krijgen we opnieuw dezelfde implementatie:\narchitecture arch of vb5 is begin p: process(a, b, c, d) variable o1, o2, o3; begin q \u0026lt;= not o3; o1 := a and b; o2 := c and d; o3 := o1 or o2; end process; end arch; Voor code die hardware beschrijft (a.k.a. synthetiseerbare code) gebruiken we std_logic. In een testbench kunnen we wel variabelen gebruiken.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/900_zelfstudie_vhdl/990_flipflop_latch/",
	"title": "Flipflop en latches",
	"tags": [],
	"description": "",
	"content": "D-flipflop De D-flip-flop is het basiselement van synchrone logica. De data bit wordt opgenomen in het geheugenelement op de stijgende of dalende flank van de klok. De data bit blijft in het geheugenelement aanwezig tot de volgende stijgende of dalende flank van de klok.\nEngelse benamingen:\npositive/negative edge triggered D-type flip-flop rising/falling edge triggered D-type flip-flop Positieve flank getriggerde D-FF in VHDL Proces met enkel de klok in de sensitivity list. Klok event komt overeen met de flank. Enkel if, geen else.\nlibrary ieee; use ieee.std_logic_1164.all; entity pos_dff is port( d, clk: in std_logic; q: out std_logic); end pos_dff; architecture arch_pos_dff of pos_dff is begin p_pos_dff: process(clk) begin if clk\u0026#39;event and clk = \u0026#39;1\u0026#39; then q \u0026lt;= d; end if; end process; end arch_pos_dff; Negatieve flank getriggerde D-FF in VHDL library ieee; use ieee.std_logic_1164.all; entity pos_dff is port( d, clk: in std_logic; q: out std_logic); end pos_dff; architecture arch_pos_dff of pos_dff is begin p_pos_dff: process(clk) begin if clk\u0026#39;event and clk = \u0026#39;0\u0026#39; then q \u0026lt;= d; end if; end process; end arch_pos_dff; Extra functies voor klokflanken In std_logic_1164 zijn de volgende functies gedefinieerd:\nrising_edge falling_edge Beide kolommen doen lijken funtioneel hetzelfde te doen, maar er is een subtiel verschil. Wanneer er gebruikt gemaakt wordt van het xxxx\u0026rsquo;event keyword, wilt dat zeggen er is een verandering in de waarde van xxxx. Als dit gevolgd wordt door de test clk = \u0026lsquo;1\u0026rsquo;, wilt dat zeggen dat deze conditie waar is voor elke overgang naar \u0026lsquo;1\u0026rsquo; (bv: \u0026lsquo;0\u0026rsquo; -\u0026gt; \u0026lsquo;1\u0026rsquo;, maar ook \u0026lsquo;X\u0026rsquo; -\u0026gt; \u0026lsquo;1\u0026rsquo; en \u0026lsquo;-\u0026rsquo; -\u0026gt; \u0026lsquo;1\u0026rsquo;)\nif rising_edge(clk) then if falling_edge(clk) then if clk\u0026#39;event and clk = \u0026#39;1\u0026#39; then if clk\u0026#39;event and clk = \u0026#39;0\u0026#39; then Voor de twee voorbeelden die gebruik maken van functies uit STD_LOGIC_1164, wordt een bepaalde \u0026ldquo;uitgangspositie\u0026rdquo; verwacht.\nrising_edge() geeft true wanneer een signaal van \u0026lsquo;0\u0026rsquo; of \u0026lsquo;L\u0026rsquo; verandert naar \u0026lsquo;1\u0026rsquo; of \u0026lsquo;H\u0026rsquo; falling_edge() geeft true wanneer een signaal van \u0026lsquo;1\u0026rsquo; of \u0026lsquo;H\u0026rsquo; verandert naar \u0026lsquo;0\u0026rsquo; of \u0026lsquo;L\u0026rsquo; D-latch Bij een D-latch worden de data binnengenomen gedurende de hele periode dat de klok hoog is. Een ontwerp met D-flip-flops is veel makkelijker te analyseren en managen dan een ontwerp met D-latches.\nD-latch in VHDL proces met klok en data in de sensitivity list geen klok event enkel if, geen else library ieee; use ieee.std_logic_1164.all; entity dlatch is port( d, clk: in std_logic; q: out std_logic); end dlatch; architecture arch_dlatch of dlatch is begin p_dlatch: process(clk, d) begin if clk = \u0026#39;1\u0026#39; then q \u0026lt;= d; end if; end process; end arch_dlatch; Ongewenste componenten Ongewenste latches Als niet alle mogelijkheden voorzien zijn, kan een combinatorisch circuit zich gedragen als een latch. Dit moet steeds vermeden worden.\nlibrary ieee; use ieee.std_logic_1164.all; entity fout is port( a, b: in std_logic; s: in std_logic_vector(1 downto 0); z: out std_logic); end fout; architecture arch_fout of fout is begin p_fout: process(a, b, s) begin if s = \u0026#34;00\u0026#34; then z \u0026lt;= a; elsif s = \u0026#34;01\u0026#34; then --er is geen beschrijving voor s is 10 of 11 z \u0026lt;= b; end if; end process; end arch_fout; Ongewenste registers Indien we voor een bepaald signaal geen register willen implementeren, moet dat signaal buiten het proces geplaatst worden.\nseq: process(clk) begin if clk\u0026#39;event and clk = \u0026#39;1\u0026#39; then j \u0026lt;= a and b; --register voor j i \u0026lt;= j xor k; end if; end process; seq: process(clk) begin if clk\u0026#39;event and clk = \u0026#39;1\u0026#39; then i \u0026lt;= j xor k; end if; end process; j \u0026lt;= a and b; --geen register voor j "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/900_zelfstudie_vhdl/995_voorbeelden/",
	"title": "Voorbeelden",
	"tags": [],
	"description": "",
	"content": "Binair-naar-onehot decoder library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity bin_to_onehot is port( binair: in std_logic_vector(2 downto 0); decimaal: out std_logic_vector(0 to 7) ); end bin_to_onehot; architecture arch of bin_to_onehot is signal binair_i: std_logic_vector(2 downto 0); signal decimaal_i: std_logic_vector(0 to 7); begin binair_i \u0026lt;= binair; decimaal \u0026lt;= decimaal_i; p: process(binair_i) begin case binair_i is when \u0026#34;000\u0026#34; =\u0026gt; decimaal_i \u0026lt;= \u0026#34;10000000\u0026#34; ; when \u0026#34;001\u0026#34; =\u0026gt; decimaal_i \u0026lt;= \u0026#34;01000000\u0026#34; ; when \u0026#34;010\u0026#34; =\u0026gt; decimaal_i \u0026lt;= \u0026#34;00100000\u0026#34; ; when \u0026#34;011\u0026#34; =\u0026gt; decimaal_i \u0026lt;= \u0026#34;00010000\u0026#34; ; when \u0026#34;100\u0026#34; =\u0026gt; decimaal_i \u0026lt;= \u0026#34;00001000\u0026#34; ; when \u0026#34;101\u0026#34; =\u0026gt; decimaal_i \u0026lt;= \u0026#34;00000100\u0026#34; ; when \u0026#34;110\u0026#34; =\u0026gt; decimaal_i \u0026lt;= \u0026#34;00000010\u0026#34; ; when others =\u0026gt; decimaal_i \u0026lt;= \u0026#34;00000001\u0026#34; ; end case; end process; end arch; BCD-naar-7-segment decoder library IEEE; use IEEE.STD_LOGIC_1164.ALL; entity bcd_to_7seg is port( bcd: in std_logic_vector(3 downto 0); seg7: out std_logic_vector(1 to 7) ); end bcd_to_7seg; architecture arch of bin_to_7seg is signal bcd_i: std_logic_vector(3 downto 0); signal seg7_i: std_logic_vector(1 to 7)); begin bcd_i \u0026lt;= bcd; seg7 \u0026lt;= seg7_i; p: process(bcd_i) begin case bcd_i is when \u0026#34;0000\u0026#34; =\u0026gt; seg7_i \u0026lt;= \u0026#34;1111110\u0026#34; ; when \u0026#34;0001\u0026#34; =\u0026gt; seg7_i \u0026lt;= \u0026#34;0110000\u0026#34; ; when \u0026#34;0010\u0026#34; =\u0026gt; seg7_i \u0026lt;= \u0026#34;1101101\u0026#34; ; when \u0026#34;0011\u0026#34; =\u0026gt; seg7_i \u0026lt;= \u0026#34;1111001\u0026#34; ; when \u0026#34;0100\u0026#34; =\u0026gt; seg7_i \u0026lt;= \u0026#34;0110011\u0026#34; ; when \u0026#34;0101\u0026#34; =\u0026gt; seg7_i \u0026lt;= \u0026#34;1011011\u0026#34; ; when \u0026#34;0110\u0026#34; =\u0026gt; seg7_i \u0026lt;= \u0026#34;1011111\u0026#34; ; when \u0026#34;0111\u0026#34; =\u0026gt; seg7_i \u0026lt;= \u0026#34;1110000\u0026#34; ; when \u0026#34;1000\u0026#34; =\u0026gt; seg7_i \u0026lt;= \u0026#34;1111111\u0026#34; ; when \u0026#34;1001\u0026#34; =\u0026gt; seg7_i \u0026lt;= \u0026#34;1111011\u0026#34; ; when others =\u0026gt; seg7_i \u0026lt;= \u0026#34;-------\u0026#34; ; end case; end process; end arch; Conditionele toekenning m.b.v. with-select Deze toekenning is equivalent aan een multiplexer. Overlap is verboden. \u0026quot; others\u0026quot; is altijd nodig. library ieee; use ieee.std_logic_1164.all; entity mux is port( a, b, c, d: in std_logic; s: in std_logic_vector(1 downto 0); z: out std_logic); end mux; architecture arch of mux is begin with s select z \u0026lt;= a when \u0026#34;00\u0026#34; , b when \u0026#34;01\u0026#34; , c when \u0026#34;10\u0026#34; , d when others; end arch; Conditionele toekenning m.b.v. when-else Deze toekenning is eveneens equivalent aan een multiplexer. library ieee; use ieee.std_logic_1164.all; entity mux is port( a, b, c, d: in std_logic; s: in std_logic_vector(1 downto 0); z: out std_logic); end mux; architecture arch of mux is begin with s select z \u0026lt;= a when (s = \u0026#34;00\u0026#34; ) else b when (s = \u0026#34;01\u0026#34; ) else c when (s = \u0026#34;10\u0026#34; ) else d; end arch; Modulo 10 up counter library ieee; use ieee.std_logic_1164.all; use ieee.std_logic_unsigned.all; entity comb_reg is port( clk: in std_logic; q: out std_logic_vector(3 downto 0)); end comb_reg; architecture arch_comb_reg of comb_reg is signal count: std_logic_vector(3 downto 0); begin p_comb_reg: process(clk) begin if clk\u0026#39;event and clk = \u0026#39;1\u0026#39; then if count \u0026gt;= \u0026#34;1001\u0026#34; then count \u0026lt;= \u0026#34;0000\u0026#34; ; else count \u0026lt;= count + 1; end if; end if; end process; q \u0026lt;= count; end arch_comb_reg; Cyclic shift register library ieee; use ieee.std_logic_1164.all; entity cyclic_shift is port( clk: in std_logic; load_data: in std_logic; data_in: in std_logic_vector(7 downto 0); data_out: out std_logic_vector(7 downto 0)); end cyclic_shift; architecture arch_cyclic_shift of cyclic_shift is signal shift_register: std_logic_vector(7 downto 0); begin p_comb_reg: process(clk) begin if clk\u0026#39;event and clk = \u0026#39;1\u0026#39; then if load_data = \u0026#39;1\u0026#39; then shift_register \u0026lt;= data_in; else shift_register(0) \u0026lt;= shift_register(7); shift_register(7 downto 1) \u0026lt;= shift_register(6 downto 0); end if; end if; end process; data_out \u0026lt;= shift_register; end arch_cyclic_shift; "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/900_zelfstudie_vhdl/997_lfsr/",
	"title": "Linear feedback shift register",
	"tags": [],
	"description": "",
	"content": "Als we een sequentie van getallen willen genereren, kunnen we een LFSR (linear feedback shift register) gebruiken. Een LFSR is een shift register, waarbij de inschuivende bit elke klokcyclus gelijk is aan de XOR van een aantal bits in de interne toestand. Op wikipedia staat uitgelegd welke bits er genomen moeten worden bij iedere grootte van LFSR.\nVoorbeeld 16 bit LFSR. Bron: Wikipedia library ieee; use ieee.std_logic_1164.all; entity LFSR is port( clk: in std_logic; load_data: in std_logic; reset: in std_logic; data_out: out std_logic_vector(15 downto 0)); end LFSR; architecture arch_LFSR of LFSR is signal shift_register: std_logic_vector(15 downto 0); begin p_comb_reg: process(clk) begin if clk\u0026#39;event and clk = \u0026#39;1\u0026#39; then if reset = \u0026#39;1\u0026#39; then shift_register \u0026lt;= (others =\u0026gt; \u0026#39;1\u0026#39;); --we resetten naar 1, anders loopt de LFSR vast else shift_register(0) \u0026lt;= shift_register(10) XOR shift_register(12) XOR shift_register(13) XOR shift_register(15); shift_register(15 downto 1) \u0026lt;= shift_register(14 downto 0); end if; end if; end process; data_out \u0026lt;= shift_register; end arch_LFSR; Een LFSR gebaseerd op XOR blijft stilstaan als alle bits 0 zijn. Als we dit niet willen kunnen in de plaats XNOR poorten gebruiken. Hierdoor blijft alles stilstaan als alle bits 1 zijn.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/",
	"title": "Digitale elektronische schakelingen",
	"tags": [],
	"description": "",
	"content": "Digitale elektronische schakelingen Image courtesy: pexels - Pixabay "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/course_disch/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]